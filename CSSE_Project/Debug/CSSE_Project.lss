
CSSE_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d8  00800100  0000278c  00002820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000278c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015b  008001d8  008001d8  000028f8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003d8  00000000  00000000  00002994  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c90  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016a5  00000000  00000000  000069fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000212d  00000000  00000000  000080a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b38  00000000  00000000  0000a1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010ff  00000000  00000000  0000ad08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bcd  00000000  00000000  0000be07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000340  00000000  00000000  0000e9d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__ctors_end>
       4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
       8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
       c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      10:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      14:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_5>
      18:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      1c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      20:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      24:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      28:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      2c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      30:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      34:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      38:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      3c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      40:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_16>
      44:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      48:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      4c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      50:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__vector_20>
      54:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__vector_21>
      58:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      5c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      60:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      64:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      68:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      6c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      70:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      74:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      78:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	59 6f       	ori	r21, 0xF9	; 249
      7e:	75 20       	and	r7, r5
      80:	68 61       	ori	r22, 0x18	; 24
      82:	76 65       	ori	r23, 0x56	; 86
      84:	20 25       	eor	r18, r0
      86:	6c 75       	andi	r22, 0x5C	; 92
      88:	20 6c       	ori	r18, 0xC0	; 192
      8a:	69 76       	andi	r22, 0x69	; 105
      8c:	65 73       	andi	r22, 0x35	; 53
      8e:	20 72       	andi	r18, 0x20	; 32
      90:	65 6d       	ori	r22, 0xD5	; 213
      92:	61 69       	ori	r22, 0x91	; 145
      94:	6e 69       	ori	r22, 0x9E	; 158
      96:	6e 67       	ori	r22, 0x7E	; 126
      98:	2e 00       	.word	0x002e	; ????

0000009a <__c.2421>:
      9a:	53 63 6f 72 65 3a 20 25 6c 75 00                    Score: %lu.

000000a5 <__c.2325>:
      a5:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      b5:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000c3 <__c.2323>:
      c3:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000cd <__c.2301>:
      cd:	59 6f 75 20 68 61 76 65 20 25 6c 75 20 6c 69 76     You have %lu liv
      dd:	65 73 20 72 65 6d 61 69 6e 69 6e 67 2e 00           es remaining..

000000eb <__c.2299>:
      eb:	53 63 6f 72 65 3a 20 25 6c 75 00                    Score: %lu.

000000f6 <__c.2297>:
      f6:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

00000100 <__c.2288>:
     100:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
     110:	6f 6a 65 63 74 20 62 79 20 4d 61 74 74 68 65 77     oject by Matthew
     120:	20 42 75 72 74 6f 6e 00                              Burton.

00000128 <__c.2286>:
     128:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

00000132 <numbers>:
     132:	9d 01 9a 01 96 01 92 01 8e 01 8a 01 86 01 82 01     ................
     142:	7e 01 7a 01                                         ~.z.

00000146 <letters>:
     146:	0c 02 08 02 04 02 00 02 fc 01 f8 01 f4 01 f0 01     ................
     156:	ed 01 e9 01 e5 01 e1 01 dc 01 d8 01 d4 01 d0 01     ................
     166:	cb 01 c7 01 c3 01 be 01 ba 01 b5 01 b0 01 ab 01     ................
     176:	a6 01 a1 01                                         ....

0000017a <cols_9>:
     17a:	64 92 92 7d                                         d..}

0000017e <cols_8>:
     17e:	6c 92 92 6d                                         l..m

00000182 <cols_7>:
     182:	80 9e a0 c1                                         ....

00000186 <cols_6>:
     186:	7c 92 92 4d                                         |..M

0000018a <cols_5>:
     18a:	e4 a2 a2 9d                                         ....

0000018e <cols_4>:
     18e:	18 28 48 ff                                         .(H.

00000192 <cols_3>:
     192:	44 92 92 6d                                         D..m

00000196 <cols_2>:
     196:	46 8a 92 63                                         F..c

0000019a <cols_1>:
     19a:	42 fe 03                                            B..

0000019d <cols_0>:
     19d:	7c 92 a2 7d                                         |..}

000001a1 <cols_Z>:
     1a1:	86 8a 92 a2 c3                                      .....

000001a6 <cols_Y>:
     1a6:	e0 10 0e 10 e1                                      .....

000001ab <cols_X>:
     1ab:	c6 28 10 28 c7                                      .(.(.

000001b0 <cols_W>:
     1b0:	fc 02 1c 02 fd                                      .....

000001b5 <cols_V>:
     1b5:	f8 04 02 04 f9                                      .....

000001ba <cols_U>:
     1ba:	fc 02 02 fd                                         ....

000001be <cols_T>:
     1be:	80 80 fe 80 81                                      .....

000001c3 <cols_S>:
     1c3:	64 92 92 4d                                         d..M

000001c7 <cols_R>:
     1c7:	fe 90 98 67                                         ...g

000001cb <cols_Q>:
     1cb:	7c 82 8a 7c 03                                      |..|.

000001d0 <cols_P>:
     1d0:	fe 90 90 61                                         ...a

000001d4 <cols_O>:
     1d4:	7c 82 82 7d                                         |..}

000001d8 <cols_N>:
     1d8:	fe 20 10 ff                                         . ..

000001dc <cols_M>:
     1dc:	fe 40 30 40 ff                                      .@0@.

000001e1 <cols_L>:
     1e1:	fe 02 02 03                                         ....

000001e5 <cols_K>:
     1e5:	fe 10 28 c7                                         ..(.

000001e9 <cols_J>:
     1e9:	04 02 02 fd                                         ....

000001ed <cols_I>:
     1ed:	82 fe 83                                            ...

000001f0 <cols_H>:
     1f0:	fe 10 10 ff                                         ....

000001f4 <cols_G>:
     1f4:	7c 82 92 5d                                         |..]

000001f8 <cols_F>:
     1f8:	fe 90 90 81                                         ....

000001fc <cols_E>:
     1fc:	fe 92 92 83                                         ....

00000200 <cols_D>:
     200:	fe 82 82 7d                                         ...}

00000204 <cols_C>:
     204:	7c 82 82 45                                         |..E

00000208 <cols_B>:
     208:	fe 92 92 6d                                         ...m

0000020c <cols_A>:
     20c:	7e 90 90 7f                                         ~...

00000210 <__c.2040>:
     210:	1b 5b 32 4a 00                                      .[2J.

00000215 <__c.2025>:
     215:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

0000021e <__ctors_end>:
     21e:	11 24       	eor	r1, r1
     220:	1f be       	out	0x3f, r1	; 63
     222:	cf ef       	ldi	r28, 0xFF	; 255
     224:	d8 e0       	ldi	r29, 0x08	; 8
     226:	de bf       	out	0x3e, r29	; 62
     228:	cd bf       	out	0x3d, r28	; 61

0000022a <__do_copy_data>:
     22a:	11 e0       	ldi	r17, 0x01	; 1
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b1 e0       	ldi	r27, 0x01	; 1
     230:	ec e8       	ldi	r30, 0x8C	; 140
     232:	f7 e2       	ldi	r31, 0x27	; 39
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x10>
     236:	05 90       	lpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	a8 3d       	cpi	r26, 0xD8	; 216
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0xc>

00000240 <__do_clear_bss>:
     240:	23 e0       	ldi	r18, 0x03	; 3
     242:	a8 ed       	ldi	r26, 0xD8	; 216
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	a3 33       	cpi	r26, 0x33	; 51
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>
     250:	0e 94 1c 0a 	call	0x1438	; 0x1438 <main>
     254:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <_exit>

00000258 <__bad_interrupt>:
     258:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025c <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     25c:	e8 e6       	ldi	r30, 0x68	; 104
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	82 60       	ori	r24, 0x02	; 2
     264:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     266:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     268:	ec e6       	ldi	r30, 0x6C	; 108
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     272:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <__data_end>
     276:	08 95       	ret

00000278 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     278:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <__data_end>
     27c:	18 16       	cp	r1, r24
     27e:	3c f5       	brge	.+78     	; 0x2ce <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     280:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     284:	6f b7       	in	r22, 0x3f	; 63
		cli();
     286:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     288:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <__data_end>
     28c:	92 30       	cpi	r25, 0x02	; 2
     28e:	b4 f0       	brlt	.+44     	; 0x2bc <button_pushed+0x44>
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     296:	f9 01       	movw	r30, r18
     298:	e7 52       	subi	r30, 0x27	; 39
     29a:	fe 4f       	sbci	r31, 0xFE	; 254
     29c:	40 81       	ld	r20, Z
     29e:	f9 01       	movw	r30, r18
     2a0:	e8 52       	subi	r30, 0x28	; 40
     2a2:	fe 4f       	sbci	r31, 0xFE	; 254
     2a4:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2a6:	9f 5f       	subi	r25, 0xFF	; 255
     2a8:	29 2f       	mov	r18, r25
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 91 d8 01 	lds	r20, 0x01D8	; 0x8001d8 <__data_end>
     2b0:	04 2e       	mov	r0, r20
     2b2:	00 0c       	add	r0, r0
     2b4:	55 0b       	sbc	r21, r21
     2b6:	24 17       	cp	r18, r20
     2b8:	35 07       	cpc	r19, r21
     2ba:	6c f3       	brlt	.-38     	; 0x296 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     2bc:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <__data_end>
     2c0:	91 50       	subi	r25, 0x01	; 1
     2c2:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <__data_end>
		
		if(interrupts_were_enabled) {
     2c6:	66 23       	and	r22, r22
     2c8:	1c f4       	brge	.+6      	; 0x2d0 <button_pushed+0x58>
			// Turn them back on again
			sei();
     2ca:	78 94       	sei
     2cc:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     2d0:	08 95       	ret

000002d2 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	2f 93       	push	r18
     2de:	3f 93       	push	r19
     2e0:	4f 93       	push	r20
     2e2:	5f 93       	push	r21
     2e4:	6f 93       	push	r22
     2e6:	7f 93       	push	r23
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	ef 93       	push	r30
     2ee:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2f0:	43 b1       	in	r20, 0x03	; 3
     2f2:	4f 70       	andi	r20, 0x0F	; 15
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     2f8:	64 2f       	mov	r22, r20
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <__data_end>
     300:	24 30       	cpi	r18, 0x04	; 4
     302:	04 f5       	brge	.+64     	; 0x344 <__vector_5+0x72>
     304:	9b 01       	movw	r18, r22
     306:	08 2e       	mov	r0, r24
     308:	02 c0       	rjmp	.+4      	; 0x30e <__vector_5+0x3c>
     30a:	35 95       	asr	r19
     30c:	27 95       	ror	r18
     30e:	0a 94       	dec	r0
     310:	e2 f7       	brpl	.-8      	; 0x30a <__vector_5+0x38>
     312:	20 ff       	sbrs	r18, 0
     314:	17 c0       	rjmp	.+46     	; 0x344 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     316:	20 91 dd 01 	lds	r18, 0x01DD	; 0x8001dd <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	08 2e       	mov	r0, r24
     31e:	02 c0       	rjmp	.+4      	; 0x324 <__vector_5+0x52>
     320:	35 95       	asr	r19
     322:	27 95       	ror	r18
     324:	0a 94       	dec	r0
     326:	e2 f7       	brpl	.-8      	; 0x320 <__vector_5+0x4e>
     328:	20 fd       	sbrc	r18, 0
     32a:	0c c0       	rjmp	.+24     	; 0x344 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     32c:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <__data_end>
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	2e 0f       	add	r18, r30
     334:	20 93 d8 01 	sts	0x01D8, r18	; 0x8001d8 <__data_end>
     338:	0e 2e       	mov	r0, r30
     33a:	00 0c       	add	r0, r0
     33c:	ff 0b       	sbc	r31, r31
     33e:	e7 52       	subi	r30, 0x27	; 39
     340:	fe 4f       	sbci	r31, 0xFE	; 254
     342:	80 83       	st	Z, r24
     344:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     346:	84 30       	cpi	r24, 0x04	; 4
     348:	91 05       	cpc	r25, r1
     34a:	c1 f6       	brne	.-80     	; 0x2fc <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     34c:	40 93 dd 01 	sts	0x01DD, r20	; 0x8001dd <last_button_state>
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	9f 91       	pop	r25
     356:	8f 91       	pop	r24
     358:	7f 91       	pop	r23
     35a:	6f 91       	pop	r22
     35c:	5f 91       	pop	r21
     35e:	4f 91       	pop	r20
     360:	3f 91       	pop	r19
     362:	2f 91       	pop	r18
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <asteroid_at>:
// Check whether there is an asteroid at a given position.
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     36e:	20 e1       	ldi	r18, 0x10	; 16
     370:	82 9f       	mul	r24, r18
     372:	c0 01       	movw	r24, r0
     374:	11 24       	eor	r1, r1
     376:	6f 70       	andi	r22, 0x0F	; 15
     378:	86 2b       	or	r24, r22
	for(i=0; i < numAsteroids; i++) {
     37a:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <numAsteroids>
     37e:	04 2e       	mov	r0, r20
     380:	00 0c       	add	r0, r0
     382:	55 0b       	sbc	r21, r21
     384:	14 16       	cp	r1, r20
     386:	15 06       	cpc	r1, r21
     388:	c4 f4       	brge	.+48     	; 0x3ba <asteroid_at+0x4c>
		if(asteroids[i] == positionToCheck) {
     38a:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <asteroids>
     38e:	89 17       	cp	r24, r25
     390:	49 f0       	breq	.+18     	; 0x3a4 <asteroid_at+0x36>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0a c0       	rjmp	.+20     	; 0x3aa <asteroid_at+0x3c>
     396:	f9 01       	movw	r30, r18
     398:	ec 50       	subi	r30, 0x0C	; 12
     39a:	fe 4f       	sbci	r31, 0xFE	; 254
     39c:	20 81       	ld	r18, Z
     39e:	82 13       	cpse	r24, r18
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <asteroid_at+0x3c>
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <asteroid_at+0x38>
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     3a4:	90 e0       	ldi	r25, 0x00	; 0
		if(asteroids[i] == positionToCheck) {
			// Asteroid i is at the given position
			return i;
     3a6:	89 2f       	mov	r24, r25
     3a8:	08 95       	ret
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     3aa:	9f 5f       	subi	r25, 0xFF	; 255
     3ac:	29 2f       	mov	r18, r25
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	24 17       	cp	r18, r20
     3b2:	35 07       	cpc	r19, r21
     3b4:	84 f3       	brlt	.-32     	; 0x396 <asteroid_at+0x28>
			// Asteroid i is at the given position
			return i;
		}
	}
	// No match was found - no asteroid at the given position
	return -1;
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	08 95       	ret
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
}
     3bc:	08 95       	ret

000003be <redraw_base>:
	redraw_all_asteroids();	
	redraw_all_projectiles();
}


static void redraw_base(uint8_t colour){
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	18 2f       	mov	r17, r24
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition + 1; x++) {
     3c6:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <basePosition>
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	89 0f       	add	r24, r25
     3ce:	48 2f       	mov	r20, r24
     3d0:	08 2e       	mov	r0, r24
     3d2:	00 0c       	add	r0, r0
     3d4:	55 0b       	sbc	r21, r21
     3d6:	29 2f       	mov	r18, r25
     3d8:	09 2e       	mov	r0, r25
     3da:	00 0c       	add	r0, r0
     3dc:	33 0b       	sbc	r19, r19
     3de:	2f 5f       	subi	r18, 0xFF	; 255
     3e0:	3f 4f       	sbci	r19, 0xFF	; 255
     3e2:	24 17       	cp	r18, r20
     3e4:	35 07       	cpc	r19, r21
     3e6:	e4 f0       	brlt	.+56     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3e8:	d8 e0       	ldi	r29, 0x08	; 8
     3ea:	d9 1b       	sub	r29, r25
     3ec:	c8 2f       	mov	r28, r24
		if (x >= 0 && x < FIELD_WIDTH) {
     3ee:	88 30       	cpi	r24, 0x08	; 8
     3f0:	28 f4       	brcc	.+10     	; 0x3fc <redraw_base+0x3e>
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
     3f2:	41 2f       	mov	r20, r17
     3f4:	6d 2f       	mov	r22, r29
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 bb 06 	call	0xd76	; 0xd76 <ledmatrix_update_pixel>
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	8c 0f       	add	r24, r28


static void redraw_base(uint8_t colour){
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition + 1; x++) {
     400:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <basePosition>
     404:	d1 50       	subi	r29, 0x01	; 1
     406:	48 2f       	mov	r20, r24
     408:	08 2e       	mov	r0, r24
     40a:	00 0c       	add	r0, r0
     40c:	55 0b       	sbc	r21, r21
     40e:	29 2f       	mov	r18, r25
     410:	09 2e       	mov	r0, r25
     412:	00 0c       	add	r0, r0
     414:	33 0b       	sbc	r19, r19
     416:	2f 5f       	subi	r18, 0xFF	; 255
     418:	3f 4f       	sbci	r19, 0xFF	; 255
     41a:	24 17       	cp	r18, r20
     41c:	35 07       	cpc	r19, r21
     41e:	34 f7       	brge	.-52     	; 0x3ec <redraw_base+0x2e>
		if (x >= 0 && x < FIELD_WIDTH) {
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
     420:	67 e0       	ldi	r22, 0x07	; 7
     422:	69 1b       	sub	r22, r25
     424:	41 2f       	mov	r20, r17
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 bb 06 	call	0xd76	; 0xd76 <ledmatrix_update_pixel>
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	08 95       	ret

00000434 <redraw_asteroid>:
}


static void redraw_asteroid(uint8_t asteroidNumber, uint8_t colour) {
	uint8_t asteroidPosn;
	if(asteroidNumber < numAsteroids) {
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <numAsteroids>
     43a:	02 2e       	mov	r0, r18
     43c:	00 0c       	add	r0, r0
     43e:	33 0b       	sbc	r19, r19
     440:	82 17       	cp	r24, r18
     442:	93 07       	cpc	r25, r19
     444:	6c f4       	brge	.+26     	; 0x460 <redraw_asteroid+0x2c>
     446:	46 2f       	mov	r20, r22
		asteroidPosn = asteroids[asteroidNumber];
     448:	fc 01       	movw	r30, r24
     44a:	ec 50       	subi	r30, 0x0C	; 12
     44c:	fe 4f       	sbci	r31, 0xFE	; 254
     44e:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(asteroidPosn), colour);
     450:	98 2f       	mov	r25, r24
     452:	92 95       	swap	r25
     454:	9f 70       	andi	r25, 0x0F	; 15
     456:	67 e0       	ldi	r22, 0x07	; 7
     458:	69 1b       	sub	r22, r25
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	0e 94 bb 06 	call	0xd76	; 0xd76 <ledmatrix_update_pixel>
     460:	08 95       	ret

00000462 <remove_asteroid>:
}

/* Remove asteroid with the given index number (from 0 to
** numAsteroids - 1).
*/
static void remove_asteroid(int8_t asteroidNumber) {
     462:	cf 93       	push	r28
	if(asteroidNumber < 0 || asteroidNumber >= numAsteroids) {
     464:	88 23       	and	r24, r24
     466:	0c f1       	brlt	.+66     	; 0x4aa <remove_asteroid+0x48>
     468:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <numAsteroids>
     46c:	89 17       	cp	r24, r25
     46e:	ec f4       	brge	.+58     	; 0x4aa <remove_asteroid+0x48>
     470:	c8 2f       	mov	r28, r24
		// Invalid index - do nothing
		return;
	}
	
	// Remove the asteroid from the display
	redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
	
	if(asteroidNumber < numAsteroids - 1) {
     478:	8c 2f       	mov	r24, r28
     47a:	cc 0f       	add	r28, r28
     47c:	99 0b       	sbc	r25, r25
     47e:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <numAsteroids>
     482:	24 2f       	mov	r18, r20
     484:	04 2e       	mov	r0, r20
     486:	00 0c       	add	r0, r0
     488:	33 0b       	sbc	r19, r19
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	31 09       	sbc	r19, r1
     48e:	82 17       	cp	r24, r18
     490:	93 07       	cpc	r25, r19
     492:	44 f4       	brge	.+16     	; 0x4a4 <remove_asteroid+0x42>
		// Asteroid is not the last one in the list
		// - move the last one in the list to this position
		asteroids[asteroidNumber] = asteroids[numAsteroids - 1];
     494:	f9 01       	movw	r30, r18
     496:	ec 50       	subi	r30, 0x0C	; 12
     498:	fe 4f       	sbci	r31, 0xFE	; 254
     49a:	20 81       	ld	r18, Z
     49c:	fc 01       	movw	r30, r24
     49e:	ec 50       	subi	r30, 0x0C	; 12
     4a0:	fe 4f       	sbci	r31, 0xFE	; 254
     4a2:	20 83       	st	Z, r18
	}
	// Last position in asteroids array is no longer used
	numAsteroids--;
     4a4:	41 50       	subi	r20, 0x01	; 1
     4a6:	40 93 ee 01 	sts	0x01EE, r20	; 0x8001ee <numAsteroids>
}
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <redraw_projectile>:

static void redraw_projectile(uint8_t projectileNumber, uint8_t colour) {
	uint8_t projectilePosn;
	
	// Check projectileNumber is valid - ignore otherwise
	if(projectileNumber < numProjectiles) {
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <numProjectiles>
     4b4:	02 2e       	mov	r0, r18
     4b6:	00 0c       	add	r0, r0
     4b8:	33 0b       	sbc	r19, r19
     4ba:	82 17       	cp	r24, r18
     4bc:	93 07       	cpc	r25, r19
     4be:	6c f4       	brge	.+26     	; 0x4da <redraw_projectile+0x2c>
     4c0:	46 2f       	mov	r20, r22
		projectilePosn = projectiles[projectileNumber];
     4c2:	fc 01       	movw	r30, r24
     4c4:	e1 51       	subi	r30, 0x11	; 17
     4c6:	fe 4f       	sbci	r31, 0xFE	; 254
     4c8:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(projectilePosn), colour);
     4ca:	98 2f       	mov	r25, r24
     4cc:	92 95       	swap	r25
     4ce:	9f 70       	andi	r25, 0x0F	; 15
     4d0:	67 e0       	ldi	r22, 0x07	; 7
     4d2:	69 1b       	sub	r22, r25
     4d4:	8f 70       	andi	r24, 0x0F	; 15
     4d6:	0e 94 bb 06 	call	0xd76	; 0xd76 <ledmatrix_update_pixel>
     4da:	08 95       	ret

000004dc <remove_projectile>:
}


// Remove projectile with the given projectile number (from 0 to
// numProjectiles - 1).
static void remove_projectile(int8_t projectileNumber) {	
     4dc:	cf 93       	push	r28
	if(projectileNumber < 0 || projectileNumber >= numProjectiles) {
     4de:	88 23       	and	r24, r24
     4e0:	24 f1       	brlt	.+72     	; 0x52a <remove_projectile+0x4e>
     4e2:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <numProjectiles>
     4e6:	89 17       	cp	r24, r25
     4e8:	04 f5       	brge	.+64     	; 0x52a <remove_projectile+0x4e>
     4ea:	c8 2f       	mov	r28, r24
		// Invalid index - do nothing 
		return;
	}
	
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	8c 0f       	add	r24, r28
     4f6:	28 2f       	mov	r18, r24
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	60 91 f3 01 	lds	r22, 0x01F3	; 0x8001f3 <numProjectiles>
     4fe:	46 2f       	mov	r20, r22
     500:	06 2e       	mov	r0, r22
     502:	00 0c       	add	r0, r0
     504:	55 0b       	sbc	r21, r21
     506:	24 17       	cp	r18, r20
     508:	35 07       	cpc	r19, r21
     50a:	64 f4       	brge	.+24     	; 0x524 <remove_projectile+0x48>
		projectiles[i-1] = projectiles[i];
     50c:	f9 01       	movw	r30, r18
     50e:	e1 51       	subi	r30, 0x11	; 17
     510:	fe 4f       	sbci	r31, 0xFE	; 254
     512:	90 81       	ld	r25, Z
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	90 83       	st	Z, r25
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	28 2f       	mov	r18, r24
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	24 17       	cp	r18, r20
     520:	35 07       	cpc	r19, r21
     522:	a4 f3       	brlt	.-24     	; 0x50c <remove_projectile+0x30>
		projectiles[i-1] = projectiles[i];
	}
	// Update projectile count - have one fewer projectiles now.
	numProjectiles--;
     524:	61 50       	subi	r22, 0x01	; 1
     526:	60 93 f3 01 	sts	0x01F3, r22	; 0x8001f3 <numProjectiles>
}
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <redraw_hit_base>:
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
}


static void redraw_hit_base(void) {
     52e:	4f 92       	push	r4
     530:	5f 92       	push	r5
     532:	6f 92       	push	r6
     534:	7f 92       	push	r7
     536:	8f 92       	push	r8
     538:	9f 92       	push	r9
     53a:	af 92       	push	r10
     53c:	bf 92       	push	r11
     53e:	cf 92       	push	r12
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	00 d0       	rcall	.+0      	; 0x54c <redraw_hit_base+0x1e>
     54c:	00 d0       	rcall	.+0      	; 0x54e <redraw_hit_base+0x20>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
	// Write a new timer function to handle this, if you don't want to use sound.
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
     552:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <get_current_time>
     556:	69 83       	std	Y+1, r22	; 0x01
     558:	7a 83       	std	Y+2, r23	; 0x02
     55a:	8b 83       	std	Y+3, r24	; 0x03
     55c:	9c 83       	std	Y+4, r25	; 0x04
	uint32_t current_time = start_time;
	uint32_t flicker_time = start_time;
	init_sound();
     55e:	0e 94 44 07 	call	0xe88	; 0xe88 <init_sound>
static void redraw_hit_base(void) {
	// Write a new timer function to handle this, if you don't want to use sound.
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
	uint32_t current_time = start_time;
	uint32_t flicker_time = start_time;
     562:	89 80       	ldd	r8, Y+1	; 0x01
     564:	9a 80       	ldd	r9, Y+2	; 0x02
     566:	ab 80       	ldd	r10, Y+3	; 0x03
     568:	bc 80       	ldd	r11, Y+4	; 0x04

static void redraw_hit_base(void) {
	// Write a new timer function to handle this, if you don't want to use sound.
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
	uint32_t current_time = start_time;
     56a:	75 01       	movw	r14, r10
     56c:	64 01       	movw	r12, r8
	uint32_t flicker_time = start_time;
	init_sound();
	while(current_time < start_time + 1000) {
     56e:	24 01       	movw	r4, r8
     570:	35 01       	movw	r6, r10
     572:	88 ee       	ldi	r24, 0xE8	; 232
     574:	48 0e       	add	r4, r24
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	58 1e       	adc	r5, r24
     57a:	61 1c       	adc	r6, r1
     57c:	71 1c       	adc	r7, r1
     57e:	36 c0       	rjmp	.+108    	; 0x5ec <redraw_hit_base+0xbe>
		random_sound();
     580:	0e 94 92 07 	call	0xf24	; 0xf24 <random_sound>
		display_data(current_time);
     584:	c7 01       	movw	r24, r14
     586:	b6 01       	movw	r22, r12
     588:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <display_data>
		current_time = get_current_time();
     58c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <get_current_time>
     590:	6b 01       	movw	r12, r22
     592:	7c 01       	movw	r14, r24
		if (current_time == flicker_time + 250) {
     594:	d5 01       	movw	r26, r10
     596:	c4 01       	movw	r24, r8
     598:	86 50       	subi	r24, 0x06	; 6
     59a:	9f 4f       	sbci	r25, 0xFF	; 255
     59c:	af 4f       	sbci	r26, 0xFF	; 255
     59e:	bf 4f       	sbci	r27, 0xFF	; 255
     5a0:	c8 16       	cp	r12, r24
     5a2:	d9 06       	cpc	r13, r25
     5a4:	ea 06       	cpc	r14, r26
     5a6:	fb 06       	cpc	r15, r27
     5a8:	19 f4       	brne	.+6      	; 0x5b0 <redraw_hit_base+0x82>
			redraw_base(COLOUR_BLACK);
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
		} 
		if (current_time == flicker_time + 500) {
     5b0:	d5 01       	movw	r26, r10
     5b2:	c4 01       	movw	r24, r8
     5b4:	8c 50       	subi	r24, 0x0C	; 12
     5b6:	9e 4f       	sbci	r25, 0xFE	; 254
     5b8:	af 4f       	sbci	r26, 0xFF	; 255
     5ba:	bf 4f       	sbci	r27, 0xFF	; 255
     5bc:	c8 16       	cp	r12, r24
     5be:	d9 06       	cpc	r13, r25
     5c0:	ea 06       	cpc	r14, r26
     5c2:	fb 06       	cpc	r15, r27
     5c4:	19 f4       	brne	.+6      	; 0x5cc <redraw_hit_base+0x9e>
			redraw_base(COLOUR_PROJECTILE);
     5c6:	8f e0       	ldi	r24, 0x0F	; 15
     5c8:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
		}
		if (current_time == flicker_time + 750) {
     5cc:	d5 01       	movw	r26, r10
     5ce:	c4 01       	movw	r24, r8
     5d0:	82 51       	subi	r24, 0x12	; 18
     5d2:	9d 4f       	sbci	r25, 0xFD	; 253
     5d4:	af 4f       	sbci	r26, 0xFF	; 255
     5d6:	bf 4f       	sbci	r27, 0xFF	; 255
     5d8:	c8 16       	cp	r12, r24
     5da:	d9 06       	cpc	r13, r25
     5dc:	ea 06       	cpc	r14, r26
     5de:	fb 06       	cpc	r15, r27
     5e0:	29 f4       	brne	.+10     	; 0x5ec <redraw_hit_base+0xbe>
			redraw_base(COLOUR_GREEN);
     5e2:	80 ef       	ldi	r24, 0xF0	; 240
     5e4:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
			flicker_time = current_time;
     5e8:	46 01       	movw	r8, r12
     5ea:	57 01       	movw	r10, r14
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
	uint32_t current_time = start_time;
	uint32_t flicker_time = start_time;
	init_sound();
	while(current_time < start_time + 1000) {
     5ec:	c4 14       	cp	r12, r4
     5ee:	d5 04       	cpc	r13, r5
     5f0:	e6 04       	cpc	r14, r6
     5f2:	f7 04       	cpc	r15, r7
     5f4:	28 f2       	brcs	.-118    	; 0x580 <redraw_hit_base+0x52>
		if (current_time == flicker_time + 750) {
			redraw_base(COLOUR_GREEN);
			flicker_time = current_time;
		}
	}
	kill_sound();
     5f6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <kill_sound>
	update_time(start_time - 3);
     5fa:	69 81       	ldd	r22, Y+1	; 0x01
     5fc:	7a 81       	ldd	r23, Y+2	; 0x02
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	63 50       	subi	r22, 0x03	; 3
     604:	71 09       	sbc	r23, r1
     606:	81 09       	sbc	r24, r1
     608:	91 09       	sbc	r25, r1
     60a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <update_time>
	set_clock_ticks(start_time);
     60e:	69 81       	ldd	r22, Y+1	; 0x01
     610:	7a 81       	ldd	r23, Y+2	; 0x02
     612:	8b 81       	ldd	r24, Y+3	; 0x03
     614:	9c 81       	ldd	r25, Y+4	; 0x04
     616:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <set_clock_ticks>
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     61a:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
	clear_serial_input_buffer();
     61e:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <clear_serial_input_buffer>
	redraw_base(COLOUR_BASE);
     622:	8f ed       	ldi	r24, 0xDF	; 223
     624:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
}
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	ff 90       	pop	r15
     636:	ef 90       	pop	r14
     638:	df 90       	pop	r13
     63a:	cf 90       	pop	r12
     63c:	bf 90       	pop	r11
     63e:	af 90       	pop	r10
     640:	9f 90       	pop	r9
     642:	8f 90       	pop	r8
     644:	7f 90       	pop	r7
     646:	6f 90       	pop	r6
     648:	5f 90       	pop	r5
     64a:	4f 90       	pop	r4
     64c:	08 95       	ret

0000064e <handle_collision>:
	return 0;
}

// Remove the projectile and asteroid when they collide. Incrementing score.
// Sound effects can be handled here as well.
static void handle_collision(int8_t asteroidIndex, int8_t projectileIndex) {
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	c8 2f       	mov	r28, r24
     656:	86 2f       	mov	r24, r22
	// Remove the collided particles.
	remove_projectile(projectileIndex);
     658:	0e 94 6e 02 	call	0x4dc	; 0x4dc <remove_projectile>
	remove_asteroid(asteroidIndex);
     65c:	8c 2f       	mov	r24, r28
     65e:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		// Generate random x position - somewhere from 0
		// to FIELD_WIDTH - 1
		x = (uint8_t)(random() % FIELD_WIDTH);
		// Generate random y position - somewhere from
		// FIELD_HEIGHT - 1 to FIELD_HEIGHT - 2
		y = (uint8_t)(FIELD_HEIGHT - 1 - (random() % 2));
     662:	df e0       	ldi	r29, 0x0F	; 15
	// Generate random position that does not already
	// have an asteroid.
	do {
		// Generate random x position - somewhere from 0
		// to FIELD_WIDTH - 1
		x = (uint8_t)(random() % FIELD_WIDTH);
     664:	0e 94 2e 10 	call	0x205c	; 0x205c <random>
     668:	dc 01       	movw	r26, r24
     66a:	cb 01       	movw	r24, r22
     66c:	87 70       	andi	r24, 0x07	; 7
     66e:	99 27       	eor	r25, r25
     670:	aa 27       	eor	r26, r26
     672:	b0 78       	andi	r27, 0x80	; 128
     674:	bb 23       	and	r27, r27
     676:	54 f4       	brge	.+20     	; 0x68c <handle_collision+0x3e>
     678:	01 97       	sbiw	r24, 0x01	; 1
     67a:	a1 09       	sbc	r26, r1
     67c:	b1 09       	sbc	r27, r1
     67e:	88 6f       	ori	r24, 0xF8	; 248
     680:	9f 6f       	ori	r25, 0xFF	; 255
     682:	af 6f       	ori	r26, 0xFF	; 255
     684:	bf 6f       	ori	r27, 0xFF	; 255
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	a1 1d       	adc	r26, r1
     68a:	b1 1d       	adc	r27, r1
     68c:	c8 2f       	mov	r28, r24
		// Generate random y position - somewhere from
		// FIELD_HEIGHT - 1 to FIELD_HEIGHT - 2
		y = (uint8_t)(FIELD_HEIGHT - 1 - (random() % 2));
     68e:	0e 94 2e 10 	call	0x205c	; 0x205c <random>
     692:	dc 01       	movw	r26, r24
     694:	cb 01       	movw	r24, r22
     696:	81 70       	andi	r24, 0x01	; 1
     698:	99 27       	eor	r25, r25
     69a:	aa 27       	eor	r26, r26
     69c:	b0 78       	andi	r27, 0x80	; 128
     69e:	bb 23       	and	r27, r27
     6a0:	54 f4       	brge	.+20     	; 0x6b6 <handle_collision+0x68>
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	a1 09       	sbc	r26, r1
     6a6:	b1 09       	sbc	r27, r1
     6a8:	8e 6f       	ori	r24, 0xFE	; 254
     6aa:	9f 6f       	ori	r25, 0xFF	; 255
     6ac:	af 6f       	ori	r26, 0xFF	; 255
     6ae:	bf 6f       	ori	r27, 0xFF	; 255
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	a1 1d       	adc	r26, r1
     6b4:	b1 1d       	adc	r27, r1
     6b6:	1d 2f       	mov	r17, r29
     6b8:	18 1b       	sub	r17, r24
	} while(asteroid_at(x,y) != -1);
     6ba:	61 2f       	mov	r22, r17
     6bc:	8c 2f       	mov	r24, r28
     6be:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     6c2:	8f 3f       	cpi	r24, 0xFF	; 255
     6c4:	79 f6       	brne	.-98     	; 0x664 <handle_collision+0x16>
	// If we get here, we've now found an x,y location without
	// an existing asteroid - record the position
	asteroids[numAsteroids] = GAME_POSITION(x,y);
     6c6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <numAsteroids>
     6ca:	e8 2f       	mov	r30, r24
     6cc:	08 2e       	mov	r0, r24
     6ce:	00 0c       	add	r0, r0
     6d0:	ff 0b       	sbc	r31, r31
     6d2:	ec 50       	subi	r30, 0x0C	; 12
     6d4:	fe 4f       	sbci	r31, 0xFE	; 254
     6d6:	90 e1       	ldi	r25, 0x10	; 16
     6d8:	c9 9f       	mul	r28, r25
     6da:	b0 01       	movw	r22, r0
     6dc:	11 24       	eor	r1, r1
     6de:	1f 70       	andi	r17, 0x0F	; 15
     6e0:	61 2b       	or	r22, r17
     6e2:	60 83       	st	Z, r22
	numAsteroids++;
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	98 0f       	add	r25, r24
     6e8:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <numAsteroids>
	
	// Add the asteroid to the display
	redraw_asteroid(numAsteroids - 1, COLOUR_ASTEROID);
     6ec:	60 ef       	ldi	r22, 0xF0	; 240
     6ee:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
	// Remove the collided particles.
	remove_projectile(projectileIndex);
	remove_asteroid(asteroidIndex);
	add_asteroid();
	// Add one to the score
	add_to_score(1);
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 30 0a 	call	0x1460	; 0x1460 <add_to_score>
	// Output the score to the console - Potential to handle this in project.c
	move_cursor(2,4);
     6fa:	64 e0       	ldi	r22, 0x04	; 4
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	82 e0       	ldi	r24, 0x02	; 2
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <move_cursor>
	printf_P(PSTR("Score: %lu"), get_score());
     706:	0e 94 45 0a 	call	0x148a	; 0x148a <get_score>
     70a:	9f 93       	push	r25
     70c:	8f 93       	push	r24
     70e:	7f 93       	push	r23
     710:	6f 93       	push	r22
     712:	8a e9       	ldi	r24, 0x9A	; 154
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
}
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	08 95       	ret

00000732 <initialise_game>:
 
// Initialise game field:
// (1) base starts in the centre (x=3)
// (2) no projectiles initially
// (3) the maximum number of asteroids, randomly distributed.
void initialise_game(void) {
     732:	4f 92       	push	r4
     734:	5f 92       	push	r5
     736:	6f 92       	push	r6
     738:	7f 92       	push	r7
     73a:	af 92       	push	r10
     73c:	bf 92       	push	r11
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
	uint8_t x, y, i;
	
    basePosition = 3;
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <basePosition>
	numProjectiles = 0;
     754:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <numProjectiles>
	numAsteroids = 0;
     758:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <numAsteroids>
     75c:	04 ef       	ldi	r16, 0xF4	; 244
     75e:	11 e0       	ldi	r17, 0x01	; 1
     760:	0f 2e       	mov	r0, r31
     762:	f8 e0       	ldi	r31, 0x08	; 8
     764:	af 2e       	mov	r10, r31
     766:	f2 e0       	ldi	r31, 0x02	; 2
     768:	bf 2e       	mov	r11, r31
     76a:	f0 2d       	mov	r31, r0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     76c:	0f 2e       	mov	r0, r31
     76e:	fd e0       	ldi	r31, 0x0D	; 13
     770:	4f 2e       	mov	r4, r31
     772:	51 2c       	mov	r5, r1
     774:	61 2c       	mov	r6, r1
     776:	71 2c       	mov	r7, r1
     778:	f0 2d       	mov	r31, r0
		// Generate random position that does not already
		// have an asteroid.
		do {
			// Generate random x position - somewhere from 0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
     77a:	0e 94 2e 10 	call	0x205c	; 0x205c <random>
     77e:	6b 01       	movw	r12, r22
     780:	7c 01       	movw	r14, r24
     782:	27 e0       	ldi	r18, 0x07	; 7
     784:	c2 22       	and	r12, r18
     786:	dd 24       	eor	r13, r13
     788:	ee 24       	eor	r14, r14
     78a:	20 e8       	ldi	r18, 0x80	; 128
     78c:	f2 22       	and	r15, r18
     78e:	ff 20       	and	r15, r15
     790:	84 f4       	brge	.+32     	; 0x7b2 <initialise_game+0x80>
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	c8 1a       	sub	r12, r24
     796:	d1 08       	sbc	r13, r1
     798:	e1 08       	sbc	r14, r1
     79a:	f1 08       	sbc	r15, r1
     79c:	e8 ef       	ldi	r30, 0xF8	; 248
     79e:	ce 2a       	or	r12, r30
     7a0:	dd 24       	eor	r13, r13
     7a2:	da 94       	dec	r13
     7a4:	ed 2c       	mov	r14, r13
     7a6:	fe 2c       	mov	r15, r14
     7a8:	ff ef       	ldi	r31, 0xFF	; 255
     7aa:	cf 1a       	sub	r12, r31
     7ac:	df 0a       	sbc	r13, r31
     7ae:	ef 0a       	sbc	r14, r31
     7b0:	ff 0a       	sbc	r15, r31
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     7b2:	0e 94 2e 10 	call	0x205c	; 0x205c <random>
     7b6:	a3 01       	movw	r20, r6
     7b8:	92 01       	movw	r18, r4
     7ba:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__divmodsi4>
     7be:	c3 e0       	ldi	r28, 0x03	; 3
     7c0:	c6 0f       	add	r28, r22
		} while(asteroid_at(x,y) != -1);
     7c2:	6c 2f       	mov	r22, r28
     7c4:	8c 2d       	mov	r24, r12
     7c6:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     7ca:	8f 3f       	cpi	r24, 0xFF	; 255
     7cc:	b1 f6       	brne	.-84     	; 0x77a <initialise_game+0x48>
		// If we get here, we've now found an x,y location without
		// an existing asteroid - record the position
		asteroids[i] = GAME_POSITION(x,y);
     7ce:	20 e1       	ldi	r18, 0x10	; 16
     7d0:	c2 9e       	mul	r12, r18
     7d2:	b0 01       	movw	r22, r0
     7d4:	11 24       	eor	r1, r1
     7d6:	cf 70       	andi	r28, 0x0F	; 15
     7d8:	c6 2b       	or	r28, r22
     7da:	f8 01       	movw	r30, r16
     7dc:	c1 93       	st	Z+, r28
     7de:	8f 01       	movw	r16, r30
		numAsteroids++;
     7e0:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <numAsteroids>
     7e4:	8f 5f       	subi	r24, 0xFF	; 255
     7e6:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <numAsteroids>
	
    basePosition = 3;
	numProjectiles = 0;
	numAsteroids = 0;

	for(i=0; i < MAX_ASTEROIDS ; i++) {
     7ea:	ea 15       	cp	r30, r10
     7ec:	fb 05       	cpc	r31, r11
     7ee:	29 f6       	brne	.-118    	; 0x77a <initialise_game+0x48>

// Redraw the whole display - base, asteroids and projectiles.
// We assume all of the data structures have been appropriately populated
static void redraw_whole_display(void) {
	// clear the display
	ledmatrix_clear();
     7f0:	0e 94 05 07 	call	0xe0a	; 0xe0a <ledmatrix_clear>
	
	// Redraw each of the elements
	redraw_base(COLOUR_BASE);
     7f4:	8f ed       	ldi	r24, 0xDF	; 223
     7f6:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
}


static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     7fa:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <numAsteroids>
     7fe:	18 16       	cp	r1, r24
     800:	84 f4       	brge	.+32     	; 0x822 <initialise_game+0xf0>
     802:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_asteroid(i, COLOUR_ASTEROID);
     804:	60 ef       	ldi	r22, 0xF0	; 240
     806:	8c 2f       	mov	r24, r28
     808:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
}


static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     80c:	cf 5f       	subi	r28, 0xFF	; 255
     80e:	2c 2f       	mov	r18, r28
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <numAsteroids>
     816:	08 2e       	mov	r0, r24
     818:	00 0c       	add	r0, r0
     81a:	99 0b       	sbc	r25, r25
     81c:	28 17       	cp	r18, r24
     81e:	39 07       	cpc	r19, r25
     820:	8c f3       	brlt	.-30     	; 0x804 <initialise_game+0xd2>
}


static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     822:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <numProjectiles>
     826:	18 16       	cp	r1, r24
     828:	84 f4       	brge	.+32     	; 0x84a <initialise_game+0x118>
     82a:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_projectile(i, COLOUR_PROJECTILE);
     82c:	6f e0       	ldi	r22, 0x0F	; 15
     82e:	8c 2f       	mov	r24, r28
     830:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
}


static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     834:	cf 5f       	subi	r28, 0xFF	; 255
     836:	2c 2f       	mov	r18, r28
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <numProjectiles>
     83e:	08 2e       	mov	r0, r24
     840:	00 0c       	add	r0, r0
     842:	99 0b       	sbc	r25, r25
     844:	28 17       	cp	r18, r24
     846:	39 07       	cpc	r19, r25
     848:	8c f3       	brlt	.-30     	; 0x82c <initialise_game+0xfa>
		asteroids[i] = GAME_POSITION(x,y);
		numAsteroids++;
	}
	
	redraw_whole_display();
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	bf 90       	pop	r11
     85c:	af 90       	pop	r10
     85e:	7f 90       	pop	r7
     860:	6f 90       	pop	r6
     862:	5f 90       	pop	r5
     864:	4f 90       	pop	r4
     866:	08 95       	ret

00000868 <fire_projectile>:
// Fire projectile - add it immediately above the base
// station, provided there is not already a projectile
// there. We are also limited in the number of projectiles
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
     868:	cf 93       	push	r28
	uint8_t newProjectileNumber;
	uint8_t asteroidLocation;
	
	if(numProjectiles < MAX_PROJECTILES && 
     86a:	c0 91 f3 01 	lds	r28, 0x01F3	; 0x8001f3 <numProjectiles>
     86e:	c4 30       	cpi	r28, 0x04	; 4
     870:	0c f0       	brlt	.+2      	; 0x874 <fire_projectile+0xc>
     872:	43 c0       	rjmp	.+134    	; 0x8fa <fire_projectile+0x92>
			projectile_at(basePosition, 2) == -1) {
     874:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <basePosition>
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     878:	90 e1       	ldi	r25, 0x10	; 16
     87a:	89 9f       	mul	r24, r25
     87c:	90 01       	movw	r18, r0
     87e:	11 24       	eor	r1, r1
     880:	42 2f       	mov	r20, r18
     882:	42 60       	ori	r20, 0x02	; 2
	for(i=0; i < numProjectiles; i++) {
     884:	6c 2f       	mov	r22, r28
     886:	0c 2e       	mov	r0, r28
     888:	00 0c       	add	r0, r0
     88a:	77 0b       	sbc	r23, r23
     88c:	16 16       	cp	r1, r22
     88e:	17 06       	cpc	r1, r23
     890:	b4 f4       	brge	.+44     	; 0x8be <fire_projectile+0x56>
		if(projectiles[i] == positionToCheck) {
     892:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <projectiles>
     896:	94 17       	cp	r25, r20
     898:	91 f1       	breq	.+100    	; 0x8fe <fire_projectile+0x96>
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <fire_projectile+0x4a>
     89e:	f9 01       	movw	r30, r18
     8a0:	e1 51       	subi	r30, 0x11	; 17
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	20 81       	ld	r18, Z
     8a6:	42 13       	cpse	r20, r18
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <fire_projectile+0x4a>
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
	uint8_t newProjectileNumber;
	uint8_t asteroidLocation;
	
	if(numProjectiles < MAX_PROJECTILES && 
     8aa:	9f 3f       	cpi	r25, 0xFF	; 255
     8ac:	41 f0       	breq	.+16     	; 0x8be <fire_projectile+0x56>
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		}
		return 1;
	} else {
		return 0;
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	27 c0       	rjmp	.+78     	; 0x900 <__stack+0x1>
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     8b2:	9f 5f       	subi	r25, 0xFF	; 255
     8b4:	29 2f       	mov	r18, r25
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	26 17       	cp	r18, r22
     8ba:	37 07       	cpc	r19, r23
     8bc:	84 f3       	brlt	.-32     	; 0x89e <fire_projectile+0x36>
	
	if(numProjectiles < MAX_PROJECTILES && 
			projectile_at(basePosition, 2) == -1) {
		// Have space to add projectile - add it at the x position of
		// the base, in row 2(y=2)
		newProjectileNumber = numProjectiles++;
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	9c 0f       	add	r25, r28
     8c2:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <numProjectiles>
		projectiles[newProjectileNumber] = GAME_POSITION(basePosition, 2);
     8c6:	ec 2f       	mov	r30, r28
     8c8:	f0 e0       	ldi	r31, 0x00	; 0
     8ca:	e1 51       	subi	r30, 0x11	; 17
     8cc:	fe 4f       	sbci	r31, 0xFE	; 254
     8ce:	90 e1       	ldi	r25, 0x10	; 16
     8d0:	89 02       	muls	r24, r25
     8d2:	90 01       	movw	r18, r0
     8d4:	11 24       	eor	r1, r1
     8d6:	22 60       	ori	r18, 0x02	; 2
     8d8:	20 83       	st	Z, r18
		asteroidLocation = asteroid_at(basePosition, 2);
     8da:	62 e0       	ldi	r22, 0x02	; 2
     8dc:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
		// Check if the projectile immediately hits an asteroid.
		if (asteroid_at(basePosition, 2) != -1) {
     8e0:	8f 3f       	cpi	r24, 0xFF	; 255
     8e2:	29 f0       	breq	.+10     	; 0x8ee <fire_projectile+0x86>
			handle_collision(asteroidLocation, newProjectileNumber);
     8e4:	6c 2f       	mov	r22, r28
     8e6:	0e 94 27 03 	call	0x64e	; 0x64e <handle_collision>
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		}
		return 1;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	09 c0       	rjmp	.+18     	; 0x900 <__stack+0x1>
		asteroidLocation = asteroid_at(basePosition, 2);
		// Check if the projectile immediately hits an asteroid.
		if (asteroid_at(basePosition, 2) != -1) {
			handle_collision(asteroidLocation, newProjectileNumber);
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
     8ee:	6f e0       	ldi	r22, 0x0F	; 15
     8f0:	8c 2f       	mov	r24, r28
     8f2:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
		}
		return 1;
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	03 c0       	rjmp	.+6      	; 0x900 <__stack+0x1>
	} else {
		return 0;
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	01 c0       	rjmp	.+2      	; 0x900 <__stack+0x1>
     8fe:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <advance_projectiles>:
}


// Move projectiles up by one position, and remove those that 
// have gone off the top or that hit an asteroid.
void advance_projectiles(void) {
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	1f 93       	push	r17
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
	uint8_t x, y;
	int8_t projectileNumber;
	int8_t asteroid_location;

	projectileNumber = 0;
     90e:	10 e0       	ldi	r17, 0x00	; 0
	while(projectileNumber < numProjectiles) {
     910:	31 c0       	rjmp	.+98     	; 0x974 <advance_projectiles+0x70>
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     912:	e1 2e       	mov	r14, r17
     914:	01 2e       	mov	r0, r17
     916:	00 0c       	add	r0, r0
     918:	ff 08       	sbc	r15, r15
     91a:	f7 01       	movw	r30, r14
     91c:	e1 51       	subi	r30, 0x11	; 17
     91e:	fe 4f       	sbci	r31, 0xFE	; 254
     920:	80 81       	ld	r24, Z
		y = GET_Y_POSITION(projectiles[projectileNumber]);
     922:	c8 2f       	mov	r28, r24
     924:	cf 70       	andi	r28, 0x0F	; 15
		
		// Work out the new position (but don't update the projectile 
		// location yet - we only do that if we know the move is valid)
		y = y+1;
     926:	cf 5f       	subi	r28, 0xFF	; 255
		
		// Check if new position would be off the top of the display
		if(y == FIELD_HEIGHT) {
     928:	c0 31       	cpi	r28, 0x10	; 16
     92a:	21 f4       	brne	.+8      	; 0x934 <advance_projectiles+0x30>
			// Yes - remove the projectile. (Note that we haven't updated
			// the position of the projectile itself - so the projectile 
			// will be removed from its old location.)
			remove_projectile(projectileNumber);
     92c:	81 2f       	mov	r24, r17
     92e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <remove_projectile>
     932:	20 c0       	rjmp	.+64     	; 0x974 <advance_projectiles+0x70>
	int8_t asteroid_location;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     934:	d8 2f       	mov	r29, r24
     936:	d2 95       	swap	r29
     938:	df 70       	andi	r29, 0x0F	; 15
		} else {
			// Projectile is not going off the top of the display
			// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
			// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
			// AND THE ASTEROID.
			asteroid_location = asteroid_at(x, y);
     93a:	6c 2f       	mov	r22, r28
     93c:	8d 2f       	mov	r24, r29
     93e:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
			if (asteroid_location != -1) {
     942:	8f 3f       	cpi	r24, 0xFF	; 255
     944:	21 f0       	breq	.+8      	; 0x94e <advance_projectiles+0x4a>
				handle_collision(asteroid_location, projectileNumber);
     946:	61 2f       	mov	r22, r17
     948:	0e 94 27 03 	call	0x64e	; 0x64e <handle_collision>
     94c:	13 c0       	rjmp	.+38     	; 0x974 <advance_projectiles+0x70>
			} else {	
				// Remove the projectile from the display 
				redraw_projectile(projectileNumber, COLOUR_BLACK);
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	81 2f       	mov	r24, r17
     952:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
			
				// Update the projectile's position
				projectiles[projectileNumber] = GAME_POSITION(x,y);
     956:	f7 01       	movw	r30, r14
     958:	e1 51       	subi	r30, 0x11	; 17
     95a:	fe 4f       	sbci	r31, 0xFE	; 254
     95c:	20 e1       	ldi	r18, 0x10	; 16
     95e:	d2 9f       	mul	r29, r18
     960:	c0 01       	movw	r24, r0
     962:	11 24       	eor	r1, r1
     964:	cf 70       	andi	r28, 0x0F	; 15
     966:	c8 2b       	or	r28, r24
     968:	c0 83       	st	Z, r28
			
				// Redraw the projectile
				redraw_projectile(projectileNumber, COLOUR_PROJECTILE);
     96a:	6f e0       	ldi	r22, 0x0F	; 15
     96c:	81 2f       	mov	r24, r17
     96e:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
			
				// Move on to the next projectile (we don't do this if a projectile
				// is removed since projectiles will be shuffled in the list and the
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
     972:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t x, y;
	int8_t projectileNumber;
	int8_t asteroid_location;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
     974:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <numProjectiles>
     978:	18 17       	cp	r17, r24
     97a:	5c f2       	brlt	.-106    	; 0x912 <advance_projectiles+0xe>
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
			}
		}			
	}
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	ff 90       	pop	r15
     984:	ef 90       	pop	r14
     986:	08 95       	ret

00000988 <is_game_over>:


// Returns 1 if the game is over, 0 otherwise.
int8_t is_game_over(void) {
	return (get_lives() == 0);
     988:	0e 94 36 07 	call	0xe6c	; 0xe6c <get_lives>
     98c:	21 e0       	ldi	r18, 0x01	; 1
     98e:	67 2b       	or	r22, r23
     990:	68 2b       	or	r22, r24
     992:	69 2b       	or	r22, r25
     994:	09 f0       	breq	.+2      	; 0x998 <is_game_over+0x10>
     996:	20 e0       	ldi	r18, 0x00	; 0
}
     998:	82 2f       	mov	r24, r18
     99a:	08 95       	ret

0000099c <subtract_life>:


/******** INTERNAL FUNCTIONS ****************/

// Change the state of game over
void subtract_life() {
     99c:	bf 92       	push	r11
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
	if (get_lives() != 0) {
     9ae:	0e 94 36 07 	call	0xe6c	; 0xe6c <get_lives>
     9b2:	67 2b       	or	r22, r23
     9b4:	68 2b       	or	r22, r24
     9b6:	69 2b       	or	r22, r25
     9b8:	21 f0       	breq	.+8      	; 0x9c2 <subtract_life+0x26>
		add_to_lives(-1);
     9ba:	8f ef       	ldi	r24, 0xFF	; 255
     9bc:	9f ef       	ldi	r25, 0xFF	; 255
     9be:	0e 94 1d 07 	call	0xe3a	; 0xe3a <add_to_lives>
	}
	// Reset the last seven bits.
	PORTC &= 1;
     9c2:	88 b1       	in	r24, 0x08	; 8
     9c4:	81 70       	andi	r24, 0x01	; 1
     9c6:	88 b9       	out	0x08, r24	; 8
	// Does the lights in the right order.
	for (int8_t i = 1; i < get_lives() + 1; i++) {
     9c8:	bb 24       	eor	r11, r11
     9ca:	b3 94       	inc	r11
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (7 - i));
     9cc:	07 e0       	ldi	r16, 0x07	; 7
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	c1 e0       	ldi	r28, 0x01	; 1
     9d2:	d0 e0       	ldi	r29, 0x00	; 0
		add_to_lives(-1);
	}
	// Reset the last seven bits.
	PORTC &= 1;
	// Does the lights in the right order.
	for (int8_t i = 1; i < get_lives() + 1; i++) {
     9d4:	10 c0       	rjmp	.+32     	; 0x9f6 <subtract_life+0x5a>
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (7 - i));
     9d6:	28 b1       	in	r18, 0x08	; 8
     9d8:	c8 01       	movw	r24, r16
     9da:	8b 19       	sub	r24, r11
     9dc:	91 09       	sbc	r25, r1
     9de:	b7 fc       	sbrc	r11, 7
     9e0:	93 95       	inc	r25
     9e2:	ae 01       	movw	r20, r28
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <subtract_life+0x4e>
     9e6:	44 0f       	add	r20, r20
     9e8:	55 1f       	adc	r21, r21
     9ea:	8a 95       	dec	r24
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <subtract_life+0x4a>
     9ee:	ca 01       	movw	r24, r20
     9f0:	82 2b       	or	r24, r18
     9f2:	88 b9       	out	0x08, r24	; 8
     9f4:	b3 94       	inc	r11
		add_to_lives(-1);
	}
	// Reset the last seven bits.
	PORTC &= 1;
	// Does the lights in the right order.
	for (int8_t i = 1; i < get_lives() + 1; i++) {
     9f6:	0e 94 36 07 	call	0xe6c	; 0xe6c <get_lives>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	a1 1d       	adc	r26, r1
     a02:	b1 1d       	adc	r27, r1
     a04:	cb 2c       	mov	r12, r11
     a06:	0b 2c       	mov	r0, r11
     a08:	00 0c       	add	r0, r0
     a0a:	dd 08       	sbc	r13, r13
     a0c:	ee 08       	sbc	r14, r14
     a0e:	ff 08       	sbc	r15, r15
     a10:	c8 16       	cp	r12, r24
     a12:	d9 06       	cpc	r13, r25
     a14:	ea 06       	cpc	r14, r26
     a16:	fb 06       	cpc	r15, r27
     a18:	f0 f2       	brcs	.-68     	; 0x9d6 <subtract_life+0x3a>
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (7 - i));
	}
	move_cursor(2, 6);
     a1a:	66 e0       	ldi	r22, 0x06	; 6
     a1c:	70 e0       	ldi	r23, 0x00	; 0
     a1e:	82 e0       	ldi	r24, 0x02	; 2
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <move_cursor>
	printf_P(PSTR("You have %lu lives remaining."), get_lives());
     a26:	0e 94 36 07 	call	0xe6c	; 0xe6c <get_lives>
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	7f 93       	push	r23
     a30:	6f 93       	push	r22
     a32:	8c e7       	ldi	r24, 0x7C	; 124
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	9f 93       	push	r25
     a38:	8f 93       	push	r24
     a3a:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
}
     a3e:	0f 90       	pop	r0
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	df 90       	pop	r13
     a58:	cf 90       	pop	r12
     a5a:	bf 90       	pop	r11
     a5c:	08 95       	ret

00000a5e <move_base>:
// The direction argument has the value MOVE_LEFT or
// MOVE_RIGHT. The move succeeds if the base isn't all 
// the way to one side, e.g., not permitted to move
// left if basePosition is already 0.
// Returns 1 if move successful, 0 otherwise.
int8_t move_base(int8_t direction) {	
     a5e:	cf 93       	push	r28
     a60:	c8 2f       	mov	r28, r24
	// (and eventually wrap around - e.g. subtracting 1 from
	// basePosition 256 times will eventually bring it back to
	// same value.
	
	// We erase the base from its current position first
	redraw_base(COLOUR_BLACK);
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
	
	if (direction == MOVE_LEFT && basePosition != 0) {
     a68:	c1 11       	cpse	r28, r1
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <move_base+0x1e>
     a6c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <basePosition>
     a70:	88 23       	and	r24, r24
     a72:	71 f0       	breq	.+28     	; 0xa90 <move_base+0x32>
		// Check if the user wants to move left
		// Check bounds -> move left.
		basePosition--;
     a74:	81 50       	subi	r24, 0x01	; 1
     a76:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <basePosition>
     a7a:	0f c0       	rjmp	.+30     	; 0xa9a <move_base+0x3c>
	} else if (direction == MOVE_RIGHT && basePosition != 7){
     a7c:	c1 30       	cpi	r28, 0x01	; 1
     a7e:	41 f4       	brne	.+16     	; 0xa90 <move_base+0x32>
     a80:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <basePosition>
     a84:	87 30       	cpi	r24, 0x07	; 7
     a86:	21 f0       	breq	.+8      	; 0xa90 <move_base+0x32>
		// Assume right press, check bounds -> move right.
		basePosition++;
     a88:	8f 5f       	subi	r24, 0xFF	; 255
     a8a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <basePosition>
     a8e:	05 c0       	rjmp	.+10     	; 0xa9a <move_base+0x3c>
	} else {
		redraw_base(COLOUR_BASE);
     a90:	8f ed       	ldi	r24, 0xDF	; 223
     a92:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
		return 0;
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	34 c0       	rjmp	.+104    	; 0xb02 <move_base+0xa4>
	}
	
	
	// Check if the base is being moved into an asteroid. 
	// We don't need to check the middle as it is impossible to reach.
	if (asteroid_at(basePosition, 1) != -1 ||  asteroid_at(basePosition - 1, 0) != -1 
     a9a:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <basePosition>
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	8c 2f       	mov	r24, r28
     aa2:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     aa6:	8f 3f       	cpi	r24, 0xFF	; 255
     aa8:	69 f4       	brne	.+26     	; 0xac4 <move_base+0x66>
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	8c 0f       	add	r24, r28
     aae:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     ab2:	8f 3f       	cpi	r24, 0xFF	; 255
     ab4:	39 f4       	brne	.+14     	; 0xac4 <move_base+0x66>
	|| asteroid_at(basePosition + 1, 0) != -1) {
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	8c 0f       	add	r24, r28
     abc:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     ac0:	8f 3f       	cpi	r24, 0xFF	; 255
     ac2:	d9 f0       	breq	.+54     	; 0xafa <move_base+0x9c>
		subtract_life();
     ac4:	0e 94 ce 04 	call	0x99c	; 0x99c <subtract_life>
		remove_asteroid(asteroid_at(basePosition, 1));
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <basePosition>
     ace:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     ad2:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		remove_asteroid(asteroid_at(basePosition - 1, 0));
     ad6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <basePosition>
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	81 50       	subi	r24, 0x01	; 1
     ade:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     ae2:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		remove_asteroid(asteroid_at(basePosition + 1, 0));
     ae6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <basePosition>
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     af2:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		redraw_hit_base();
     af6:	0e 94 97 02 	call	0x52e	; 0x52e <redraw_hit_base>
	}
	
	// Redraw the base
	redraw_base(COLOUR_BASE);
     afa:	8f ed       	ldi	r24, 0xDF	; 223
     afc:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
	
	return 1;
     b00:	81 e0       	ldi	r24, 0x01	; 1
}
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <advance_asteroids>:
}


// Move asteroids down by one position, and remove those that
// have gone off the bottom or that hit a projectile.
void advance_asteroids(void) {
     b06:	af 92       	push	r10
     b08:	bf 92       	push	r11
     b0a:	cf 92       	push	r12
     b0c:	df 92       	push	r13
     b0e:	ff 92       	push	r15
     b10:	1f 93       	push	r17
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
		uint8_t x, y;
		int8_t asteroidNumber;
		int8_t projectile_location;

		asteroidNumber = 0;
     b16:	d1 2c       	mov	r13, r1
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
		if(projectiles[i] == positionToCheck) {
     b18:	0f 2e       	mov	r0, r31
     b1a:	ff ee       	ldi	r31, 0xEF	; 239
     b1c:	af 2e       	mov	r10, r31
     b1e:	f1 e0       	ldi	r31, 0x01	; 1
     b20:	bf 2e       	mov	r11, r31
     b22:	f0 2d       	mov	r31, r0
		uint8_t x, y;
		int8_t asteroidNumber;
		int8_t projectile_location;

		asteroidNumber = 0;
		while(asteroidNumber < numAsteroids) {
     b24:	60 c0       	rjmp	.+192    	; 0xbe6 <advance_asteroids+0xe0>
			// Get the current position of the asteroid
			x = GET_X_POSITION(asteroids[asteroidNumber]);
     b26:	cd 2d       	mov	r28, r13
     b28:	0d 2c       	mov	r0, r13
     b2a:	00 0c       	add	r0, r0
     b2c:	dd 0b       	sbc	r29, r29
     b2e:	fe 01       	movw	r30, r28
     b30:	ec 50       	subi	r30, 0x0C	; 12
     b32:	fe 4f       	sbci	r31, 0xFE	; 254
     b34:	80 81       	ld	r24, Z
     b36:	f8 2e       	mov	r15, r24
     b38:	f6 94       	lsr	r15
     b3a:	f6 94       	lsr	r15
     b3c:	f6 94       	lsr	r15
     b3e:	f6 94       	lsr	r15
			y = GET_Y_POSITION(asteroids[asteroidNumber]);
     b40:	18 2f       	mov	r17, r24
     b42:	1f 70       	andi	r17, 0x0F	; 15
			
			// Work out the new position (but don't update the asteroid
			// location yet - we only do that if we know the move is valid)
			y = y - 1;
     b44:	cc 24       	eor	r12, r12
     b46:	ca 94       	dec	r12
     b48:	c1 0e       	add	r12, r17
			if (asteroid_at(x, y) != -1) {
     b4a:	6c 2d       	mov	r22, r12
     b4c:	8f 2d       	mov	r24, r15
     b4e:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     b52:	8f 3f       	cpi	r24, 0xFF	; 255
     b54:	09 f4       	brne	.+2      	; 0xb58 <advance_asteroids+0x52>
			x = GET_X_POSITION(asteroids[asteroidNumber]);
			y = GET_Y_POSITION(asteroids[asteroidNumber]);
			
			// Work out the new position (but don't update the asteroid
			// location yet - we only do that if we know the move is valid)
			y = y - 1;
     b56:	1c 2d       	mov	r17, r12
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     b58:	ef 2d       	mov	r30, r15
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	cf 01       	movw	r24, r30
     b5e:	82 95       	swap	r24
     b60:	92 95       	swap	r25
     b62:	90 7f       	andi	r25, 0xF0	; 240
     b64:	98 27       	eor	r25, r24
     b66:	80 7f       	andi	r24, 0xF0	; 240
     b68:	98 27       	eor	r25, r24
     b6a:	91 2f       	mov	r25, r17
     b6c:	9f 70       	andi	r25, 0x0F	; 15
     b6e:	f9 2e       	mov	r15, r25
     b70:	f8 2a       	or	r15, r24
	for(i=0; i < numProjectiles; i++) {
     b72:	40 91 f3 01 	lds	r20, 0x01F3	; 0x8001f3 <numProjectiles>
     b76:	04 2e       	mov	r0, r20
     b78:	00 0c       	add	r0, r0
     b7a:	55 0b       	sbc	r21, r21
     b7c:	14 16       	cp	r1, r20
     b7e:	15 06       	cpc	r1, r21
     b80:	dc f4       	brge	.+54     	; 0xbb8 <advance_asteroids+0xb2>
		if(projectiles[i] == positionToCheck) {
     b82:	d5 01       	movw	r26, r10
     b84:	8c 91       	ld	r24, X
     b86:	8f 15       	cp	r24, r15
     b88:	91 f0       	breq	.+36     	; 0xbae <advance_asteroids+0xa8>
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <advance_asteroids+0x9a>
     b8e:	d9 01       	movw	r26, r18
     b90:	a1 51       	subi	r26, 0x11	; 17
     b92:	be 4f       	sbci	r27, 0xFE	; 254
     b94:	9c 91       	ld	r25, X
     b96:	f9 12       	cpse	r15, r25
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <advance_asteroids+0x9a>
				// Asteroid is not going off the bottom of the display
				// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
				// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
				// AND THE ASTEROID.
				projectile_location = projectile_at(x, y);
				if (projectile_location != -1) {
     b9a:	6f 3f       	cpi	r22, 0xFF	; 255
     b9c:	49 f4       	brne	.+18     	; 0xbb0 <advance_asteroids+0xaa>
     b9e:	0c c0       	rjmp	.+24     	; 0xbb8 <advance_asteroids+0xb2>
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     ba0:	6f 5f       	subi	r22, 0xFF	; 255
     ba2:	26 2f       	mov	r18, r22
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	24 17       	cp	r18, r20
     ba8:	35 07       	cpc	r19, r21
     baa:	8c f3       	brlt	.-30     	; 0xb8e <advance_asteroids+0x88>
     bac:	05 c0       	rjmp	.+10     	; 0xbb8 <advance_asteroids+0xb2>
		if(projectiles[i] == positionToCheck) {
			// Projectile i is at the given position
			return i;
     bae:	60 e0       	ldi	r22, 0x00	; 0
				// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
				// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
				// AND THE ASTEROID.
				projectile_location = projectile_at(x, y);
				if (projectile_location != -1) {
					handle_collision(asteroidNumber, projectile_location);
     bb0:	8d 2d       	mov	r24, r13
     bb2:	0e 94 27 03 	call	0x64e	; 0x64e <handle_collision>
     bb6:	17 c0       	rjmp	.+46     	; 0xbe6 <advance_asteroids+0xe0>
}


// Check whether the base is at a given location.
static int8_t base_at(uint8_t x, uint8_t y) {
	if (y > 1) {
     bb8:	12 30       	cpi	r17, 0x02	; 2
     bba:	18 f5       	brcc	.+70     	; 0xc02 <advance_asteroids+0xfc>
		// This is too high for the base.
		return 0;
	}
	
	if (x == basePosition) {
     bbc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <basePosition>
     bc0:	08 2e       	mov	r0, r24
     bc2:	00 0c       	add	r0, r0
     bc4:	99 0b       	sbc	r25, r25
     bc6:	e8 17       	cp	r30, r24
     bc8:	f9 07       	cpc	r31, r25
     bca:	99 f0       	breq	.+38     	; 0xbf2 <advance_asteroids+0xec>
		// This can occur for both y = 1 and y = 0.
		return 1;
	} else if (y == 0) {
     bcc:	11 11       	cpse	r17, r1
     bce:	19 c0       	rjmp	.+50     	; 0xc02 <advance_asteroids+0xfc>
		// Check the sides of the base.
		if (x == basePosition -1 || x == basePosition + 1) {
     bd0:	9c 01       	movw	r18, r24
     bd2:	21 50       	subi	r18, 0x01	; 1
     bd4:	31 09       	sbc	r19, r1
     bd6:	e2 17       	cp	r30, r18
     bd8:	f3 07       	cpc	r31, r19
     bda:	59 f0       	breq	.+22     	; 0xbf2 <advance_asteroids+0xec>
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	e8 17       	cp	r30, r24
     be0:	f9 07       	cpc	r31, r25
     be2:	79 f4       	brne	.+30     	; 0xc02 <advance_asteroids+0xfc>
     be4:	06 c0       	rjmp	.+12     	; 0xbf2 <advance_asteroids+0xec>
		uint8_t x, y;
		int8_t asteroidNumber;
		int8_t projectile_location;

		asteroidNumber = 0;
		while(asteroidNumber < numAsteroids) {
     be6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <numAsteroids>
     bea:	d8 16       	cp	r13, r24
     bec:	0c f4       	brge	.+2      	; 0xbf0 <advance_asteroids+0xea>
     bee:	9b cf       	rjmp	.-202    	; 0xb26 <advance_asteroids+0x20>
     bf0:	15 c0       	rjmp	.+42     	; 0xc1c <advance_asteroids+0x116>
				projectile_location = projectile_at(x, y);
				if (projectile_location != -1) {
					handle_collision(asteroidNumber, projectile_location);
				} else if (base_at(x, y)) {
					// If the asteroid collides with the base, handle the event.
					subtract_life();
     bf2:	0e 94 ce 04 	call	0x99c	; 0x99c <subtract_life>
					remove_asteroid(asteroidNumber);
     bf6:	8d 2d       	mov	r24, r13
     bf8:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
					redraw_hit_base();
     bfc:	0e 94 97 02 	call	0x52e	; 0x52e <redraw_hit_base>
     c00:	f2 cf       	rjmp	.-28     	; 0xbe6 <advance_asteroids+0xe0>
				} else {
					// Remove the asteroid from the display
					redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	8d 2d       	mov	r24, r13
     c06:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
					
					// Update the asteroid's position
					asteroids[asteroidNumber] = GAME_POSITION(x,y);
     c0a:	cc 50       	subi	r28, 0x0C	; 12
     c0c:	de 4f       	sbci	r29, 0xFE	; 254
     c0e:	f8 82       	st	Y, r15
					
					// Redraw the asteroid
					redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     c10:	60 ef       	ldi	r22, 0xF0	; 240
     c12:	8d 2d       	mov	r24, r13
     c14:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
					
					// Move on to the next asteroid
					asteroidNumber++;
     c18:	d3 94       	inc	r13
     c1a:	e5 cf       	rjmp	.-54     	; 0xbe6 <advance_asteroids+0xe0>
				}
			}
		}
}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	ff 90       	pop	r15
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	bf 90       	pop	r11
     c2a:	af 90       	pop	r10
     c2c:	08 95       	ret

00000c2e <game_over_animation>:
	// Update projectile count - have one fewer projectiles now.
	numProjectiles--;
}


uint8_t game_over_animation(uint32_t current_time, uint8_t animation_number) {
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	cf 93       	push	r28
     c38:	6b 01       	movw	r12, r22
     c3a:	7c 01       	movw	r14, r24
     c3c:	c4 2f       	mov	r28, r20
	static uint32_t previous_time;
	if (current_time > previous_time + 100 && animation_number == 1) {
     c3e:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <previous_time.2416>
     c42:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <previous_time.2416+0x1>
     c46:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <previous_time.2416+0x2>
     c4a:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <previous_time.2416+0x3>
     c4e:	8c 59       	subi	r24, 0x9C	; 156
     c50:	9f 4f       	sbci	r25, 0xFF	; 255
     c52:	af 4f       	sbci	r26, 0xFF	; 255
     c54:	bf 4f       	sbci	r27, 0xFF	; 255
     c56:	8c 15       	cp	r24, r12
     c58:	9d 05       	cpc	r25, r13
     c5a:	ae 05       	cpc	r26, r14
     c5c:	bf 05       	cpc	r27, r15
     c5e:	78 f4       	brcc	.+30     	; 0xc7e <game_over_animation+0x50>
     c60:	41 30       	cpi	r20, 0x01	; 1
     c62:	09 f0       	breq	.+2      	; 0xc66 <game_over_animation+0x38>
     c64:	5d c0       	rjmp	.+186    	; 0xd20 <game_over_animation+0xf2>
		ledmatrix_shift_display_right();
     c66:	0e 94 fe 06 	call	0xdfc	; 0xdfc <ledmatrix_shift_display_right>
		previous_time = current_time;
     c6a:	c0 92 de 01 	sts	0x01DE, r12	; 0x8001de <previous_time.2416>
     c6e:	d0 92 df 01 	sts	0x01DF, r13	; 0x8001df <previous_time.2416+0x1>
     c72:	e0 92 e0 01 	sts	0x01E0, r14	; 0x8001e0 <previous_time.2416+0x2>
     c76:	f0 92 e1 01 	sts	0x01E1, r15	; 0x8001e1 <previous_time.2416+0x3>
		return 1;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	72 c0       	rjmp	.+228    	; 0xd62 <game_over_animation+0x134>
	} else if (animation_number == 2) {
     c7e:	42 30       	cpi	r20, 0x02	; 2
     c80:	09 f0       	breq	.+2      	; 0xc84 <game_over_animation+0x56>
     c82:	52 c0       	rjmp	.+164    	; 0xd28 <game_over_animation+0xfa>
		set_scrolling_display_text("GAME OVER NERD", COLOUR_GREEN);
     c84:	60 ef       	ldi	r22, 0xF0	; 240
     c86:	8b e2       	ldi	r24, 0x2B	; 43
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 4e 0a 	call	0x149c	; 0x149c <set_scrolling_display_text>
		return 1;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	68 c0       	rjmp	.+208    	; 0xd62 <game_over_animation+0x134>
	} else if (current_time > previous_time + 100 && scroll_display() 
     c92:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <scroll_display>
     c96:	88 23       	and	r24, r24
     c98:	69 f0       	breq	.+26     	; 0xcb4 <game_over_animation+0x86>
	&& animation_number == 3) {
     c9a:	c3 30       	cpi	r28, 0x03	; 3
     c9c:	09 f0       	breq	.+2      	; 0xca0 <game_over_animation+0x72>
     c9e:	4f c0       	rjmp	.+158    	; 0xd3e <game_over_animation+0x110>
		previous_time = current_time;
     ca0:	c0 92 de 01 	sts	0x01DE, r12	; 0x8001de <previous_time.2416>
     ca4:	d0 92 df 01 	sts	0x01DF, r13	; 0x8001df <previous_time.2416+0x1>
     ca8:	e0 92 e0 01 	sts	0x01E0, r14	; 0x8001e0 <previous_time.2416+0x2>
     cac:	f0 92 e1 01 	sts	0x01E1, r15	; 0x8001e1 <previous_time.2416+0x3>
		return 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	57 c0       	rjmp	.+174    	; 0xd62 <game_over_animation+0x134>
	} else if (current_time > previous_time + 100 && animation_number == 3) {
     cb4:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <previous_time.2416>
     cb8:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <previous_time.2416+0x1>
     cbc:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <previous_time.2416+0x2>
     cc0:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <previous_time.2416+0x3>
     cc4:	8c 59       	subi	r24, 0x9C	; 156
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	af 4f       	sbci	r26, 0xFF	; 255
     cca:	bf 4f       	sbci	r27, 0xFF	; 255
     ccc:	8c 15       	cp	r24, r12
     cce:	9d 05       	cpc	r25, r13
     cd0:	ae 05       	cpc	r26, r14
     cd2:	bf 05       	cpc	r27, r15
     cd4:	68 f5       	brcc	.+90     	; 0xd30 <game_over_animation+0x102>
     cd6:	c3 30       	cpi	r28, 0x03	; 3
     cd8:	79 f5       	brne	.+94     	; 0xd38 <game_over_animation+0x10a>
		previous_time = current_time;
     cda:	c0 92 de 01 	sts	0x01DE, r12	; 0x8001de <previous_time.2416>
     cde:	d0 92 df 01 	sts	0x01DF, r13	; 0x8001df <previous_time.2416+0x1>
     ce2:	e0 92 e0 01 	sts	0x01E0, r14	; 0x8001e0 <previous_time.2416+0x2>
     ce6:	f0 92 e1 01 	sts	0x01E1, r15	; 0x8001e1 <previous_time.2416+0x3>
		return 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	3a c0       	rjmp	.+116    	; 0xd62 <game_over_animation+0x134>
	} else if (animation_number == 4) {
		set_scrolling_display_text("GG", COLOUR_GREEN);
     cee:	60 ef       	ldi	r22, 0xF0	; 240
     cf0:	8a e3       	ldi	r24, 0x3A	; 58
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 4e 0a 	call	0x149c	; 0x149c <set_scrolling_display_text>
		return 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	33 c0       	rjmp	.+102    	; 0xd62 <game_over_animation+0x134>
	} else if (current_time > previous_time + 100 && scroll_display()
     cfc:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <scroll_display>
     d00:	88 23       	and	r24, r24
     d02:	79 f1       	breq	.+94     	; 0xd62 <game_over_animation+0x134>
	&& animation_number == 5) {
     d04:	c5 30       	cpi	r28, 0x05	; 5
     d06:	51 f4       	brne	.+20     	; 0xd1c <game_over_animation+0xee>
		previous_time = current_time;
     d08:	c0 92 de 01 	sts	0x01DE, r12	; 0x8001de <previous_time.2416>
     d0c:	d0 92 df 01 	sts	0x01DF, r13	; 0x8001df <previous_time.2416+0x1>
     d10:	e0 92 e0 01 	sts	0x01E0, r14	; 0x8001e0 <previous_time.2416+0x2>
     d14:	f0 92 e1 01 	sts	0x01E1, r15	; 0x8001e1 <previous_time.2416+0x3>
		return 1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	23 c0       	rjmp	.+70     	; 0xd62 <game_over_animation+0x134>
	}
	return 0;
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	21 c0       	rjmp	.+66     	; 0xd62 <game_over_animation+0x134>
	static uint32_t previous_time;
	if (current_time > previous_time + 100 && animation_number == 1) {
		ledmatrix_shift_display_right();
		previous_time = current_time;
		return 1;
	} else if (animation_number == 2) {
     d20:	42 30       	cpi	r20, 0x02	; 2
     d22:	09 f0       	breq	.+2      	; 0xd26 <game_over_animation+0xf8>
     d24:	b6 cf       	rjmp	.-148    	; 0xc92 <game_over_animation+0x64>
     d26:	ae cf       	rjmp	.-164    	; 0xc84 <game_over_animation+0x56>
		previous_time = current_time;
		return 1;
	} else if (current_time > previous_time + 100 && animation_number == 3) {
		previous_time = current_time;
		return 1;
	} else if (animation_number == 4) {
     d28:	44 30       	cpi	r20, 0x04	; 4
     d2a:	09 f3       	breq	.-62     	; 0xcee <game_over_animation+0xc0>
	} else if (current_time > previous_time + 100 && scroll_display()
	&& animation_number == 5) {
		previous_time = current_time;
		return 1;
	}
	return 0;
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	19 c0       	rjmp	.+50     	; 0xd62 <game_over_animation+0x134>
		previous_time = current_time;
		return 1;
	} else if (current_time > previous_time + 100 && animation_number == 3) {
		previous_time = current_time;
		return 1;
	} else if (animation_number == 4) {
     d30:	c4 30       	cpi	r28, 0x04	; 4
     d32:	e9 f2       	breq	.-70     	; 0xcee <game_over_animation+0xc0>
	} else if (current_time > previous_time + 100 && scroll_display()
	&& animation_number == 5) {
		previous_time = current_time;
		return 1;
	}
	return 0;
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	15 c0       	rjmp	.+42     	; 0xd62 <game_over_animation+0x134>
		previous_time = current_time;
		return 1;
	} else if (current_time > previous_time + 100 && animation_number == 3) {
		previous_time = current_time;
		return 1;
	} else if (animation_number == 4) {
     d38:	c4 30       	cpi	r28, 0x04	; 4
     d3a:	01 f7       	brne	.-64     	; 0xcfc <game_over_animation+0xce>
     d3c:	d8 cf       	rjmp	.-80     	; 0xcee <game_over_animation+0xc0>
		return 1;
	} else if (current_time > previous_time + 100 && scroll_display() 
	&& animation_number == 3) {
		previous_time = current_time;
		return 1;
	} else if (current_time > previous_time + 100 && animation_number == 3) {
     d3e:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <previous_time.2416>
     d42:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <previous_time.2416+0x1>
     d46:	a0 91 e0 01 	lds	r26, 0x01E0	; 0x8001e0 <previous_time.2416+0x2>
     d4a:	b0 91 e1 01 	lds	r27, 0x01E1	; 0x8001e1 <previous_time.2416+0x3>
     d4e:	8c 59       	subi	r24, 0x9C	; 156
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	af 4f       	sbci	r26, 0xFF	; 255
     d54:	bf 4f       	sbci	r27, 0xFF	; 255
     d56:	8c 15       	cp	r24, r12
     d58:	9d 05       	cpc	r25, r13
     d5a:	ae 05       	cpc	r26, r14
     d5c:	bf 05       	cpc	r27, r15
     d5e:	60 f3       	brcs	.-40     	; 0xd38 <game_over_animation+0x10a>
     d60:	e7 cf       	rjmp	.-50     	; 0xd30 <game_over_animation+0x102>
	&& animation_number == 5) {
		previous_time = current_time;
		return 1;
	}
	return 0;
}
     d62:	cf 91       	pop	r28
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	df 90       	pop	r13
     d6a:	cf 90       	pop	r12
     d6c:	08 95       	ret

00000d6e <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     d6e:	80 e8       	ldi	r24, 0x80	; 128
     d70:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <spi_setup_master>
     d74:	08 95       	ret

00000d76 <ledmatrix_update_pixel>:
     d76:	1f 93       	push	r17
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	80 31       	cpi	r24, 0x10	; 16
     d7e:	b0 f4       	brcc	.+44     	; 0xdac <ledmatrix_update_pixel+0x36>
     d80:	68 30       	cpi	r22, 0x08	; 8
     d82:	a0 f4       	brcc	.+40     	; 0xdac <ledmatrix_update_pixel+0x36>
     d84:	14 2f       	mov	r17, r20
     d86:	c6 2f       	mov	r28, r22
     d88:	d8 2f       	mov	r29, r24
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     d90:	6c 2f       	mov	r22, r28
     d92:	67 70       	andi	r22, 0x07	; 7
     d94:	80 e1       	ldi	r24, 0x10	; 16
     d96:	68 9f       	mul	r22, r24
     d98:	90 01       	movw	r18, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	8d 2f       	mov	r24, r29
     d9e:	8f 70       	andi	r24, 0x0F	; 15
     da0:	82 2b       	or	r24, r18
     da2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     da6:	81 2f       	mov	r24, r17
     da8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	08 95       	ret

00000db4 <ledmatrix_update_column>:
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	80 31       	cpi	r24, 0x10	; 16
     dbe:	90 f4       	brcc	.+36     	; 0xde4 <ledmatrix_update_column+0x30>
     dc0:	8b 01       	movw	r16, r22
     dc2:	c8 2f       	mov	r28, r24
     dc4:	83 e0       	ldi	r24, 0x03	; 3
     dc6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     dca:	8c 2f       	mov	r24, r28
     dcc:	8f 70       	andi	r24, 0x0F	; 15
     dce:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     dd2:	e8 01       	movw	r28, r16
     dd4:	08 5f       	subi	r16, 0xF8	; 248
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	89 91       	ld	r24, Y+
     dda:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     dde:	c0 17       	cp	r28, r16
     de0:	d1 07       	cpc	r29, r17
     de2:	d1 f7       	brne	.-12     	; 0xdd8 <ledmatrix_update_column+0x24>
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	08 95       	ret

00000dee <ledmatrix_shift_display_left>:
     dee:	84 e0       	ldi	r24, 0x04	; 4
     df0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     df4:	82 e0       	ldi	r24, 0x02	; 2
     df6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     dfa:	08 95       	ret

00000dfc <ledmatrix_shift_display_right>:
     dfc:	84 e0       	ldi	r24, 0x04	; 4
     dfe:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     e08:	08 95       	ret

00000e0a <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     e0a:	8f e0       	ldi	r24, 0x0F	; 15
     e0c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <spi_send_byte>
     e10:	08 95       	ret

00000e12 <init_lives>:
#include <avr/io.h>

uint32_t lives;

void init_lives(void) {
	PORTC &= 1;
     e12:	88 b1       	in	r24, 0x08	; 8
     e14:	81 70       	andi	r24, 0x01	; 1
     e16:	88 b9       	out	0x08, r24	; 8
	for (int8_t i = 0; i < 4; i++) {
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (4 + i));
     e18:	44 9a       	sbi	0x08, 4	; 8
     e1a:	45 9a       	sbi	0x08, 5	; 8
     e1c:	46 9a       	sbi	0x08, 6	; 8
     e1e:	47 9a       	sbi	0x08, 7	; 8
	}
	lives = 4;
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <lives>
     e2c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <lives+0x1>
     e30:	a0 93 0b 02 	sts	0x020B, r26	; 0x80020b <lives+0x2>
     e34:	b0 93 0c 02 	sts	0x020C, r27	; 0x80020c <lives+0x3>
     e38:	08 95       	ret

00000e3a <add_to_lives>:
}

void add_to_lives(int16_t value) {
	lives += value;
     e3a:	09 2e       	mov	r0, r25
     e3c:	00 0c       	add	r0, r0
     e3e:	aa 0b       	sbc	r26, r26
     e40:	bb 0b       	sbc	r27, r27
     e42:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <lives>
     e46:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <lives+0x1>
     e4a:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <lives+0x2>
     e4e:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <lives+0x3>
     e52:	84 0f       	add	r24, r20
     e54:	95 1f       	adc	r25, r21
     e56:	a6 1f       	adc	r26, r22
     e58:	b7 1f       	adc	r27, r23
     e5a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <lives>
     e5e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <lives+0x1>
     e62:	a0 93 0b 02 	sts	0x020B, r26	; 0x80020b <lives+0x2>
     e66:	b0 93 0c 02 	sts	0x020C, r27	; 0x80020c <lives+0x3>
     e6a:	08 95       	ret

00000e6c <get_lives>:
}

uint32_t get_lives(void) {
	return lives;
     e6c:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <lives>
     e70:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <lives+0x1>
     e74:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <lives+0x2>
     e78:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <lives+0x3>
}
     e7c:	08 95       	ret

00000e7e <kill_sound>:
	return (dutycycle * clockperiod) / 100;
}

// Turn the sound off
void kill_sound() {
	TCCR1A = 0;
     e7e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;
     e82:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e86:	08 95       	ret

00000e88 <init_sound>:
}

void init_sound() {
	// Make pin OC1B be an output
	if ((PIND & (1<<2)) >> 2) {
     e88:	4a 9b       	sbis	0x09, 2	; 9
     e8a:	07 c0       	rjmp	.+14     	; 0xe9a <init_sound+0x12>
		DDRD |= (1 << 4);
     e8c:	54 9a       	sbi	0x0a, 4	; 10
	
		// Set up timer/counter 1 for Fast PWM, counting from 0 to the value in OCR1A
		// before reseting to 0. Count at 1MHz (CLK/8).
		// Configure output OC1B to be clear on compare match and set on timer/counter
		// overflow (non-inverting mode).
		TCCR1A = (1 << COM1B1) |(0 << COM1B0) | (1 << WGM11) | (1 << WGM10);
     e8e:	83 e2       	ldi	r24, 0x23	; 35
     e90:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10);
     e94:	8a e1       	ldi	r24, 0x1A	; 26
     e96:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e9a:	08 95       	ret

00000e9c <set_sound>:
	}
}

void set_sound(uint16_t freq, float dutycycle) {
     e9c:	8f 92       	push	r8
     e9e:	9f 92       	push	r9
     ea0:	af 92       	push	r10
     ea2:	bf 92       	push	r11
     ea4:	cf 92       	push	r12
     ea6:	df 92       	push	r13
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	4a 01       	movw	r8, r20
     eae:	5b 01       	movw	r10, r22

uint16_t	notes[7] = {261, 294, 329, 349, 392, 440, 494};
// For a given frequency (Hz), return the clock period (in terms of the
// number of clock cycles of a 1MHz clock)
static uint16_t freq_to_clock_period(uint16_t freq) {
	return (1000000UL / freq);	// UL makes the constant an unsigned long (32 bits)
     eb0:	9c 01       	movw	r18, r24
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	60 e4       	ldi	r22, 0x40	; 64
     eb8:	72 e4       	ldi	r23, 0x42	; 66
     eba:	8f e0       	ldi	r24, 0x0F	; 15
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__udivmodsi4>
     ec2:	69 01       	movw	r12, r18
     ec4:	7a 01       	movw	r14, r20
}

// Return the width of a pulse (in clock cycles) given a duty cycle (%) and
// the period of the clock (measured in clock cycles)
static uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
	return (dutycycle * clockperiod) / 100;
     ec6:	b9 01       	movw	r22, r18
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <__floatunsisf>
     ed0:	a5 01       	movw	r20, r10
     ed2:	94 01       	movw	r18, r8
     ed4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <__mulsf3>
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	48 ec       	ldi	r20, 0xC8	; 200
     ede:	52 e4       	ldi	r21, 0x42	; 66
     ee0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__divsf3>
     ee4:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__fixunssfsi>
void set_sound(uint16_t freq, float dutycycle) {
	uint16_t clockperiod = freq_to_clock_period(freq);
	uint16_t pulsewidth = duty_cycle_to_pulse_width(dutycycle, clockperiod);

	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
     ee8:	21 e0       	ldi	r18, 0x01	; 1
     eea:	c2 1a       	sub	r12, r18
     eec:	d1 08       	sbc	r13, r1
     eee:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     ef2:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
     ef6:	61 15       	cp	r22, r1
     ef8:	71 05       	cpc	r23, r1
     efa:	29 f4       	brne	.+10     	; 0xf06 <set_sound+0x6a>
		OCR1B = 0;
     efc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     f00:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     f04:	06 c0       	rjmp	.+12     	; 0xf12 <set_sound+0x76>
	} else {
		OCR1B = pulsewidth - 1;
     f06:	61 50       	subi	r22, 0x01	; 1
     f08:	71 09       	sbc	r23, r1
     f0a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     f0e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	}
}
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	bf 90       	pop	r11
     f1c:	af 90       	pop	r10
     f1e:	9f 90       	pop	r9
     f20:	8f 90       	pop	r8
     f22:	08 95       	ret

00000f24 <random_sound>:

// Play a random sound
void random_sound() {
	set_sound(notes[random() % 7], 2);
     f24:	0e 94 2e 10 	call	0x205c	; 0x205c <random>
     f28:	27 e0       	ldi	r18, 0x07	; 7
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__divmodsi4>
     f34:	66 0f       	add	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	fb 01       	movw	r30, r22
     f3a:	ec 5f       	subi	r30, 0xFC	; 252
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e4       	ldi	r23, 0x40	; 64
     f46:	80 81       	ld	r24, Z
     f48:	91 81       	ldd	r25, Z+1	; 0x01
     f4a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <set_sound>
     f4e:	08 95       	ret

00000f50 <initialise_hardware>:
	// Turn on global interrupts
	sei();
}

void delay_ms(uint16_t count) {
	while(count--) {
     f50:	0e 94 b7 06 	call	0xd6e	; 0xd6e <ledmatrix_setup>
     f54:	0e 94 2e 01 	call	0x25c	; 0x25c <init_button_interrupts>
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	7b e4       	ldi	r23, 0x4B	; 75
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 85 0b 	call	0x170a	; 0x170a <init_serial_stdio>
     f66:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <init_timer0>
     f6a:	0e 94 6d 0c 	call	0x18da	; 0x18da <init_display>
     f6e:	78 94       	sei
     f70:	08 95       	ret

00000f72 <splash_screen>:
		_delay_ms(1);

	}
}

void splash_screen(void) {
     f72:	7f 92       	push	r7
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
	uint32_t current_time = get_current_time();
     f8c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <get_current_time>
     f90:	6b 01       	movw	r12, r22
     f92:	7c 01       	movw	r14, r24
		138, 155, 116, 20000, 123, 146, 164, 155, 146, 185, 207, 196, 185, 174, 185, 174, 123, 164, 146}; 
	static uint16_t	delays[30] = {165, 165, 83, 165, 333, 160, 500, 190, 120, 165, 
		333, 165, 500, 500, 165, 165, 83, 165, 333, 160, 333, 165, 333, 165, 83, 400, 333, 165, 800}; 
	uint8_t i = 0;
	// Clear terminal screen and output a message
	clear_terminal();
     f94:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <clear_terminal>
	move_cursor(10,10);
     f98:	6a e0       	ldi	r22, 0x0A	; 10
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	8a e0       	ldi	r24, 0x0A	; 10
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <move_cursor>
	printf_P(PSTR("Asteroids"));
     fa4:	88 e2       	ldi	r24, 0x28	; 40
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	9f 93       	push	r25
     faa:	8f 93       	push	r24
     fac:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
	move_cursor(10,12);
     fb0:	6c e0       	ldi	r22, 0x0C	; 12
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	8a e0       	ldi	r24, 0x0A	; 10
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Matthew Burton"));
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	9f 93       	push	r25
     fc2:	8f 93       	push	r24
     fc4:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     fc8:	0e 94 05 07 	call	0xe0a	; 0xe0a <ledmatrix_clear>
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
	// Enjoy this trash song.
	static uint16_t theme_song[30] = {123, 146, 164, 155, 146, 185, 174, 146, 164, 155, 
		138, 155, 116, 20000, 123, 146, 164, 155, 146, 185, 207, 196, 185, 174, 185, 174, 123, 164, 146}; 
	static uint16_t	delays[30] = {165, 165, 83, 165, 333, 160, 500, 190, 120, 165, 
		333, 165, 500, 500, 165, 165, 83, 165, 333, 160, 333, 165, 333, 165, 83, 400, 333, 165, 800}; 
	uint8_t i = 0;
     fd4:	71 2c       	mov	r7, r1
			current_time = get_current_time();
			// Every specified time interval, change the sound.
			if (current_time >= note_time + delays[i]) {
				init_sound();
				set_sound(theme_song[i] + 300, 0.5);
				i = (i + 1) % 30;
     fd6:	0e e1       	ldi	r16, 0x1E	; 30
     fd8:	10 e0       	ldi	r17, 0x00	; 0
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("ASTEROIDS MATTHEW BURTON S45293867", COLOUR_GREEN);
     fda:	60 ef       	ldi	r22, 0xF0	; 240
     fdc:	8d e3       	ldi	r24, 0x3D	; 61
     fde:	91 e0       	ldi	r25, 0x01	; 1
     fe0:	0e 94 4e 0a 	call	0x149c	; 0x149c <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		
		while(scroll_display()) {
     fe4:	40 c0       	rjmp	.+128    	; 0x1066 <splash_screen+0xf4>
			current_time = get_current_time();
     fe6:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <get_current_time>
     fea:	4b 01       	movw	r8, r22
     fec:	5c 01       	movw	r10, r24
			// Every specified time interval, change the sound.
			if (current_time >= note_time + delays[i]) {
     fee:	c7 2d       	mov	r28, r7
     ff0:	d0 e0       	ldi	r29, 0x00	; 0
     ff2:	fe 01       	movw	r30, r28
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	e4 56       	subi	r30, 0x64	; 100
     ffa:	fe 4f       	sbci	r31, 0xFE	; 254
     ffc:	80 81       	ld	r24, Z
     ffe:	91 81       	ldd	r25, Z+1	; 0x01
    1000:	a7 01       	movw	r20, r14
    1002:	96 01       	movw	r18, r12
    1004:	28 0f       	add	r18, r24
    1006:	39 1f       	adc	r19, r25
    1008:	41 1d       	adc	r20, r1
    100a:	51 1d       	adc	r21, r1
    100c:	82 16       	cp	r8, r18
    100e:	93 06       	cpc	r9, r19
    1010:	a4 06       	cpc	r10, r20
    1012:	b5 06       	cpc	r11, r21
    1014:	c8 f0       	brcs	.+50     	; 0x1048 <splash_screen+0xd6>
				init_sound();
    1016:	0e 94 44 07 	call	0xe88	; 0xe88 <init_sound>
				set_sound(theme_song[i] + 300, 0.5);
    101a:	fe 01       	movw	r30, r28
    101c:	ee 0f       	add	r30, r30
    101e:	ff 1f       	adc	r31, r31
    1020:	e0 5a       	subi	r30, 0xA0	; 160
    1022:	fe 4f       	sbci	r31, 0xFE	; 254
    1024:	80 81       	ld	r24, Z
    1026:	91 81       	ldd	r25, Z+1	; 0x01
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	7f e3       	ldi	r23, 0x3F	; 63
    1030:	84 5d       	subi	r24, 0xD4	; 212
    1032:	9e 4f       	sbci	r25, 0xFE	; 254
    1034:	0e 94 4e 07 	call	0xe9c	; 0xe9c <set_sound>
				i = (i + 1) % 30;
    1038:	ce 01       	movw	r24, r28
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	b8 01       	movw	r22, r16
    103e:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__divmodhi4>
    1042:	78 2e       	mov	r7, r24
				note_time = current_time;
    1044:	75 01       	movw	r14, r10
    1046:	64 01       	movw	r12, r8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1048:	3f ef       	ldi	r19, 0xFF	; 255
    104a:	40 e7       	ldi	r20, 0x70	; 112
    104c:	52 e0       	ldi	r21, 0x02	; 2
    104e:	31 50       	subi	r19, 0x01	; 1
    1050:	40 40       	sbci	r20, 0x00	; 0
    1052:	50 40       	sbci	r21, 0x00	; 0
    1054:	e1 f7       	brne	.-8      	; 0x104e <splash_screen+0xdc>
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <splash_screen+0xe6>
    1058:	00 00       	nop
			}
			_delay_ms(100);
			// Play the sound for 100ms then end it.
			kill_sound();
    105a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <kill_sound>
			if(button_pushed() != NO_BUTTON_PUSHED) {
    105e:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
    1062:	8f 3f       	cpi	r24, 0xFF	; 255
    1064:	29 f4       	brne	.+10     	; 0x1070 <splash_screen+0xfe>
	while(1) {
		set_scrolling_display_text("ASTEROIDS MATTHEW BURTON S45293867", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		
		while(scroll_display()) {
    1066:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <scroll_display>
    106a:	81 11       	cpse	r24, r1
    106c:	bc cf       	rjmp	.-136    	; 0xfe6 <splash_screen+0x74>
    106e:	b5 cf       	rjmp	.-150    	; 0xfda <splash_screen+0x68>
			if(button_pushed() != NO_BUTTON_PUSHED) {
				return;
			}
		}
	}
}
    1070:	df 91       	pop	r29
    1072:	cf 91       	pop	r28
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	cf 90       	pop	r12
    1080:	bf 90       	pop	r11
    1082:	af 90       	pop	r10
    1084:	9f 90       	pop	r9
    1086:	8f 90       	pop	r8
    1088:	7f 90       	pop	r7
    108a:	08 95       	ret

0000108c <new_game>:

void new_game(void) {
	// Initialise the game and display
	initialise_game();
    108c:	0e 94 99 03 	call	0x732	; 0x732 <initialise_game>
	
	// Clear the serial terminal
	clear_terminal();
    1090:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <clear_terminal>
	move_cursor(2,2);
    1094:	62 e0       	ldi	r22, 0x02	; 2
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <move_cursor>
	printf_P(PSTR("Asteroids"));
    10a0:	86 ef       	ldi	r24, 0xF6	; 246
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9f 93       	push	r25
    10a6:	8f 93       	push	r24
    10a8:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
	
	// Initialise the score
	init_score();
    10ac:	0e 94 27 0a 	call	0x144e	; 0x144e <init_score>
	move_cursor(2,4);
    10b0:	64 e0       	ldi	r22, 0x04	; 4
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <move_cursor>
	printf_P(PSTR("Score: %lu"), get_score());
    10bc:	0e 94 45 0a 	call	0x148a	; 0x148a <get_score>
    10c0:	9f 93       	push	r25
    10c2:	8f 93       	push	r24
    10c4:	7f 93       	push	r23
    10c6:	6f 93       	push	r22
    10c8:	8b ee       	ldi	r24, 0xEB	; 235
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	9f 93       	push	r25
    10ce:	8f 93       	push	r24
    10d0:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
	
	// Initialise lives.
	init_lives();
    10d4:	0e 94 09 07 	call	0xe12	; 0xe12 <init_lives>

	move_cursor(2, 6);
    10d8:	66 e0       	ldi	r22, 0x06	; 6
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <move_cursor>
	printf_P(PSTR("You have %lu lives remaining."), get_lives());
    10e4:	0e 94 36 07 	call	0xe6c	; 0xe6c <get_lives>
    10e8:	9f 93       	push	r25
    10ea:	8f 93       	push	r24
    10ec:	7f 93       	push	r23
    10ee:	6f 93       	push	r22
    10f0:	8d ec       	ldi	r24, 0xCD	; 205
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9f 93       	push	r25
    10f6:	8f 93       	push	r24
    10f8:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    10fc:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
	clear_serial_input_buffer();
    1100:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <clear_serial_input_buffer>
}
    1104:	8d b7       	in	r24, 0x3d	; 61
    1106:	9e b7       	in	r25, 0x3e	; 62
    1108:	0e 96       	adiw	r24, 0x0e	; 14
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	9e bf       	out	0x3e, r25	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	8d bf       	out	0x3d, r24	; 61
    1114:	08 95       	ret

00001116 <play_game>:

void play_game(void) {
    1116:	2f 92       	push	r2
    1118:	3f 92       	push	r3
    111a:	4f 92       	push	r4
    111c:	5f 92       	push	r5
    111e:	6f 92       	push	r6
    1120:	7f 92       	push	r7
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	00 d0       	rcall	.+0      	; 0x113c <play_game+0x26>
    113c:	00 d0       	rcall	.+0      	; 0x113e <play_game+0x28>
    113e:	1f 92       	push	r1
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
	uint8_t characters_into_escape_sequence = 0;
	uint8_t sound_duration_1 = 0;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
    1144:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <get_current_time>
    1148:	2b 01       	movw	r4, r22
    114a:	3c 01       	movw	r6, r24
	last_move_time = current_time;
	last_move_asteroid = current_time;
    114c:	4b 01       	movw	r8, r22
    114e:	5c 01       	movw	r10, r24
void play_game(void) {
	uint32_t current_time, last_move_time, last_move_asteroid;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	uint8_t sound_duration_1 = 0;
    1150:	10 e0       	ldi	r17, 0x00	; 0

void play_game(void) {
	uint32_t current_time, last_move_time, last_move_asteroid;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    1152:	19 82       	std	Y+1, r1	; 0x01
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    1154:	33 24       	eor	r3, r3
    1156:	3a 94       	dec	r3
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1158:	68 94       	set
    115a:	22 24       	eor	r2, r2
    115c:	21 f8       	bld	r2, 1
	current_time = get_current_time();
	last_move_time = current_time;
	last_move_asteroid = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    115e:	d1 c0       	rjmp	.+418    	; 0x1302 <play_game+0x1ec>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
    1160:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
    1164:	08 2f       	mov	r16, r24
		
		if(button == NO_BUTTON_PUSHED) {
    1166:	8f 3f       	cpi	r24, 0xFF	; 255
    1168:	09 f0       	breq	.+2      	; 0x116c <play_game+0x56>
    116a:	d6 c0       	rjmp	.+428    	; 0x1318 <play_game+0x202>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    116c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <serial_input_available>
    1170:	88 23       	and	r24, r24
    1172:	09 f4       	brne	.+2      	; 0x1176 <play_game+0x60>
    1174:	7b c0       	rjmp	.+246    	; 0x126c <play_game+0x156>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1176:	ed e2       	ldi	r30, 0x2D	; 45
    1178:	f3 e0       	ldi	r31, 0x03	; 3
    117a:	80 81       	ld	r24, Z
    117c:	91 81       	ldd	r25, Z+1	; 0x01
    117e:	0e 94 85 10 	call	0x210a	; 0x210a <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1182:	f9 81       	ldd	r31, Y+1	; 0x01
    1184:	f1 11       	cpse	r31, r1
    1186:	05 c0       	rjmp	.+10     	; 0x1192 <play_game+0x7c>
    1188:	8b 31       	cpi	r24, 0x1B	; 27
    118a:	09 f4       	brne	.+2      	; 0x118e <play_game+0x78>
    118c:	c0 c0       	rjmp	.+384    	; 0x130e <play_game+0x1f8>
    118e:	93 2d       	mov	r25, r3
    1190:	0d c0       	rjmp	.+26     	; 0x11ac <play_game+0x96>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1192:	29 81       	ldd	r18, Y+1	; 0x01
    1194:	21 30       	cpi	r18, 0x01	; 1
    1196:	29 f4       	brne	.+10     	; 0x11a2 <play_game+0x8c>
    1198:	8b 35       	cpi	r24, 0x5B	; 91
    119a:	09 f4       	brne	.+2      	; 0x119e <play_game+0x88>
    119c:	bb c0       	rjmp	.+374    	; 0x1314 <play_game+0x1fe>
    119e:	93 2d       	mov	r25, r3
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <play_game+0x96>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    11a2:	39 81       	ldd	r19, Y+1	; 0x01
    11a4:	32 30       	cpi	r19, 0x02	; 2
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <play_game+0x9c>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    11a8:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
    11aa:	83 2d       	mov	r24, r3
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
    11ac:	94 34       	cpi	r25, 0x44	; 68
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <play_game+0x9e>
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <play_game+0xac>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    11b2:	93 2d       	mov	r25, r3
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
    11b4:	28 2f       	mov	r18, r24
    11b6:	2f 7d       	andi	r18, 0xDF	; 223
    11b8:	2c 34       	cpi	r18, 0x4C	; 76
    11ba:	09 f0       	breq	.+2      	; 0x11be <play_game+0xa8>
    11bc:	b3 c0       	rjmp	.+358    	; 0x1324 <play_game+0x20e>
    11be:	19 82       	std	Y+1, r1	; 0x01
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <play_game+0xae>
    11c2:	19 82       	std	Y+1, r1	; 0x01
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			if(move_base(MOVE_LEFT)) {
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	0e 94 2f 05 	call	0xa5e	; 0xa5e <move_base>
    11ca:	88 23       	and	r24, r24
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <play_game+0xba>
    11ce:	4e c0       	rjmp	.+156    	; 0x126c <play_game+0x156>
				init_sound();
    11d0:	0e 94 44 07 	call	0xe88	; 0xe88 <init_sound>
				set_sound(600, 2);
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	70 e4       	ldi	r23, 0x40	; 64
    11dc:	88 e5       	ldi	r24, 0x58	; 88
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <set_sound>
    11e4:	9d c0       	rjmp	.+314    	; 0x1320 <play_game+0x20a>
				sound_duration_1 = 255;
			}
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
    11e6:	80 32       	cpi	r24, 0x20	; 32
    11e8:	91 f4       	brne	.+36     	; 0x120e <play_game+0xf8>
    11ea:	19 82       	std	Y+1, r1	; 0x01
    11ec:	01 c0       	rjmp	.+2      	; 0x11f0 <play_game+0xda>
    11ee:	19 82       	std	Y+1, r1	; 0x01
			// Button 2 pressed or up cursor key escape sequence completed OR
			// space bar pressed - attempt to fire projectile
			if (fire_projectile()) {
    11f0:	0e 94 34 04 	call	0x868	; 0x868 <fire_projectile>
    11f4:	88 23       	and	r24, r24
    11f6:	d1 f1       	breq	.+116    	; 0x126c <play_game+0x156>
				init_sound();
    11f8:	0e 94 44 07 	call	0xe88	; 0xe88 <init_sound>
				set_sound(494, 2);
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	70 e4       	ldi	r23, 0x40	; 64
    1204:	8e ee       	ldi	r24, 0xEE	; 238
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 4e 07 	call	0xe9c	; 0xe9c <set_sound>
    120c:	89 c0       	rjmp	.+274    	; 0x1320 <play_game+0x20a>
    120e:	19 82       	std	Y+1, r1	; 0x01
				sound_duration_1 = 255;
			}
		} else if(button==1 || escape_sequence_char=='B') {
    1210:	01 30       	cpi	r16, 0x01	; 1
    1212:	61 f1       	breq	.+88     	; 0x126c <play_game+0x156>
    1214:	92 34       	cpi	r25, 0x42	; 66
    1216:	51 f1       	breq	.+84     	; 0x126c <play_game+0x156>
			// Button 1 pressed OR down cursor key escape sequence completed
			// Ignore at present
		} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
    1218:	00 23       	and	r16, r16
    121a:	29 f0       	breq	.+10     	; 0x1226 <play_game+0x110>
    121c:	93 34       	cpi	r25, 0x43	; 67
    121e:	19 f0       	breq	.+6      	; 0x1226 <play_game+0x110>
    1220:	8f 7d       	andi	r24, 0xDF	; 223
    1222:	82 35       	cpi	r24, 0x52	; 82
    1224:	81 f4       	brne	.+32     	; 0x1246 <play_game+0x130>
			// Button 0 pressed OR right cursor key escape sequence completed OR
			// letter R (lowercase or uppercase) pressed - attempt to move right
			if(move_base(MOVE_RIGHT)) {
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	0e 94 2f 05 	call	0xa5e	; 0xa5e <move_base>
    122c:	88 23       	and	r24, r24
    122e:	f1 f0       	breq	.+60     	; 0x126c <play_game+0x156>
				init_sound();
    1230:	0e 94 44 07 	call	0xe88	; 0xe88 <init_sound>
				set_sound(600, 2);
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	50 e0       	ldi	r21, 0x00	; 0
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	70 e4       	ldi	r23, 0x40	; 64
    123c:	88 e5       	ldi	r24, 0x58	; 88
    123e:	92 e0       	ldi	r25, 0x02	; 2
    1240:	0e 94 4e 07 	call	0xe9c	; 0xe9c <set_sound>
    1244:	6d c0       	rjmp	.+218    	; 0x1320 <play_game+0x20a>
				sound_duration_1 = 255;
			}
		} else if(serial_input == 'p' || serial_input == 'P') {
    1246:	80 35       	cpi	r24, 0x50	; 80
    1248:	89 f4       	brne	.+34     	; 0x126c <play_game+0x156>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			toggle_timer();
    124a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <toggle_timer>
			while(1) {
				if(serial_input_available()) {
    124e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <serial_input_available>
    1252:	88 23       	and	r24, r24
    1254:	e1 f3       	breq	.-8      	; 0x124e <play_game+0x138>
					// Serial data was available - read the data from standard input
					serial_input = fgetc(stdin);
    1256:	ed e2       	ldi	r30, 0x2D	; 45
    1258:	f3 e0       	ldi	r31, 0x03	; 3
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	0e 94 85 10 	call	0x210a	; 0x210a <fgetc>
					if (serial_input == 'p' || serial_input == 'P') {
    1262:	8f 7d       	andi	r24, 0xDF	; 223
    1264:	80 35       	cpi	r24, 0x50	; 80
    1266:	99 f7       	brne	.-26     	; 0x124e <play_game+0x138>
						break;
					}
				}
			}
			toggle_timer();
    1268:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <toggle_timer>
		} 
		
		if (sound_duration_1 == 0) {
    126c:	11 11       	cpse	r17, r1
    126e:	03 c0       	rjmp	.+6      	; 0x1276 <play_game+0x160>
			kill_sound();
    1270:	0e 94 3f 07 	call	0xe7e	; 0xe7e <kill_sound>
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <play_game+0x162>
		} else {
			sound_duration_1--;
    1276:	11 50       	subi	r17, 0x01	; 1
		}
		
		current_time = get_current_time();
    1278:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <get_current_time>
    127c:	6b 01       	movw	r12, r22
    127e:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= last_move_time + 200) {
    1280:	0e 94 c4 04 	call	0x988	; 0x988 <is_game_over>
    1284:	81 11       	cpse	r24, r1
    1286:	0f c0       	rjmp	.+30     	; 0x12a6 <play_game+0x190>
    1288:	d3 01       	movw	r26, r6
    128a:	c2 01       	movw	r24, r4
    128c:	88 53       	subi	r24, 0x38	; 56
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	af 4f       	sbci	r26, 0xFF	; 255
    1292:	bf 4f       	sbci	r27, 0xFF	; 255
    1294:	c8 16       	cp	r12, r24
    1296:	d9 06       	cpc	r13, r25
    1298:	ea 06       	cpc	r14, r26
    129a:	fb 06       	cpc	r15, r27
    129c:	20 f0       	brcs	.+8      	; 0x12a6 <play_game+0x190>
			// 500ms (0.5 second) has passed since the last time we moved
			// the projectiles - move them - and keep track of the time we 
			// moved them
			advance_projectiles();
    129e:	0e 94 82 04 	call	0x904	; 0x904 <advance_projectiles>
			
			last_move_time = current_time;
    12a2:	26 01       	movw	r4, r12
    12a4:	37 01       	movw	r6, r14
		}

		if(current_time >= last_move_asteroid + 1000 - get_score() * 5) {
    12a6:	0e 94 45 0a 	call	0x148a	; 0x148a <get_score>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	9c 01       	movw	r18, r24
    12b0:	ad 01       	movw	r20, r26
    12b2:	22 0f       	add	r18, r18
    12b4:	33 1f       	adc	r19, r19
    12b6:	44 1f       	adc	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	44 1f       	adc	r20, r20
    12c0:	55 1f       	adc	r21, r21
    12c2:	28 0f       	add	r18, r24
    12c4:	39 1f       	adc	r19, r25
    12c6:	4a 1f       	adc	r20, r26
    12c8:	5b 1f       	adc	r21, r27
    12ca:	d5 01       	movw	r26, r10
    12cc:	c4 01       	movw	r24, r8
    12ce:	88 51       	subi	r24, 0x18	; 24
    12d0:	9c 4f       	sbci	r25, 0xFC	; 252
    12d2:	af 4f       	sbci	r26, 0xFF	; 255
    12d4:	bf 4f       	sbci	r27, 0xFF	; 255
    12d6:	82 1b       	sub	r24, r18
    12d8:	93 0b       	sbc	r25, r19
    12da:	a4 0b       	sbc	r26, r20
    12dc:	b5 0b       	sbc	r27, r21
    12de:	c8 16       	cp	r12, r24
    12e0:	d9 06       	cpc	r13, r25
    12e2:	ea 06       	cpc	r14, r26
    12e4:	fb 06       	cpc	r15, r27
    12e6:	20 f0       	brcs	.+8      	; 0x12f0 <play_game+0x1da>
			// 1000ms (1 seconds) has passed since the last time we moved
			// the asteroids - move them - and keep track of the time we
			// moved them
			advance_asteroids();
    12e8:	0e 94 83 05 	call	0xb06	; 0xb06 <advance_asteroids>
			
			last_move_asteroid = current_time;
    12ec:	46 01       	movw	r8, r12
    12ee:	57 01       	movw	r10, r14
		
		/* Displays the score on the seven segment display. 
		Wraps around at 100. The refresh rate is every 3 milliseconds. 
		Might need to use above method to improve performance.
		*/
		set_value(get_score());
    12f0:	0e 94 45 0a 	call	0x148a	; 0x148a <get_score>
    12f4:	cb 01       	movw	r24, r22
    12f6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <set_value>
		display_data(current_time);
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <display_data>
	current_time = get_current_time();
	last_move_time = current_time;
	last_move_asteroid = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    1302:	0e 94 c4 04 	call	0x988	; 0x988 <is_game_over>
    1306:	88 23       	and	r24, r24
    1308:	09 f4       	brne	.+2      	; 0x130c <play_game+0x1f6>
    130a:	2a cf       	rjmp	.-428    	; 0x1160 <play_game+0x4a>
    130c:	15 c0       	rjmp	.+42     	; 0x1338 <play_game+0x222>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    130e:	31 e0       	ldi	r19, 0x01	; 1
    1310:	39 83       	std	Y+1, r19	; 0x01
    1312:	ac cf       	rjmp	.-168    	; 0x126c <play_game+0x156>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1314:	29 82       	std	Y+1, r2	; 0x01
    1316:	aa cf       	rjmp	.-172    	; 0x126c <play_game+0x156>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
    1318:	83 30       	cpi	r24, 0x03	; 3
    131a:	09 f4       	brne	.+2      	; 0x131e <play_game+0x208>
    131c:	53 cf       	rjmp	.-346    	; 0x11c4 <play_game+0xae>
    131e:	06 c0       	rjmp	.+12     	; 0x132c <play_game+0x216>
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    1320:	1f ef       	ldi	r17, 0xFF	; 255
    1322:	a9 cf       	rjmp	.-174    	; 0x1276 <play_game+0x160>
			if(move_base(MOVE_LEFT)) {
				init_sound();
				set_sound(600, 2);
				sound_duration_1 = 255;
			}
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
    1324:	91 34       	cpi	r25, 0x41	; 65
    1326:	09 f0       	breq	.+2      	; 0x132a <play_game+0x214>
    1328:	5e cf       	rjmp	.-324    	; 0x11e6 <play_game+0xd0>
    132a:	61 cf       	rjmp	.-318    	; 0x11ee <play_game+0xd8>
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	09 f4       	brne	.+2      	; 0x1332 <play_game+0x21c>
    1330:	5f cf       	rjmp	.-322    	; 0x11f0 <play_game+0xda>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    1332:	93 2d       	mov	r25, r3
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    1334:	83 2d       	mov	r24, r3
    1336:	6c cf       	rjmp	.-296    	; 0x1210 <play_game+0xfa>
		*/
		set_value(get_score());
		display_data(current_time);
	}
	// We get here if the game is over.
}
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	bf 90       	pop	r11
    1354:	af 90       	pop	r10
    1356:	9f 90       	pop	r9
    1358:	8f 90       	pop	r8
    135a:	7f 90       	pop	r7
    135c:	6f 90       	pop	r6
    135e:	5f 90       	pop	r5
    1360:	4f 90       	pop	r4
    1362:	3f 90       	pop	r3
    1364:	2f 90       	pop	r2
    1366:	08 95       	ret

00001368 <handle_game_over>:

void handle_game_over() {
    1368:	cf 92       	push	r12
    136a:	df 92       	push	r13
    136c:	ef 92       	push	r14
    136e:	ff 92       	push	r15
    1370:	cf 93       	push	r28
	kill_sound();
    1372:	0e 94 3f 07 	call	0xe7e	; 0xe7e <kill_sound>
	uint32_t current_time = get_current_time();
    1376:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <get_current_time>
	uint8_t game_over_count = 0;
	game_over_count += game_over_animation(current_time, 1);
    137a:	41 e0       	ldi	r20, 0x01	; 1
    137c:	0e 94 17 06 	call	0xc2e	; 0xc2e <game_over_animation>
    1380:	c8 2f       	mov	r28, r24
	move_cursor(10,14);
    1382:	6e e0       	ldi	r22, 0x0E	; 14
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	8a e0       	ldi	r24, 0x0A	; 10
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    138e:	83 ec       	ldi	r24, 0xC3	; 195
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9f 93       	push	r25
    1394:	8f 93       	push	r24
    1396:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
	move_cursor(10,15);
    139a:	6f e0       	ldi	r22, 0x0F	; 15
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	8a e0       	ldi	r24, 0x0A	; 10
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    13a6:	85 ea       	ldi	r24, 0xA5	; 165
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9f 93       	push	r25
    13ac:	8f 93       	push	r24
    13ae:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	32 c0       	rjmp	.+100    	; 0x1420 <handle_game_over+0xb8>
		current_time = get_current_time();
    13bc:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <get_current_time>
    13c0:	6b 01       	movw	r12, r22
    13c2:	7c 01       	movw	r14, r24
		display_data(current_time);
    13c4:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <display_data>
		if (game_over_count < 16) {
    13c8:	c0 31       	cpi	r28, 0x10	; 16
    13ca:	38 f4       	brcc	.+14     	; 0x13da <handle_game_over+0x72>
			game_over_count += game_over_animation(current_time, 1);
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	c7 01       	movw	r24, r14
    13d0:	b6 01       	movw	r22, r12
    13d2:	0e 94 17 06 	call	0xc2e	; 0xc2e <game_over_animation>
    13d6:	c8 0f       	add	r28, r24
    13d8:	23 c0       	rjmp	.+70     	; 0x1420 <handle_game_over+0xb8>
		} else if (game_over_count == 16) {
    13da:	c0 31       	cpi	r28, 0x10	; 16
    13dc:	39 f4       	brne	.+14     	; 0x13ec <handle_game_over+0x84>
			game_over_count += game_over_animation(current_time, 2);
    13de:	42 e0       	ldi	r20, 0x02	; 2
    13e0:	c7 01       	movw	r24, r14
    13e2:	b6 01       	movw	r22, r12
    13e4:	0e 94 17 06 	call	0xc2e	; 0xc2e <game_over_animation>
    13e8:	c8 0f       	add	r28, r24
    13ea:	1a c0       	rjmp	.+52     	; 0x1420 <handle_game_over+0xb8>
		}  else if (game_over_count < 100) {
    13ec:	c4 36       	cpi	r28, 0x64	; 100
    13ee:	38 f4       	brcc	.+14     	; 0x13fe <handle_game_over+0x96>
			game_over_count += game_over_animation(current_time, 3);
    13f0:	43 e0       	ldi	r20, 0x03	; 3
    13f2:	c7 01       	movw	r24, r14
    13f4:	b6 01       	movw	r22, r12
    13f6:	0e 94 17 06 	call	0xc2e	; 0xc2e <game_over_animation>
    13fa:	c8 0f       	add	r28, r24
    13fc:	11 c0       	rjmp	.+34     	; 0x1420 <handle_game_over+0xb8>
		} else if (game_over_count == 100) {
    13fe:	c4 36       	cpi	r28, 0x64	; 100
    1400:	39 f4       	brne	.+14     	; 0x1410 <handle_game_over+0xa8>
			game_over_count += game_over_animation(current_time, 4);
    1402:	44 e0       	ldi	r20, 0x04	; 4
    1404:	c7 01       	movw	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	0e 94 17 06 	call	0xc2e	; 0xc2e <game_over_animation>
    140c:	c8 0f       	add	r28, r24
    140e:	08 c0       	rjmp	.+16     	; 0x1420 <handle_game_over+0xb8>
		} else if (game_over_count < 110) {
    1410:	ce 36       	cpi	r28, 0x6E	; 110
    1412:	30 f4       	brcc	.+12     	; 0x1420 <handle_game_over+0xb8>
			game_over_count += game_over_animation(current_time, 5);
    1414:	45 e0       	ldi	r20, 0x05	; 5
    1416:	c7 01       	movw	r24, r14
    1418:	b6 01       	movw	r22, r12
    141a:	0e 94 17 06 	call	0xc2e	; 0xc2e <game_over_animation>
    141e:	c8 0f       	add	r28, r24
	game_over_count += game_over_animation(current_time, 1);
	move_cursor(10,14);
	printf_P(PSTR("GAME OVER"));
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	while(button_pushed() == NO_BUTTON_PUSHED) {
    1420:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
    1424:	8f 3f       	cpi	r24, 0xFF	; 255
    1426:	51 f2       	breq	.-108    	; 0x13bc <handle_game_over+0x54>
			game_over_count += game_over_animation(current_time, 4);
		} else if (game_over_count < 110) {
			game_over_count += game_over_animation(current_time, 5);
		}
	}
	init_lives();
    1428:	0e 94 09 07 	call	0xe12	; 0xe12 <init_lives>
}
    142c:	cf 91       	pop	r28
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	df 90       	pop	r13
    1434:	cf 90       	pop	r12
    1436:	08 95       	ret

00001438 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1438:	0e 94 a8 07 	call	0xf50	; 0xf50 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    143c:	0e 94 b9 07 	call	0xf72	; 0xf72 <splash_screen>
	
	while(1) {
		new_game();
    1440:	0e 94 46 08 	call	0x108c	; 0x108c <new_game>
		play_game();
    1444:	0e 94 8b 08 	call	0x1116	; 0x1116 <play_game>
		handle_game_over();
    1448:	0e 94 b4 09 	call	0x1368	; 0x1368 <handle_game_over>
    144c:	f9 cf       	rjmp	.-14     	; 0x1440 <main+0x8>

0000144e <init_score>:
#include "score.h"

uint32_t score;

void init_score(void) {
	score = 0;
    144e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <score>
    1452:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <score+0x1>
    1456:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <score+0x2>
    145a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <score+0x3>
    145e:	08 95       	ret

00001460 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1460:	40 91 0d 02 	lds	r20, 0x020D	; 0x80020d <score>
    1464:	50 91 0e 02 	lds	r21, 0x020E	; 0x80020e <score+0x1>
    1468:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <score+0x2>
    146c:	70 91 10 02 	lds	r23, 0x0210	; 0x800210 <score+0x3>
    1470:	48 0f       	add	r20, r24
    1472:	59 1f       	adc	r21, r25
    1474:	61 1d       	adc	r22, r1
    1476:	71 1d       	adc	r23, r1
    1478:	40 93 0d 02 	sts	0x020D, r20	; 0x80020d <score>
    147c:	50 93 0e 02 	sts	0x020E, r21	; 0x80020e <score+0x1>
    1480:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <score+0x2>
    1484:	70 93 10 02 	sts	0x0210, r23	; 0x800210 <score+0x3>
    1488:	08 95       	ret

0000148a <get_score>:
}

uint32_t get_score(void) {
	return score;
    148a:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <score>
    148e:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <score+0x1>
    1492:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <score+0x2>
    1496:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <score+0x3>
}
    149a:	08 95       	ret

0000149c <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    149c:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <colour>
	display_string = string_to_display;
    14a0:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <display_string+0x1>
    14a4:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <display_string>
	next_col_ptr = 0;
    14a8:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <next_col_ptr+0x1>
    14ac:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <next_col_ptr>
	next_char_to_display = 0;
    14b0:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <next_char_to_display+0x1>
    14b4:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <next_char_to_display>
    14b8:	08 95       	ret

000014ba <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
    14c6:	28 97       	sbiw	r28, 0x08	; 8
    14c8:	0f b6       	in	r0, 0x3f	; 63
    14ca:	f8 94       	cli
    14cc:	de bf       	out	0x3e, r29	; 62
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    14d2:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <next_col_ptr>
    14d6:	f0 91 e8 01 	lds	r31, 0x01E8	; 0x8001e8 <next_col_ptr+0x1>
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	81 f0       	breq	.+32     	; 0x14fe <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    14de:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    14e0:	10 ff       	sbrs	r17, 0
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    14e4:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <next_col_ptr+0x1>
    14e8:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    14ec:	00 e0       	ldi	r16, 0x00	; 0
    14ee:	6b c0       	rjmp	.+214    	; 0x15c6 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    14f0:	31 96       	adiw	r30, 0x01	; 1
    14f2:	f0 93 e8 01 	sts	0x01E8, r31	; 0x8001e8 <next_col_ptr+0x1>
    14f6:	e0 93 e7 01 	sts	0x01E7, r30	; 0x8001e7 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    14fa:	00 e0       	ldi	r16, 0x00	; 0
    14fc:	64 c0       	rjmp	.+200    	; 0x15c6 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    14fe:	e0 91 e3 01 	lds	r30, 0x01E3	; 0x8001e3 <next_char_to_display>
    1502:	f0 91 e4 01 	lds	r31, 0x01E4	; 0x8001e4 <next_char_to_display+0x1>
    1506:	30 97       	sbiw	r30, 0x00	; 0
    1508:	09 f4       	brne	.+2      	; 0x150c <scroll_display+0x52>
    150a:	49 c0       	rjmp	.+146    	; 0x159e <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    150c:	cf 01       	movw	r24, r30
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <next_char_to_display+0x1>
    1514:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <next_char_to_display>
    1518:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    151a:	e1 11       	cpse	r30, r1
    151c:	0a c0       	rjmp	.+20     	; 0x1532 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    151e:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <next_char_to_display+0x1>
    1522:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <next_char_to_display>
			shift_countdown = 16;
    1526:	80 e1       	ldi	r24, 0x10	; 16
    1528:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    152c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    152e:	10 e0       	ldi	r17, 0x00	; 0
    1530:	4a c0       	rjmp	.+148    	; 0x15c6 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1532:	8f e9       	ldi	r24, 0x9F	; 159
    1534:	8e 0f       	add	r24, r30
    1536:	8a 31       	cpi	r24, 0x1A	; 26
    1538:	70 f4       	brcc	.+28     	; 0x1556 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	ee 0f       	add	r30, r30
    153e:	ff 1f       	adc	r31, r31
    1540:	ec 57       	subi	r30, 0x7C	; 124
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	85 91       	lpm	r24, Z+
    1546:	94 91       	lpm	r25, Z
    1548:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <next_col_ptr+0x1>
    154c:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1550:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1552:	10 e0       	ldi	r17, 0x00	; 0
    1554:	38 c0       	rjmp	.+112    	; 0x15c6 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1556:	8f eb       	ldi	r24, 0xBF	; 191
    1558:	8e 0f       	add	r24, r30
    155a:	8a 31       	cpi	r24, 0x1A	; 26
    155c:	70 f4       	brcc	.+28     	; 0x157a <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	ec 53       	subi	r30, 0x3C	; 60
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	85 91       	lpm	r24, Z+
    156a:	94 91       	lpm	r25, Z
    156c:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <next_col_ptr+0x1>
    1570:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1574:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1576:	10 e0       	ldi	r17, 0x00	; 0
    1578:	26 c0       	rjmp	.+76     	; 0x15c6 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    157a:	80 ed       	ldi	r24, 0xD0	; 208
    157c:	8e 0f       	add	r24, r30
    157e:	8a 30       	cpi	r24, 0x0A	; 10
    1580:	00 f5       	brcc	.+64     	; 0x15c2 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	ee 0f       	add	r30, r30
    1586:	ff 1f       	adc	r31, r31
    1588:	ee 52       	subi	r30, 0x2E	; 46
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	85 91       	lpm	r24, Z+
    158e:	94 91       	lpm	r25, Z
    1590:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <next_col_ptr+0x1>
    1594:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1598:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    159a:	10 e0       	ldi	r17, 0x00	; 0
    159c:	14 c0       	rjmp	.+40     	; 0x15c6 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    159e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <display_string>
    15a2:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    15a6:	01 e0       	ldi	r16, 0x01	; 1
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	09 f0       	breq	.+2      	; 0x15ae <scroll_display+0xf4>
    15ac:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    15ae:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <next_char_to_display+0x1>
    15b2:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <next_char_to_display>
		display_string = 0;
    15b6:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <display_string+0x1>
    15ba:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    15be:	10 e0       	ldi	r17, 0x00	; 0
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    15c2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    15c4:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    15c6:	0e 94 f7 06 	call	0xdee	; 0xdee <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    15ca:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <colour>
    15ce:	fe 01       	movw	r30, r28
    15d0:	38 96       	adiw	r30, 0x08	; 8
    15d2:	ce 01       	movw	r24, r28
    15d4:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    15d6:	11 23       	and	r17, r17
    15d8:	14 f4       	brge	.+4      	; 0x15de <scroll_display+0x124>
			column_colour_data[i] = colour;
    15da:	20 83       	st	Z, r18
    15dc:	01 c0       	rjmp	.+2      	; 0x15e0 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    15de:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    15e0:	11 0f       	add	r17, r17
    15e2:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    15e4:	e8 17       	cp	r30, r24
    15e6:	f9 07       	cpc	r31, r25
    15e8:	b1 f7       	brne	.-20     	; 0x15d6 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    15ea:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    15ec:	be 01       	movw	r22, r28
    15ee:	6f 5f       	subi	r22, 0xFF	; 255
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	8f e0       	ldi	r24, 0x0F	; 15
    15f4:	0e 94 da 06 	call	0xdb4	; 0xdb4 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    15f8:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <shift_countdown.1854>
    15fc:	88 23       	and	r24, r24
    15fe:	89 f0       	breq	.+34     	; 0x1622 <scroll_display+0x168>
		shift_countdown--;
    1600:	81 50       	subi	r24, 0x01	; 1
    1602:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1606:	00 23       	and	r16, r16
    1608:	11 f0       	breq	.+4      	; 0x160e <scroll_display+0x154>
    160a:	88 23       	and	r24, r24
    160c:	11 f0       	breq	.+4      	; 0x1612 <scroll_display+0x158>
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <scroll_display+0x15e>
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <scroll_display+0x15e>
    1616:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	99 23       	and	r25, r25
    161c:	29 f0       	breq	.+10     	; 0x1628 <scroll_display+0x16e>
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1622:	00 23       	and	r16, r16
    1624:	a1 f3       	breq	.-24     	; 0x160e <scroll_display+0x154>
    1626:	f7 cf       	rjmp	.-18     	; 0x1616 <scroll_display+0x15c>
	return !finished;
}
    1628:	28 96       	adiw	r28, 0x08	; 8
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	08 95       	ret

0000163e <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    163e:	cf 93       	push	r28
    1640:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1642:	8a 30       	cpi	r24, 0x0A	; 10
    1644:	19 f4       	brne	.+6      	; 0x164c <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1646:	8d e0       	ldi	r24, 0x0D	; 13
    1648:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    164c:	9f b7       	in	r25, 0x3f	; 63
    164e:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1652:	99 23       	and	r25, r25
    1654:	29 f1       	breq	.+74     	; 0x16a0 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1656:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bytes_in_out_buffer>
    165a:	8f 3f       	cpi	r24, 0xFF	; 255
    165c:	d1 f3       	breq	.-12     	; 0x1652 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    165e:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1660:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <out_insert_pos>
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	8e 0f       	add	r24, r30
    1668:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <out_insert_pos>
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	ed 5e       	subi	r30, 0xED	; 237
    1670:	fd 4f       	sbci	r31, 0xFD	; 253
    1672:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1674:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bytes_in_out_buffer>
    1678:	8f 5f       	subi	r24, 0xFF	; 255
    167a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    167e:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <out_insert_pos>
    1682:	8f 3f       	cpi	r24, 0xFF	; 255
    1684:	11 f4       	brne	.+4      	; 0x168a <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1686:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    168a:	e1 ec       	ldi	r30, 0xC1	; 193
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 62       	ori	r24, 0x20	; 32
    1692:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1694:	99 23       	and	r25, r25
    1696:	39 f0       	breq	.+14     	; 0x16a6 <uart_put_char+0x68>
		sei();
    1698:	78 94       	sei
	}
	return 0;
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
}
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    16ae:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <bytes_in_input_buffer>
    16b2:	88 23       	and	r24, r24
    16b4:	e1 f3       	breq	.-8      	; 0x16ae <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    16b6:	2f b7       	in	r18, 0x3f	; 63
    16b8:	20 78       	andi	r18, 0x80	; 128
	cli();
    16ba:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    16bc:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <input_insert_pos>
    16c0:	30 91 24 03 	lds	r19, 0x0324	; 0x800324 <bytes_in_input_buffer>
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	83 1b       	sub	r24, r19
    16c8:	91 09       	sbc	r25, r1
    16ca:	5a f4       	brpl	.+22     	; 0x16e2 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    16cc:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <input_insert_pos>
    16d0:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	e8 1b       	sub	r30, r24
    16d8:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    16da:	ed 5d       	subi	r30, 0xDD	; 221
    16dc:	fc 4f       	sbci	r31, 0xFC	; 252
    16de:	80 81       	ld	r24, Z
    16e0:	0a c0       	rjmp	.+20     	; 0x16f6 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    16e2:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <input_insert_pos>
    16e6:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <bytes_in_input_buffer>
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	e8 1b       	sub	r30, r24
    16ee:	f1 09       	sbc	r31, r1
    16f0:	ed 5e       	subi	r30, 0xED	; 237
    16f2:	fc 4f       	sbci	r31, 0xFC	; 252
    16f4:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    16f6:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <bytes_in_input_buffer>
    16fa:	91 50       	subi	r25, 0x01	; 1
    16fc:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1700:	22 23       	and	r18, r18
    1702:	09 f0       	breq	.+2      	; 0x1706 <uart_get_char+0x58>
		sei();
    1704:	78 94       	sei
	}	
	return c;
}
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	08 95       	ret

0000170a <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    170a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <out_insert_pos>
	bytes_in_out_buffer = 0;
    170e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1712:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1716:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <bytes_in_input_buffer>
	input_overrun = 0;
    171a:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    171e:	40 93 e9 01 	sts	0x01E9, r20	; 0x8001e9 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	aa 1f       	adc	r26, r26
    172c:	bb 1f       	adc	r27, r27
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	aa 1f       	adc	r26, r26
    1734:	bb 1f       	adc	r27, r27
    1736:	9c 01       	movw	r18, r24
    1738:	ad 01       	movw	r20, r26
    173a:	22 0f       	add	r18, r18
    173c:	33 1f       	adc	r19, r19
    173e:	44 1f       	adc	r20, r20
    1740:	55 1f       	adc	r21, r21
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	72 e1       	ldi	r23, 0x12	; 18
    1746:	8a e7       	ldi	r24, 0x7A	; 122
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__divmodsi4>
    174e:	ba 01       	movw	r22, r20
    1750:	a9 01       	movw	r20, r18
    1752:	4f 5f       	subi	r20, 0xFF	; 255
    1754:	5f 4f       	sbci	r21, 0xFF	; 255
    1756:	6f 4f       	sbci	r22, 0xFF	; 255
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	db 01       	movw	r26, r22
    175c:	ca 01       	movw	r24, r20
    175e:	1a f4       	brpl	.+6      	; 0x1766 <init_serial_stdio+0x5c>
    1760:	01 96       	adiw	r24, 0x01	; 1
    1762:	a1 1d       	adc	r26, r1
    1764:	b1 1d       	adc	r27, r1
    1766:	b5 95       	asr	r27
    1768:	a7 95       	ror	r26
    176a:	97 95       	ror	r25
    176c:	87 95       	ror	r24
    176e:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1770:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1774:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1778:	e1 ec       	ldi	r30, 0xC1	; 193
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	88 e1       	ldi	r24, 0x18	; 24
    177e:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1780:	80 81       	ld	r24, Z
    1782:	80 68       	ori	r24, 0x80	; 128
    1784:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1786:	ed e2       	ldi	r30, 0x2D	; 45
    1788:	f3 e0       	ldi	r31, 0x03	; 3
    178a:	83 e1       	ldi	r24, 0x13	; 19
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	93 83       	std	Z+3, r25	; 0x03
    1790:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	80 83       	st	Z, r24
    1796:	08 95       	ret

00001798 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1798:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <bytes_in_input_buffer>
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	91 11       	cpse	r25, r1
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <serial_input_available+0xc>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
}
    17a4:	08 95       	ret

000017a6 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    17a6:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <input_insert_pos>
	bytes_in_input_buffer = 0;
    17aa:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <bytes_in_input_buffer>
    17ae:	08 95       	ret

000017b0 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
    17ba:	2f 93       	push	r18
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	ef 93       	push	r30
    17c2:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    17c4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bytes_in_out_buffer>
    17c8:	88 23       	and	r24, r24
    17ca:	29 f1       	breq	.+74     	; 0x1816 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    17cc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <out_insert_pos>
    17d0:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <bytes_in_out_buffer>
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	82 1b       	sub	r24, r18
    17d8:	91 09       	sbc	r25, r1
    17da:	5a f4       	brpl	.+22     	; 0x17f2 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    17dc:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <out_insert_pos>
    17e0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	e8 1b       	sub	r30, r24
    17e8:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    17ea:	ee 5e       	subi	r30, 0xEE	; 238
    17ec:	fc 4f       	sbci	r31, 0xFC	; 252
    17ee:	90 81       	ld	r25, Z
    17f0:	0a c0       	rjmp	.+20     	; 0x1806 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    17f2:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <out_insert_pos>
    17f6:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bytes_in_out_buffer>
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	e8 1b       	sub	r30, r24
    17fe:	f1 09       	sbc	r31, r1
    1800:	ed 5e       	subi	r30, 0xED	; 237
    1802:	fd 4f       	sbci	r31, 0xFD	; 253
    1804:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1806:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bytes_in_out_buffer>
    180a:	81 50       	subi	r24, 0x01	; 1
    180c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1810:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1816:	e1 ec       	ldi	r30, 0xC1	; 193
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	8f 7d       	andi	r24, 0xDF	; 223
    181e:	80 83       	st	Z, r24
	}
}
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	9f 91       	pop	r25
    1826:	8f 91       	pop	r24
    1828:	2f 91       	pop	r18
    182a:	0f 90       	pop	r0
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	0f 90       	pop	r0
    1830:	1f 90       	pop	r1
    1832:	18 95       	reti

00001834 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1834:	1f 92       	push	r1
    1836:	0f 92       	push	r0
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	0f 92       	push	r0
    183c:	11 24       	eor	r1, r1
    183e:	2f 93       	push	r18
    1840:	3f 93       	push	r19
    1842:	4f 93       	push	r20
    1844:	5f 93       	push	r21
    1846:	6f 93       	push	r22
    1848:	7f 93       	push	r23
    184a:	8f 93       	push	r24
    184c:	9f 93       	push	r25
    184e:	af 93       	push	r26
    1850:	bf 93       	push	r27
    1852:	cf 93       	push	r28
    1854:	ef 93       	push	r30
    1856:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1858:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    185c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <do_echo>
    1860:	88 23       	and	r24, r24
    1862:	49 f0       	breq	.+18     	; 0x1876 <__vector_20+0x42>
    1864:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bytes_in_out_buffer>
    1868:	8f 3f       	cpi	r24, 0xFF	; 255
    186a:	29 f0       	breq	.+10     	; 0x1876 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	70 e0       	ldi	r23, 0x00	; 0
    1870:	8c 2f       	mov	r24, r28
    1872:	0e 94 1f 0b 	call	0x163e	; 0x163e <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1876:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <bytes_in_input_buffer>
    187a:	80 31       	cpi	r24, 0x10	; 16
    187c:	20 f0       	brcs	.+8      	; 0x1886 <__vector_20+0x52>
		input_overrun = 1;
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <input_overrun>
    1884:	18 c0       	rjmp	.+48     	; 0x18b6 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1886:	cd 30       	cpi	r28, 0x0D	; 13
    1888:	09 f4       	brne	.+2      	; 0x188c <__vector_20+0x58>
			c = '\n';
    188a:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    188c:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <input_insert_pos>
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	8e 0f       	add	r24, r30
    1894:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <input_insert_pos>
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	ed 5e       	subi	r30, 0xED	; 237
    189c:	fc 4f       	sbci	r31, 0xFC	; 252
    189e:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    18a0:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <bytes_in_input_buffer>
    18a4:	8f 5f       	subi	r24, 0xFF	; 255
    18a6:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    18aa:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <input_insert_pos>
    18ae:	80 31       	cpi	r24, 0x10	; 16
    18b0:	11 f4       	brne	.+4      	; 0x18b6 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    18b2:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <input_insert_pos>
		}
	}
}
    18b6:	ff 91       	pop	r31
    18b8:	ef 91       	pop	r30
    18ba:	cf 91       	pop	r28
    18bc:	bf 91       	pop	r27
    18be:	af 91       	pop	r26
    18c0:	9f 91       	pop	r25
    18c2:	8f 91       	pop	r24
    18c4:	7f 91       	pop	r23
    18c6:	6f 91       	pop	r22
    18c8:	5f 91       	pop	r21
    18ca:	4f 91       	pop	r20
    18cc:	3f 91       	pop	r19
    18ce:	2f 91       	pop	r18
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <init_display>:
uint32_t previous_time;
volatile uint8_t seven_seg_cc;

void init_display(void) {
	// Set Port A to output the digits.
	DDRA = 0xFF;
    18da:	8f ef       	ldi	r24, 0xFF	; 255
    18dc:	81 b9       	out	0x01, r24	; 1
	// Port C pin 0 to oscillate between digits.
	DDRC = 0xF1;
    18de:	81 ef       	ldi	r24, 0xF1	; 241
    18e0:	87 b9       	out	0x07, r24	; 7
	// The side to display on, 0 -> right, 1 -> left
	seven_seg_cc = 0;
    18e2:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <seven_seg_cc>
	// Add a random placeholder
	previous_time = 0;
    18e6:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <previous_time>
    18ea:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <previous_time+0x1>
    18ee:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <previous_time+0x2>
    18f2:	10 92 28 03 	sts	0x0328, r1	; 0x800328 <previous_time+0x3>
    18f6:	08 95       	ret

000018f8 <display_data>:
}

void display_data(uint32_t current_time) {
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
	/* Displays the value on the seven segment display. 
	Wraps around at 100. The refresh rate is every 3 milliseconds. 
	Might need to use above method to improve performance.
	*/
	if (current_time > previous_time + 3) {
    18fc:	00 91 25 03 	lds	r16, 0x0325	; 0x800325 <previous_time>
    1900:	10 91 26 03 	lds	r17, 0x0326	; 0x800326 <previous_time+0x1>
    1904:	20 91 27 03 	lds	r18, 0x0327	; 0x800327 <previous_time+0x2>
    1908:	30 91 28 03 	lds	r19, 0x0328	; 0x800328 <previous_time+0x3>
    190c:	0d 5f       	subi	r16, 0xFD	; 253
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	2f 4f       	sbci	r18, 0xFF	; 255
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	06 17       	cp	r16, r22
    1916:	17 07       	cpc	r17, r23
    1918:	28 07       	cpc	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	08 f0       	brcs	.+2      	; 0x1920 <display_data+0x28>
    191e:	84 c0       	rjmp	.+264    	; 0x1a28 <display_data+0x130>
		// Save the last time
		previous_time = current_time;
    1920:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <previous_time>
    1924:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <previous_time+0x1>
    1928:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <previous_time+0x2>
    192c:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <previous_time+0x3>
		// Only display the last digit
		if (display_value < 10) {
    1930:	40 91 2a 03 	lds	r20, 0x032A	; 0x80032a <display_value>
    1934:	50 91 2b 03 	lds	r21, 0x032B	; 0x80032b <display_value+0x1>
    1938:	4a 30       	cpi	r20, 0x0A	; 10
    193a:	51 05       	cpc	r21, r1
    193c:	00 f5       	brcc	.+64     	; 0x197e <display_data+0x86>
			seven_seg_cc = 0;
    193e:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <seven_seg_cc>
			PORTA = seven_seg_data[display_value % 10];
    1942:	9a 01       	movw	r18, r20
    1944:	ad ec       	ldi	r26, 0xCD	; 205
    1946:	bc ec       	ldi	r27, 0xCC	; 204
    1948:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    194c:	96 95       	lsr	r25
    194e:	87 95       	ror	r24
    1950:	96 95       	lsr	r25
    1952:	87 95       	ror	r24
    1954:	96 95       	lsr	r25
    1956:	87 95       	ror	r24
    1958:	9c 01       	movw	r18, r24
    195a:	22 0f       	add	r18, r18
    195c:	33 1f       	adc	r19, r19
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	82 0f       	add	r24, r18
    196c:	93 1f       	adc	r25, r19
    196e:	48 1b       	sub	r20, r24
    1970:	59 0b       	sbc	r21, r25
    1972:	fa 01       	movw	r30, r20
    1974:	ef 5d       	subi	r30, 0xDF	; 223
    1976:	fe 4f       	sbci	r31, 0xFE	; 254
    1978:	80 81       	ld	r24, Z
    197a:	82 b9       	out	0x02, r24	; 2
    197c:	4f c0       	rjmp	.+158    	; 0x1a1c <display_data+0x124>
		} else {
			seven_seg_cc = 1 - seven_seg_cc;
    197e:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <seven_seg_cc>
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	89 1b       	sub	r24, r25
    1986:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <seven_seg_cc>
			if (seven_seg_cc == 0) {
    198a:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <seven_seg_cc>
    198e:	81 11       	cpse	r24, r1
    1990:	1e c0       	rjmp	.+60     	; 0x19ce <display_data+0xd6>
				// Set the first digit
				PORTA = seven_seg_data[display_value % 10];
    1992:	9a 01       	movw	r18, r20
    1994:	ad ec       	ldi	r26, 0xCD	; 205
    1996:	bc ec       	ldi	r27, 0xCC	; 204
    1998:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    199c:	96 95       	lsr	r25
    199e:	87 95       	ror	r24
    19a0:	96 95       	lsr	r25
    19a2:	87 95       	ror	r24
    19a4:	96 95       	lsr	r25
    19a6:	87 95       	ror	r24
    19a8:	9c 01       	movw	r18, r24
    19aa:	22 0f       	add	r18, r18
    19ac:	33 1f       	adc	r19, r19
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	82 0f       	add	r24, r18
    19bc:	93 1f       	adc	r25, r19
    19be:	48 1b       	sub	r20, r24
    19c0:	59 0b       	sbc	r21, r25
    19c2:	fa 01       	movw	r30, r20
    19c4:	ef 5d       	subi	r30, 0xDF	; 223
    19c6:	fe 4f       	sbci	r31, 0xFE	; 254
    19c8:	80 81       	ld	r24, Z
    19ca:	82 b9       	out	0x02, r24	; 2
    19cc:	27 c0       	rjmp	.+78     	; 0x1a1c <display_data+0x124>
			} else {
				// Set the second digit
				PORTA = seven_seg_data[(display_value / 10) % 10];
    19ce:	9a 01       	movw	r18, r20
    19d0:	ad ec       	ldi	r26, 0xCD	; 205
    19d2:	bc ec       	ldi	r27, 0xCC	; 204
    19d4:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    19d8:	ac 01       	movw	r20, r24
    19da:	56 95       	lsr	r21
    19dc:	47 95       	ror	r20
    19de:	56 95       	lsr	r21
    19e0:	47 95       	ror	r20
    19e2:	56 95       	lsr	r21
    19e4:	47 95       	ror	r20
    19e6:	9a 01       	movw	r18, r20
    19e8:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    19ec:	96 95       	lsr	r25
    19ee:	87 95       	ror	r24
    19f0:	96 95       	lsr	r25
    19f2:	87 95       	ror	r24
    19f4:	96 95       	lsr	r25
    19f6:	87 95       	ror	r24
    19f8:	9c 01       	movw	r18, r24
    19fa:	22 0f       	add	r18, r18
    19fc:	33 1f       	adc	r19, r19
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	82 0f       	add	r24, r18
    1a0c:	93 1f       	adc	r25, r19
    1a0e:	48 1b       	sub	r20, r24
    1a10:	59 0b       	sbc	r21, r25
    1a12:	fa 01       	movw	r30, r20
    1a14:	ef 5d       	subi	r30, 0xDF	; 223
    1a16:	fe 4f       	sbci	r31, 0xFE	; 254
    1a18:	80 81       	ld	r24, Z
    1a1a:	82 b9       	out	0x02, r24	; 2
			}
		}
		/* Output the digit selection (CC) bit */
		PORTC = (PORTC & ~1) | seven_seg_cc;
    1a1c:	88 b1       	in	r24, 0x08	; 8
    1a1e:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <seven_seg_cc>
    1a22:	8e 7f       	andi	r24, 0xFE	; 254
    1a24:	89 2b       	or	r24, r25
    1a26:	88 b9       	out	0x08, r24	; 8
	}
}
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	08 95       	ret

00001a2e <update_time>:

void update_time(uint32_t time) {
	previous_time = time;
    1a2e:	60 93 25 03 	sts	0x0325, r22	; 0x800325 <previous_time>
    1a32:	70 93 26 03 	sts	0x0326, r23	; 0x800326 <previous_time+0x1>
    1a36:	80 93 27 03 	sts	0x0327, r24	; 0x800327 <previous_time+0x2>
    1a3a:	90 93 28 03 	sts	0x0328, r25	; 0x800328 <previous_time+0x3>
    1a3e:	08 95       	ret

00001a40 <set_value>:
}

void set_value(uint16_t value) {
	// Set the value (first two digits) on the display
	display_value = value;
    1a40:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <display_value+0x1>
    1a44:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <display_value>
    1a48:	08 95       	ret

00001a4a <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1a4a:	94 b1       	in	r25, 0x04	; 4
    1a4c:	90 6b       	ori	r25, 0xB0	; 176
    1a4e:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1a50:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1a52:	90 e5       	ldi	r25, 0x50	; 80
    1a54:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1a56:	88 30       	cpi	r24, 0x08	; 8
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <spi_setup_master+0x18>
    1a5a:	80 32       	cpi	r24, 0x20	; 32
    1a5c:	11 f0       	breq	.+4      	; 0x1a62 <spi_setup_master+0x18>
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	19 f4       	brne	.+6      	; 0x1a68 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	9d bd       	out	0x2d, r25	; 45
			break;
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1a68:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1a6a:	80 32       	cpi	r24, 0x20	; 32
    1a6c:	69 f0       	breq	.+26     	; 0x1a88 <spi_setup_master+0x3e>
    1a6e:	28 f4       	brcc	.+10     	; 0x1a7a <spi_setup_master+0x30>
    1a70:	88 30       	cpi	r24, 0x08	; 8
    1a72:	71 f0       	breq	.+28     	; 0x1a90 <spi_setup_master+0x46>
    1a74:	80 31       	cpi	r24, 0x10	; 16
    1a76:	61 f0       	breq	.+24     	; 0x1a90 <spi_setup_master+0x46>
    1a78:	0e c0       	rjmp	.+28     	; 0x1a96 <spi_setup_master+0x4c>
    1a7a:	80 34       	cpi	r24, 0x40	; 64
    1a7c:	29 f0       	breq	.+10     	; 0x1a88 <spi_setup_master+0x3e>
    1a7e:	80 38       	cpi	r24, 0x80	; 128
    1a80:	51 f4       	brne	.+20     	; 0x1a96 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1a82:	8c b5       	in	r24, 0x2c	; 44
    1a84:	81 60       	ori	r24, 0x01	; 1
    1a86:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1a88:	8c b5       	in	r24, 0x2c	; 44
    1a8a:	82 60       	ori	r24, 0x02	; 2
    1a8c:	8c bd       	out	0x2c, r24	; 44
			break;
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1a90:	8c b5       	in	r24, 0x2c	; 44
    1a92:	81 60       	ori	r24, 0x01	; 1
    1a94:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1a96:	2c 98       	cbi	0x05, 4	; 5
    1a98:	08 95       	ret

00001a9a <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1a9a:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1a9c:	0d b4       	in	r0, 0x2d	; 45
    1a9e:	07 fe       	sbrs	r0, 7
    1aa0:	fd cf       	rjmp	.-6      	; 0x1a9c <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1aa2:	8e b5       	in	r24, 0x2e	; 46
    1aa4:	08 95       	ret

00001aa6 <move_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    1aa6:	9f 93       	push	r25
    1aa8:	8f 93       	push	r24
    1aaa:	7f 93       	push	r23
    1aac:	6f 93       	push	r22
    1aae:	85 e1       	ldi	r24, 0x15	; 21
    1ab0:	92 e0       	ldi	r25, 0x02	; 2
    1ab2:	9f 93       	push	r25
    1ab4:	8f 93       	push	r24
    1ab6:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	08 95       	ret

00001ac8 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    1ac8:	80 e1       	ldi	r24, 0x10	; 16
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	9f 93       	push	r25
    1ace:	8f 93       	push	r24
    1ad0:	0e 94 c3 10 	call	0x2186	; 0x2186 <printf_P>
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	08 95       	ret

00001ada <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    1ada:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <clockTicks>
    1ade:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <clockTicks+0x1>
    1ae2:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <clockTicks+0x2>
    1ae6:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <clockTicks+0x3>
	// Enable clockTicks to count.
	stopwatch_timing = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <stopwatch_timing>
	
	/* Clear the timer */
	TCNT0 = 0;
    1af0:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1af2:	8c e7       	ldi	r24, 0x7C	; 124
    1af4:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    1afe:	ee e6       	ldi	r30, 0x6E	; 110
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	82 60       	ori	r24, 0x02	; 2
    1b06:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1b08:	85 b3       	in	r24, 0x15	; 21
    1b0a:	82 70       	andi	r24, 0x02	; 2
    1b0c:	85 bb       	out	0x15, r24	; 21
    1b0e:	08 95       	ret

00001b10 <toggle_timer>:


// Turn the timer on/off. Whilst interrupts will still flag
// Nothing will happen.
void toggle_timer(void) {
	stopwatch_timing = 1 - stopwatch_timing;
    1b10:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <stopwatch_timing>
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	89 1b       	sub	r24, r25
    1b18:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <stopwatch_timing>
    1b1c:	08 95       	ret

00001b1e <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    1b1e:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1b20:	f8 94       	cli
	returnValue = clockTicks;
    1b22:	60 91 ea 01 	lds	r22, 0x01EA	; 0x8001ea <clockTicks>
    1b26:	70 91 eb 01 	lds	r23, 0x01EB	; 0x8001eb <clockTicks+0x1>
    1b2a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <clockTicks+0x2>
    1b2e:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <clockTicks+0x3>
	if(interruptsOn) {
    1b32:	22 23       	and	r18, r18
    1b34:	0c f4       	brge	.+2      	; 0x1b38 <get_current_time+0x1a>
		sei();
    1b36:	78 94       	sei
	}
	return returnValue;
}
    1b38:	08 95       	ret

00001b3a <set_clock_ticks>:

void set_clock_ticks(uint32_t value) {
	clockTicks = value;
    1b3a:	60 93 ea 01 	sts	0x01EA, r22	; 0x8001ea <clockTicks>
    1b3e:	70 93 eb 01 	sts	0x01EB, r23	; 0x8001eb <clockTicks+0x1>
    1b42:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <clockTicks+0x2>
    1b46:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <clockTicks+0x3>
    1b4a:	08 95       	ret

00001b4c <__vector_16>:
}

ISR(TIMER0_COMPA_vect) {
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	8f 93       	push	r24
    1b58:	9f 93       	push	r25
    1b5a:	af 93       	push	r26
    1b5c:	bf 93       	push	r27
	/* Increment our clock tick count */
	if (stopwatch_timing) {
    1b5e:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <stopwatch_timing>
    1b62:	88 23       	and	r24, r24
    1b64:	99 f0       	breq	.+38     	; 0x1b8c <__vector_16+0x40>
		clockTicks++;
    1b66:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <clockTicks>
    1b6a:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <clockTicks+0x1>
    1b6e:	a0 91 ec 01 	lds	r26, 0x01EC	; 0x8001ec <clockTicks+0x2>
    1b72:	b0 91 ed 01 	lds	r27, 0x01ED	; 0x8001ed <clockTicks+0x3>
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	a1 1d       	adc	r26, r1
    1b7a:	b1 1d       	adc	r27, r1
    1b7c:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <clockTicks>
    1b80:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <clockTicks+0x1>
    1b84:	a0 93 ec 01 	sts	0x01EC, r26	; 0x8001ec <clockTicks+0x2>
    1b88:	b0 93 ed 01 	sts	0x01ED, r27	; 0x8001ed <clockTicks+0x3>
	}
}
    1b8c:	bf 91       	pop	r27
    1b8e:	af 91       	pop	r26
    1b90:	9f 91       	pop	r25
    1b92:	8f 91       	pop	r24
    1b94:	0f 90       	pop	r0
    1b96:	0f be       	out	0x3f, r0	; 63
    1b98:	0f 90       	pop	r0
    1b9a:	1f 90       	pop	r1
    1b9c:	18 95       	reti

00001b9e <__divsf3>:
    1b9e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <__divsf3x>
    1ba2:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__fp_round>
    1ba6:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fp_pscB>
    1baa:	58 f0       	brcs	.+22     	; 0x1bc2 <__divsf3+0x24>
    1bac:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fp_pscA>
    1bb0:	40 f0       	brcs	.+16     	; 0x1bc2 <__divsf3+0x24>
    1bb2:	29 f4       	brne	.+10     	; 0x1bbe <__divsf3+0x20>
    1bb4:	5f 3f       	cpi	r21, 0xFF	; 255
    1bb6:	29 f0       	breq	.+10     	; 0x1bc2 <__divsf3+0x24>
    1bb8:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1bbc:	51 11       	cpse	r21, r1
    1bbe:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_szero>
    1bc2:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_nan>

00001bc6 <__divsf3x>:
    1bc6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_split3>
    1bca:	68 f3       	brcs	.-38     	; 0x1ba6 <__divsf3+0x8>

00001bcc <__divsf3_pse>:
    1bcc:	99 23       	and	r25, r25
    1bce:	b1 f3       	breq	.-20     	; 0x1bbc <__divsf3+0x1e>
    1bd0:	55 23       	and	r21, r21
    1bd2:	91 f3       	breq	.-28     	; 0x1bb8 <__divsf3+0x1a>
    1bd4:	95 1b       	sub	r25, r21
    1bd6:	55 0b       	sbc	r21, r21
    1bd8:	bb 27       	eor	r27, r27
    1bda:	aa 27       	eor	r26, r26
    1bdc:	62 17       	cp	r22, r18
    1bde:	73 07       	cpc	r23, r19
    1be0:	84 07       	cpc	r24, r20
    1be2:	38 f0       	brcs	.+14     	; 0x1bf2 <__divsf3_pse+0x26>
    1be4:	9f 5f       	subi	r25, 0xFF	; 255
    1be6:	5f 4f       	sbci	r21, 0xFF	; 255
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	44 1f       	adc	r20, r20
    1bee:	aa 1f       	adc	r26, r26
    1bf0:	a9 f3       	breq	.-22     	; 0x1bdc <__divsf3_pse+0x10>
    1bf2:	35 d0       	rcall	.+106    	; 0x1c5e <__divsf3_pse+0x92>
    1bf4:	0e 2e       	mov	r0, r30
    1bf6:	3a f0       	brmi	.+14     	; 0x1c06 <__divsf3_pse+0x3a>
    1bf8:	e0 e8       	ldi	r30, 0x80	; 128
    1bfa:	32 d0       	rcall	.+100    	; 0x1c60 <__divsf3_pse+0x94>
    1bfc:	91 50       	subi	r25, 0x01	; 1
    1bfe:	50 40       	sbci	r21, 0x00	; 0
    1c00:	e6 95       	lsr	r30
    1c02:	00 1c       	adc	r0, r0
    1c04:	ca f7       	brpl	.-14     	; 0x1bf8 <__divsf3_pse+0x2c>
    1c06:	2b d0       	rcall	.+86     	; 0x1c5e <__divsf3_pse+0x92>
    1c08:	fe 2f       	mov	r31, r30
    1c0a:	29 d0       	rcall	.+82     	; 0x1c5e <__divsf3_pse+0x92>
    1c0c:	66 0f       	add	r22, r22
    1c0e:	77 1f       	adc	r23, r23
    1c10:	88 1f       	adc	r24, r24
    1c12:	bb 1f       	adc	r27, r27
    1c14:	26 17       	cp	r18, r22
    1c16:	37 07       	cpc	r19, r23
    1c18:	48 07       	cpc	r20, r24
    1c1a:	ab 07       	cpc	r26, r27
    1c1c:	b0 e8       	ldi	r27, 0x80	; 128
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <__divsf3_pse+0x56>
    1c20:	bb 0b       	sbc	r27, r27
    1c22:	80 2d       	mov	r24, r0
    1c24:	bf 01       	movw	r22, r30
    1c26:	ff 27       	eor	r31, r31
    1c28:	93 58       	subi	r25, 0x83	; 131
    1c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c2c:	3a f0       	brmi	.+14     	; 0x1c3c <__divsf3_pse+0x70>
    1c2e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c30:	51 05       	cpc	r21, r1
    1c32:	78 f0       	brcs	.+30     	; 0x1c52 <__divsf3_pse+0x86>
    1c34:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1c38:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_szero>
    1c3c:	5f 3f       	cpi	r21, 0xFF	; 255
    1c3e:	e4 f3       	brlt	.-8      	; 0x1c38 <__divsf3_pse+0x6c>
    1c40:	98 3e       	cpi	r25, 0xE8	; 232
    1c42:	d4 f3       	brlt	.-12     	; 0x1c38 <__divsf3_pse+0x6c>
    1c44:	86 95       	lsr	r24
    1c46:	77 95       	ror	r23
    1c48:	67 95       	ror	r22
    1c4a:	b7 95       	ror	r27
    1c4c:	f7 95       	ror	r31
    1c4e:	9f 5f       	subi	r25, 0xFF	; 255
    1c50:	c9 f7       	brne	.-14     	; 0x1c44 <__divsf3_pse+0x78>
    1c52:	88 0f       	add	r24, r24
    1c54:	91 1d       	adc	r25, r1
    1c56:	96 95       	lsr	r25
    1c58:	87 95       	ror	r24
    1c5a:	97 f9       	bld	r25, 7
    1c5c:	08 95       	ret
    1c5e:	e1 e0       	ldi	r30, 0x01	; 1
    1c60:	66 0f       	add	r22, r22
    1c62:	77 1f       	adc	r23, r23
    1c64:	88 1f       	adc	r24, r24
    1c66:	bb 1f       	adc	r27, r27
    1c68:	62 17       	cp	r22, r18
    1c6a:	73 07       	cpc	r23, r19
    1c6c:	84 07       	cpc	r24, r20
    1c6e:	ba 07       	cpc	r27, r26
    1c70:	20 f0       	brcs	.+8      	; 0x1c7a <__divsf3_pse+0xae>
    1c72:	62 1b       	sub	r22, r18
    1c74:	73 0b       	sbc	r23, r19
    1c76:	84 0b       	sbc	r24, r20
    1c78:	ba 0b       	sbc	r27, r26
    1c7a:	ee 1f       	adc	r30, r30
    1c7c:	88 f7       	brcc	.-30     	; 0x1c60 <__divsf3_pse+0x94>
    1c7e:	e0 95       	com	r30
    1c80:	08 95       	ret

00001c82 <__fixunssfsi>:
    1c82:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <__fp_splitA>
    1c86:	88 f0       	brcs	.+34     	; 0x1caa <__fixunssfsi+0x28>
    1c88:	9f 57       	subi	r25, 0x7F	; 127
    1c8a:	98 f0       	brcs	.+38     	; 0x1cb2 <__fixunssfsi+0x30>
    1c8c:	b9 2f       	mov	r27, r25
    1c8e:	99 27       	eor	r25, r25
    1c90:	b7 51       	subi	r27, 0x17	; 23
    1c92:	b0 f0       	brcs	.+44     	; 0x1cc0 <__fixunssfsi+0x3e>
    1c94:	e1 f0       	breq	.+56     	; 0x1cce <__fixunssfsi+0x4c>
    1c96:	66 0f       	add	r22, r22
    1c98:	77 1f       	adc	r23, r23
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	1a f0       	brmi	.+6      	; 0x1ca6 <__fixunssfsi+0x24>
    1ca0:	ba 95       	dec	r27
    1ca2:	c9 f7       	brne	.-14     	; 0x1c96 <__fixunssfsi+0x14>
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <__fixunssfsi+0x4c>
    1ca6:	b1 30       	cpi	r27, 0x01	; 1
    1ca8:	91 f0       	breq	.+36     	; 0x1cce <__fixunssfsi+0x4c>
    1caa:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <__fp_zero>
    1cae:	b1 e0       	ldi	r27, 0x01	; 1
    1cb0:	08 95       	ret
    1cb2:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <__fp_zero>
    1cb6:	67 2f       	mov	r22, r23
    1cb8:	78 2f       	mov	r23, r24
    1cba:	88 27       	eor	r24, r24
    1cbc:	b8 5f       	subi	r27, 0xF8	; 248
    1cbe:	39 f0       	breq	.+14     	; 0x1cce <__fixunssfsi+0x4c>
    1cc0:	b9 3f       	cpi	r27, 0xF9	; 249
    1cc2:	cc f3       	brlt	.-14     	; 0x1cb6 <__fixunssfsi+0x34>
    1cc4:	86 95       	lsr	r24
    1cc6:	77 95       	ror	r23
    1cc8:	67 95       	ror	r22
    1cca:	b3 95       	inc	r27
    1ccc:	d9 f7       	brne	.-10     	; 0x1cc4 <__fixunssfsi+0x42>
    1cce:	3e f4       	brtc	.+14     	; 0x1cde <__fixunssfsi+0x5c>
    1cd0:	90 95       	com	r25
    1cd2:	80 95       	com	r24
    1cd4:	70 95       	com	r23
    1cd6:	61 95       	neg	r22
    1cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cda:	8f 4f       	sbci	r24, 0xFF	; 255
    1cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cde:	08 95       	ret

00001ce0 <__floatunsisf>:
    1ce0:	e8 94       	clt
    1ce2:	09 c0       	rjmp	.+18     	; 0x1cf6 <__floatsisf+0x12>

00001ce4 <__floatsisf>:
    1ce4:	97 fb       	bst	r25, 7
    1ce6:	3e f4       	brtc	.+14     	; 0x1cf6 <__floatsisf+0x12>
    1ce8:	90 95       	com	r25
    1cea:	80 95       	com	r24
    1cec:	70 95       	com	r23
    1cee:	61 95       	neg	r22
    1cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	99 23       	and	r25, r25
    1cf8:	a9 f0       	breq	.+42     	; 0x1d24 <__floatsisf+0x40>
    1cfa:	f9 2f       	mov	r31, r25
    1cfc:	96 e9       	ldi	r25, 0x96	; 150
    1cfe:	bb 27       	eor	r27, r27
    1d00:	93 95       	inc	r25
    1d02:	f6 95       	lsr	r31
    1d04:	87 95       	ror	r24
    1d06:	77 95       	ror	r23
    1d08:	67 95       	ror	r22
    1d0a:	b7 95       	ror	r27
    1d0c:	f1 11       	cpse	r31, r1
    1d0e:	f8 cf       	rjmp	.-16     	; 0x1d00 <__floatsisf+0x1c>
    1d10:	fa f4       	brpl	.+62     	; 0x1d50 <__floatsisf+0x6c>
    1d12:	bb 0f       	add	r27, r27
    1d14:	11 f4       	brne	.+4      	; 0x1d1a <__floatsisf+0x36>
    1d16:	60 ff       	sbrs	r22, 0
    1d18:	1b c0       	rjmp	.+54     	; 0x1d50 <__floatsisf+0x6c>
    1d1a:	6f 5f       	subi	r22, 0xFF	; 255
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d20:	9f 4f       	sbci	r25, 0xFF	; 255
    1d22:	16 c0       	rjmp	.+44     	; 0x1d50 <__floatsisf+0x6c>
    1d24:	88 23       	and	r24, r24
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <__floatsisf+0x48>
    1d28:	96 e9       	ldi	r25, 0x96	; 150
    1d2a:	11 c0       	rjmp	.+34     	; 0x1d4e <__floatsisf+0x6a>
    1d2c:	77 23       	and	r23, r23
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <__floatsisf+0x54>
    1d30:	9e e8       	ldi	r25, 0x8E	; 142
    1d32:	87 2f       	mov	r24, r23
    1d34:	76 2f       	mov	r23, r22
    1d36:	05 c0       	rjmp	.+10     	; 0x1d42 <__floatsisf+0x5e>
    1d38:	66 23       	and	r22, r22
    1d3a:	71 f0       	breq	.+28     	; 0x1d58 <__floatsisf+0x74>
    1d3c:	96 e8       	ldi	r25, 0x86	; 134
    1d3e:	86 2f       	mov	r24, r22
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	2a f0       	brmi	.+10     	; 0x1d50 <__floatsisf+0x6c>
    1d46:	9a 95       	dec	r25
    1d48:	66 0f       	add	r22, r22
    1d4a:	77 1f       	adc	r23, r23
    1d4c:	88 1f       	adc	r24, r24
    1d4e:	da f7       	brpl	.-10     	; 0x1d46 <__floatsisf+0x62>
    1d50:	88 0f       	add	r24, r24
    1d52:	96 95       	lsr	r25
    1d54:	87 95       	ror	r24
    1d56:	97 f9       	bld	r25, 7
    1d58:	08 95       	ret

00001d5a <__fp_inf>:
    1d5a:	97 f9       	bld	r25, 7
    1d5c:	9f 67       	ori	r25, 0x7F	; 127
    1d5e:	80 e8       	ldi	r24, 0x80	; 128
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	08 95       	ret

00001d66 <__fp_nan>:
    1d66:	9f ef       	ldi	r25, 0xFF	; 255
    1d68:	80 ec       	ldi	r24, 0xC0	; 192
    1d6a:	08 95       	ret

00001d6c <__fp_pscA>:
    1d6c:	00 24       	eor	r0, r0
    1d6e:	0a 94       	dec	r0
    1d70:	16 16       	cp	r1, r22
    1d72:	17 06       	cpc	r1, r23
    1d74:	18 06       	cpc	r1, r24
    1d76:	09 06       	cpc	r0, r25
    1d78:	08 95       	ret

00001d7a <__fp_pscB>:
    1d7a:	00 24       	eor	r0, r0
    1d7c:	0a 94       	dec	r0
    1d7e:	12 16       	cp	r1, r18
    1d80:	13 06       	cpc	r1, r19
    1d82:	14 06       	cpc	r1, r20
    1d84:	05 06       	cpc	r0, r21
    1d86:	08 95       	ret

00001d88 <__fp_round>:
    1d88:	09 2e       	mov	r0, r25
    1d8a:	03 94       	inc	r0
    1d8c:	00 0c       	add	r0, r0
    1d8e:	11 f4       	brne	.+4      	; 0x1d94 <__fp_round+0xc>
    1d90:	88 23       	and	r24, r24
    1d92:	52 f0       	brmi	.+20     	; 0x1da8 <__fp_round+0x20>
    1d94:	bb 0f       	add	r27, r27
    1d96:	40 f4       	brcc	.+16     	; 0x1da8 <__fp_round+0x20>
    1d98:	bf 2b       	or	r27, r31
    1d9a:	11 f4       	brne	.+4      	; 0x1da0 <__fp_round+0x18>
    1d9c:	60 ff       	sbrs	r22, 0
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <__fp_round+0x20>
    1da0:	6f 5f       	subi	r22, 0xFF	; 255
    1da2:	7f 4f       	sbci	r23, 0xFF	; 255
    1da4:	8f 4f       	sbci	r24, 0xFF	; 255
    1da6:	9f 4f       	sbci	r25, 0xFF	; 255
    1da8:	08 95       	ret

00001daa <__fp_split3>:
    1daa:	57 fd       	sbrc	r21, 7
    1dac:	90 58       	subi	r25, 0x80	; 128
    1dae:	44 0f       	add	r20, r20
    1db0:	55 1f       	adc	r21, r21
    1db2:	59 f0       	breq	.+22     	; 0x1dca <__fp_splitA+0x10>
    1db4:	5f 3f       	cpi	r21, 0xFF	; 255
    1db6:	71 f0       	breq	.+28     	; 0x1dd4 <__fp_splitA+0x1a>
    1db8:	47 95       	ror	r20

00001dba <__fp_splitA>:
    1dba:	88 0f       	add	r24, r24
    1dbc:	97 fb       	bst	r25, 7
    1dbe:	99 1f       	adc	r25, r25
    1dc0:	61 f0       	breq	.+24     	; 0x1dda <__fp_splitA+0x20>
    1dc2:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc4:	79 f0       	breq	.+30     	; 0x1de4 <__fp_splitA+0x2a>
    1dc6:	87 95       	ror	r24
    1dc8:	08 95       	ret
    1dca:	12 16       	cp	r1, r18
    1dcc:	13 06       	cpc	r1, r19
    1dce:	14 06       	cpc	r1, r20
    1dd0:	55 1f       	adc	r21, r21
    1dd2:	f2 cf       	rjmp	.-28     	; 0x1db8 <__fp_split3+0xe>
    1dd4:	46 95       	lsr	r20
    1dd6:	f1 df       	rcall	.-30     	; 0x1dba <__fp_splitA>
    1dd8:	08 c0       	rjmp	.+16     	; 0x1dea <__fp_splitA+0x30>
    1dda:	16 16       	cp	r1, r22
    1ddc:	17 06       	cpc	r1, r23
    1dde:	18 06       	cpc	r1, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	f1 cf       	rjmp	.-30     	; 0x1dc6 <__fp_splitA+0xc>
    1de4:	86 95       	lsr	r24
    1de6:	71 05       	cpc	r23, r1
    1de8:	61 05       	cpc	r22, r1
    1dea:	08 94       	sec
    1dec:	08 95       	ret

00001dee <__fp_zero>:
    1dee:	e8 94       	clt

00001df0 <__fp_szero>:
    1df0:	bb 27       	eor	r27, r27
    1df2:	66 27       	eor	r22, r22
    1df4:	77 27       	eor	r23, r23
    1df6:	cb 01       	movw	r24, r22
    1df8:	97 f9       	bld	r25, 7
    1dfa:	08 95       	ret

00001dfc <__mulsf3>:
    1dfc:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <__mulsf3x>
    1e00:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__fp_round>
    1e04:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <__fp_pscA>
    1e08:	38 f0       	brcs	.+14     	; 0x1e18 <__mulsf3+0x1c>
    1e0a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__fp_pscB>
    1e0e:	20 f0       	brcs	.+8      	; 0x1e18 <__mulsf3+0x1c>
    1e10:	95 23       	and	r25, r21
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <__mulsf3+0x1c>
    1e14:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1e18:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_nan>
    1e1c:	11 24       	eor	r1, r1
    1e1e:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_szero>

00001e22 <__mulsf3x>:
    1e22:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_split3>
    1e26:	70 f3       	brcs	.-36     	; 0x1e04 <__mulsf3+0x8>

00001e28 <__mulsf3_pse>:
    1e28:	95 9f       	mul	r25, r21
    1e2a:	c1 f3       	breq	.-16     	; 0x1e1c <__mulsf3+0x20>
    1e2c:	95 0f       	add	r25, r21
    1e2e:	50 e0       	ldi	r21, 0x00	; 0
    1e30:	55 1f       	adc	r21, r21
    1e32:	62 9f       	mul	r22, r18
    1e34:	f0 01       	movw	r30, r0
    1e36:	72 9f       	mul	r23, r18
    1e38:	bb 27       	eor	r27, r27
    1e3a:	f0 0d       	add	r31, r0
    1e3c:	b1 1d       	adc	r27, r1
    1e3e:	63 9f       	mul	r22, r19
    1e40:	aa 27       	eor	r26, r26
    1e42:	f0 0d       	add	r31, r0
    1e44:	b1 1d       	adc	r27, r1
    1e46:	aa 1f       	adc	r26, r26
    1e48:	64 9f       	mul	r22, r20
    1e4a:	66 27       	eor	r22, r22
    1e4c:	b0 0d       	add	r27, r0
    1e4e:	a1 1d       	adc	r26, r1
    1e50:	66 1f       	adc	r22, r22
    1e52:	82 9f       	mul	r24, r18
    1e54:	22 27       	eor	r18, r18
    1e56:	b0 0d       	add	r27, r0
    1e58:	a1 1d       	adc	r26, r1
    1e5a:	62 1f       	adc	r22, r18
    1e5c:	73 9f       	mul	r23, r19
    1e5e:	b0 0d       	add	r27, r0
    1e60:	a1 1d       	adc	r26, r1
    1e62:	62 1f       	adc	r22, r18
    1e64:	83 9f       	mul	r24, r19
    1e66:	a0 0d       	add	r26, r0
    1e68:	61 1d       	adc	r22, r1
    1e6a:	22 1f       	adc	r18, r18
    1e6c:	74 9f       	mul	r23, r20
    1e6e:	33 27       	eor	r19, r19
    1e70:	a0 0d       	add	r26, r0
    1e72:	61 1d       	adc	r22, r1
    1e74:	23 1f       	adc	r18, r19
    1e76:	84 9f       	mul	r24, r20
    1e78:	60 0d       	add	r22, r0
    1e7a:	21 1d       	adc	r18, r1
    1e7c:	82 2f       	mov	r24, r18
    1e7e:	76 2f       	mov	r23, r22
    1e80:	6a 2f       	mov	r22, r26
    1e82:	11 24       	eor	r1, r1
    1e84:	9f 57       	subi	r25, 0x7F	; 127
    1e86:	50 40       	sbci	r21, 0x00	; 0
    1e88:	9a f0       	brmi	.+38     	; 0x1eb0 <__mulsf3_pse+0x88>
    1e8a:	f1 f0       	breq	.+60     	; 0x1ec8 <__mulsf3_pse+0xa0>
    1e8c:	88 23       	and	r24, r24
    1e8e:	4a f0       	brmi	.+18     	; 0x1ea2 <__mulsf3_pse+0x7a>
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	bb 1f       	adc	r27, r27
    1e96:	66 1f       	adc	r22, r22
    1e98:	77 1f       	adc	r23, r23
    1e9a:	88 1f       	adc	r24, r24
    1e9c:	91 50       	subi	r25, 0x01	; 1
    1e9e:	50 40       	sbci	r21, 0x00	; 0
    1ea0:	a9 f7       	brne	.-22     	; 0x1e8c <__mulsf3_pse+0x64>
    1ea2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ea4:	51 05       	cpc	r21, r1
    1ea6:	80 f0       	brcs	.+32     	; 0x1ec8 <__mulsf3_pse+0xa0>
    1ea8:	0c 94 ad 0e 	jmp	0x1d5a	; 0x1d5a <__fp_inf>
    1eac:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__fp_szero>
    1eb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1eb2:	e4 f3       	brlt	.-8      	; 0x1eac <__mulsf3_pse+0x84>
    1eb4:	98 3e       	cpi	r25, 0xE8	; 232
    1eb6:	d4 f3       	brlt	.-12     	; 0x1eac <__mulsf3_pse+0x84>
    1eb8:	86 95       	lsr	r24
    1eba:	77 95       	ror	r23
    1ebc:	67 95       	ror	r22
    1ebe:	b7 95       	ror	r27
    1ec0:	f7 95       	ror	r31
    1ec2:	e7 95       	ror	r30
    1ec4:	9f 5f       	subi	r25, 0xFF	; 255
    1ec6:	c1 f7       	brne	.-16     	; 0x1eb8 <__mulsf3_pse+0x90>
    1ec8:	fe 2b       	or	r31, r30
    1eca:	88 0f       	add	r24, r24
    1ecc:	91 1d       	adc	r25, r1
    1ece:	96 95       	lsr	r25
    1ed0:	87 95       	ror	r24
    1ed2:	97 f9       	bld	r25, 7
    1ed4:	08 95       	ret

00001ed6 <__divmodhi4>:
    1ed6:	97 fb       	bst	r25, 7
    1ed8:	07 2e       	mov	r0, r23
    1eda:	16 f4       	brtc	.+4      	; 0x1ee0 <__divmodhi4+0xa>
    1edc:	00 94       	com	r0
    1ede:	07 d0       	rcall	.+14     	; 0x1eee <__divmodhi4_neg1>
    1ee0:	77 fd       	sbrc	r23, 7
    1ee2:	09 d0       	rcall	.+18     	; 0x1ef6 <__divmodhi4_neg2>
    1ee4:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__udivmodhi4>
    1ee8:	07 fc       	sbrc	r0, 7
    1eea:	05 d0       	rcall	.+10     	; 0x1ef6 <__divmodhi4_neg2>
    1eec:	3e f4       	brtc	.+14     	; 0x1efc <__divmodhi4_exit>

00001eee <__divmodhi4_neg1>:
    1eee:	90 95       	com	r25
    1ef0:	81 95       	neg	r24
    1ef2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef4:	08 95       	ret

00001ef6 <__divmodhi4_neg2>:
    1ef6:	70 95       	com	r23
    1ef8:	61 95       	neg	r22
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255

00001efc <__divmodhi4_exit>:
    1efc:	08 95       	ret

00001efe <__udivmodsi4>:
    1efe:	a1 e2       	ldi	r26, 0x21	; 33
    1f00:	1a 2e       	mov	r1, r26
    1f02:	aa 1b       	sub	r26, r26
    1f04:	bb 1b       	sub	r27, r27
    1f06:	fd 01       	movw	r30, r26
    1f08:	0d c0       	rjmp	.+26     	; 0x1f24 <__udivmodsi4_ep>

00001f0a <__udivmodsi4_loop>:
    1f0a:	aa 1f       	adc	r26, r26
    1f0c:	bb 1f       	adc	r27, r27
    1f0e:	ee 1f       	adc	r30, r30
    1f10:	ff 1f       	adc	r31, r31
    1f12:	a2 17       	cp	r26, r18
    1f14:	b3 07       	cpc	r27, r19
    1f16:	e4 07       	cpc	r30, r20
    1f18:	f5 07       	cpc	r31, r21
    1f1a:	20 f0       	brcs	.+8      	; 0x1f24 <__udivmodsi4_ep>
    1f1c:	a2 1b       	sub	r26, r18
    1f1e:	b3 0b       	sbc	r27, r19
    1f20:	e4 0b       	sbc	r30, r20
    1f22:	f5 0b       	sbc	r31, r21

00001f24 <__udivmodsi4_ep>:
    1f24:	66 1f       	adc	r22, r22
    1f26:	77 1f       	adc	r23, r23
    1f28:	88 1f       	adc	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	1a 94       	dec	r1
    1f2e:	69 f7       	brne	.-38     	; 0x1f0a <__udivmodsi4_loop>
    1f30:	60 95       	com	r22
    1f32:	70 95       	com	r23
    1f34:	80 95       	com	r24
    1f36:	90 95       	com	r25
    1f38:	9b 01       	movw	r18, r22
    1f3a:	ac 01       	movw	r20, r24
    1f3c:	bd 01       	movw	r22, r26
    1f3e:	cf 01       	movw	r24, r30
    1f40:	08 95       	ret

00001f42 <__divmodsi4>:
    1f42:	05 2e       	mov	r0, r21
    1f44:	97 fb       	bst	r25, 7
    1f46:	1e f4       	brtc	.+6      	; 0x1f4e <__divmodsi4+0xc>
    1f48:	00 94       	com	r0
    1f4a:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <__negsi2>
    1f4e:	57 fd       	sbrc	r21, 7
    1f50:	07 d0       	rcall	.+14     	; 0x1f60 <__divmodsi4_neg2>
    1f52:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__udivmodsi4>
    1f56:	07 fc       	sbrc	r0, 7
    1f58:	03 d0       	rcall	.+6      	; 0x1f60 <__divmodsi4_neg2>
    1f5a:	4e f4       	brtc	.+18     	; 0x1f6e <__divmodsi4_exit>
    1f5c:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__negsi2>

00001f60 <__divmodsi4_neg2>:
    1f60:	50 95       	com	r21
    1f62:	40 95       	com	r20
    1f64:	30 95       	com	r19
    1f66:	21 95       	neg	r18
    1f68:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255

00001f6e <__divmodsi4_exit>:
    1f6e:	08 95       	ret

00001f70 <__negsi2>:
    1f70:	90 95       	com	r25
    1f72:	80 95       	com	r24
    1f74:	70 95       	com	r23
    1f76:	61 95       	neg	r22
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	08 95       	ret

00001f80 <__umulhisi3>:
    1f80:	a2 9f       	mul	r26, r18
    1f82:	b0 01       	movw	r22, r0
    1f84:	b3 9f       	mul	r27, r19
    1f86:	c0 01       	movw	r24, r0
    1f88:	a3 9f       	mul	r26, r19
    1f8a:	70 0d       	add	r23, r0
    1f8c:	81 1d       	adc	r24, r1
    1f8e:	11 24       	eor	r1, r1
    1f90:	91 1d       	adc	r25, r1
    1f92:	b2 9f       	mul	r27, r18
    1f94:	70 0d       	add	r23, r0
    1f96:	81 1d       	adc	r24, r1
    1f98:	11 24       	eor	r1, r1
    1f9a:	91 1d       	adc	r25, r1
    1f9c:	08 95       	ret

00001f9e <__udivmodhi4>:
    1f9e:	aa 1b       	sub	r26, r26
    1fa0:	bb 1b       	sub	r27, r27
    1fa2:	51 e1       	ldi	r21, 0x11	; 17
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <__udivmodhi4_ep>

00001fa6 <__udivmodhi4_loop>:
    1fa6:	aa 1f       	adc	r26, r26
    1fa8:	bb 1f       	adc	r27, r27
    1faa:	a6 17       	cp	r26, r22
    1fac:	b7 07       	cpc	r27, r23
    1fae:	10 f0       	brcs	.+4      	; 0x1fb4 <__udivmodhi4_ep>
    1fb0:	a6 1b       	sub	r26, r22
    1fb2:	b7 0b       	sbc	r27, r23

00001fb4 <__udivmodhi4_ep>:
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	5a 95       	dec	r21
    1fba:	a9 f7       	brne	.-22     	; 0x1fa6 <__udivmodhi4_loop>
    1fbc:	80 95       	com	r24
    1fbe:	90 95       	com	r25
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	08 95       	ret

00001fc6 <random_r>:
    1fc6:	8f 92       	push	r8
    1fc8:	9f 92       	push	r9
    1fca:	af 92       	push	r10
    1fcc:	bf 92       	push	r11
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	ec 01       	movw	r28, r24
    1fdc:	68 81       	ld	r22, Y
    1fde:	79 81       	ldd	r23, Y+1	; 0x01
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe4:	61 15       	cp	r22, r1
    1fe6:	71 05       	cpc	r23, r1
    1fe8:	81 05       	cpc	r24, r1
    1fea:	91 05       	cpc	r25, r1
    1fec:	21 f4       	brne	.+8      	; 0x1ff6 <random_r+0x30>
    1fee:	64 e2       	ldi	r22, 0x24	; 36
    1ff0:	79 ed       	ldi	r23, 0xD9	; 217
    1ff2:	8b e5       	ldi	r24, 0x5B	; 91
    1ff4:	97 e0       	ldi	r25, 0x07	; 7
    1ff6:	2d e1       	ldi	r18, 0x1D	; 29
    1ff8:	33 ef       	ldi	r19, 0xF3	; 243
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__divmodsi4>
    2002:	49 01       	movw	r8, r18
    2004:	5a 01       	movw	r10, r20
    2006:	9b 01       	movw	r18, r22
    2008:	ac 01       	movw	r20, r24
    200a:	a7 ea       	ldi	r26, 0xA7	; 167
    200c:	b1 e4       	ldi	r27, 0x41	; 65
    200e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__muluhisi3>
    2012:	6b 01       	movw	r12, r22
    2014:	7c 01       	movw	r14, r24
    2016:	ac ee       	ldi	r26, 0xEC	; 236
    2018:	b4 ef       	ldi	r27, 0xF4	; 244
    201a:	a5 01       	movw	r20, r10
    201c:	94 01       	movw	r18, r8
    201e:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulohisi3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8c 0d       	add	r24, r12
    2028:	9d 1d       	adc	r25, r13
    202a:	ae 1d       	adc	r26, r14
    202c:	bf 1d       	adc	r27, r15
    202e:	b7 ff       	sbrs	r27, 7
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <random_r+0x72>
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	a1 09       	sbc	r26, r1
    2036:	b0 48       	sbci	r27, 0x80	; 128
    2038:	88 83       	st	Y, r24
    203a:	99 83       	std	Y+1, r25	; 0x01
    203c:	aa 83       	std	Y+2, r26	; 0x02
    203e:	bb 83       	std	Y+3, r27	; 0x03
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	9f 77       	andi	r25, 0x7F	; 127
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	ff 90       	pop	r15
    204c:	ef 90       	pop	r14
    204e:	df 90       	pop	r13
    2050:	cf 90       	pop	r12
    2052:	bf 90       	pop	r11
    2054:	af 90       	pop	r10
    2056:	9f 90       	pop	r9
    2058:	8f 90       	pop	r8
    205a:	08 95       	ret

0000205c <random>:
    205c:	8f 92       	push	r8
    205e:	9f 92       	push	r9
    2060:	af 92       	push	r10
    2062:	bf 92       	push	r11
    2064:	cf 92       	push	r12
    2066:	df 92       	push	r13
    2068:	ef 92       	push	r14
    206a:	ff 92       	push	r15
    206c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    2070:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    2074:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    2078:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    207c:	61 15       	cp	r22, r1
    207e:	71 05       	cpc	r23, r1
    2080:	81 05       	cpc	r24, r1
    2082:	91 05       	cpc	r25, r1
    2084:	21 f4       	brne	.+8      	; 0x208e <random+0x32>
    2086:	64 e2       	ldi	r22, 0x24	; 36
    2088:	79 ed       	ldi	r23, 0xD9	; 217
    208a:	8b e5       	ldi	r24, 0x5B	; 91
    208c:	97 e0       	ldi	r25, 0x07	; 7
    208e:	2d e1       	ldi	r18, 0x1D	; 29
    2090:	33 ef       	ldi	r19, 0xF3	; 243
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__divmodsi4>
    209a:	49 01       	movw	r8, r18
    209c:	5a 01       	movw	r10, r20
    209e:	9b 01       	movw	r18, r22
    20a0:	ac 01       	movw	r20, r24
    20a2:	a7 ea       	ldi	r26, 0xA7	; 167
    20a4:	b1 e4       	ldi	r27, 0x41	; 65
    20a6:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__muluhisi3>
    20aa:	6b 01       	movw	r12, r22
    20ac:	7c 01       	movw	r14, r24
    20ae:	ac ee       	ldi	r26, 0xEC	; 236
    20b0:	b4 ef       	ldi	r27, 0xF4	; 244
    20b2:	a5 01       	movw	r20, r10
    20b4:	94 01       	movw	r18, r8
    20b6:	0e 94 88 13 	call	0x2710	; 0x2710 <__mulohisi3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8c 0d       	add	r24, r12
    20c0:	9d 1d       	adc	r25, r13
    20c2:	ae 1d       	adc	r26, r14
    20c4:	bf 1d       	adc	r27, r15
    20c6:	b7 ff       	sbrs	r27, 7
    20c8:	03 c0       	rjmp	.+6      	; 0x20d0 <random+0x74>
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	a1 09       	sbc	r26, r1
    20ce:	b0 48       	sbci	r27, 0x80	; 128
    20d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    20d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    20d8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    20dc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    20e0:	bc 01       	movw	r22, r24
    20e2:	cd 01       	movw	r24, r26
    20e4:	9f 77       	andi	r25, 0x7F	; 127
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	9f 90       	pop	r9
    20f4:	8f 90       	pop	r8
    20f6:	08 95       	ret

000020f8 <srandom>:
    20f8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    20fc:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    2100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    2104:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    2108:	08 95       	ret

0000210a <fgetc>:
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	ec 01       	movw	r28, r24
    2110:	2b 81       	ldd	r18, Y+3	; 0x03
    2112:	20 ff       	sbrs	r18, 0
    2114:	33 c0       	rjmp	.+102    	; 0x217c <fgetc+0x72>
    2116:	26 ff       	sbrs	r18, 6
    2118:	0a c0       	rjmp	.+20     	; 0x212e <fgetc+0x24>
    211a:	2f 7b       	andi	r18, 0xBF	; 191
    211c:	2b 83       	std	Y+3, r18	; 0x03
    211e:	8e 81       	ldd	r24, Y+6	; 0x06
    2120:	9f 81       	ldd	r25, Y+7	; 0x07
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	9f 83       	std	Y+7, r25	; 0x07
    2126:	8e 83       	std	Y+6, r24	; 0x06
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	29 c0       	rjmp	.+82     	; 0x2180 <fgetc+0x76>
    212e:	22 ff       	sbrs	r18, 2
    2130:	0f c0       	rjmp	.+30     	; 0x2150 <fgetc+0x46>
    2132:	e8 81       	ld	r30, Y
    2134:	f9 81       	ldd	r31, Y+1	; 0x01
    2136:	80 81       	ld	r24, Z
    2138:	08 2e       	mov	r0, r24
    213a:	00 0c       	add	r0, r0
    213c:	99 0b       	sbc	r25, r25
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	19 f4       	brne	.+6      	; 0x2148 <fgetc+0x3e>
    2142:	20 62       	ori	r18, 0x20	; 32
    2144:	2b 83       	std	Y+3, r18	; 0x03
    2146:	1a c0       	rjmp	.+52     	; 0x217c <fgetc+0x72>
    2148:	31 96       	adiw	r30, 0x01	; 1
    214a:	f9 83       	std	Y+1, r31	; 0x01
    214c:	e8 83       	st	Y, r30
    214e:	0e c0       	rjmp	.+28     	; 0x216c <fgetc+0x62>
    2150:	ea 85       	ldd	r30, Y+10	; 0x0a
    2152:	fb 85       	ldd	r31, Y+11	; 0x0b
    2154:	09 95       	icall
    2156:	97 ff       	sbrs	r25, 7
    2158:	09 c0       	rjmp	.+18     	; 0x216c <fgetc+0x62>
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	11 f0       	breq	.+4      	; 0x2164 <fgetc+0x5a>
    2160:	80 e2       	ldi	r24, 0x20	; 32
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <fgetc+0x5c>
    2164:	80 e1       	ldi	r24, 0x10	; 16
    2166:	82 2b       	or	r24, r18
    2168:	8b 83       	std	Y+3, r24	; 0x03
    216a:	08 c0       	rjmp	.+16     	; 0x217c <fgetc+0x72>
    216c:	2e 81       	ldd	r18, Y+6	; 0x06
    216e:	3f 81       	ldd	r19, Y+7	; 0x07
    2170:	2f 5f       	subi	r18, 0xFF	; 255
    2172:	3f 4f       	sbci	r19, 0xFF	; 255
    2174:	3f 83       	std	Y+7, r19	; 0x07
    2176:	2e 83       	std	Y+6, r18	; 0x06
    2178:	99 27       	eor	r25, r25
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <fgetc+0x76>
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	9f ef       	ldi	r25, 0xFF	; 255
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <printf_P>:
    2186:	a0 e0       	ldi	r26, 0x00	; 0
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	e9 ec       	ldi	r30, 0xC9	; 201
    218c:	f0 e1       	ldi	r31, 0x10	; 16
    218e:	0c 94 9b 13 	jmp	0x2736	; 0x2736 <__prologue_saves__+0x1c>
    2192:	ae 01       	movw	r20, r28
    2194:	49 5f       	subi	r20, 0xF9	; 249
    2196:	5f 4f       	sbci	r21, 0xFF	; 255
    2198:	da 01       	movw	r26, r20
    219a:	6d 91       	ld	r22, X+
    219c:	7d 91       	ld	r23, X+
    219e:	ad 01       	movw	r20, r26
    21a0:	0d e2       	ldi	r16, 0x2D	; 45
    21a2:	13 e0       	ldi	r17, 0x03	; 3
    21a4:	f8 01       	movw	r30, r16
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	dc 01       	movw	r26, r24
    21ac:	13 96       	adiw	r26, 0x03	; 3
    21ae:	2c 91       	ld	r18, X
    21b0:	13 97       	sbiw	r26, 0x03	; 3
    21b2:	28 60       	ori	r18, 0x08	; 8
    21b4:	13 96       	adiw	r26, 0x03	; 3
    21b6:	2c 93       	st	X, r18
    21b8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <vfprintf>
    21bc:	d8 01       	movw	r26, r16
    21be:	12 96       	adiw	r26, 0x02	; 2
    21c0:	ed 91       	ld	r30, X+
    21c2:	fc 91       	ld	r31, X
    21c4:	13 97       	sbiw	r26, 0x03	; 3
    21c6:	23 81       	ldd	r18, Z+3	; 0x03
    21c8:	27 7f       	andi	r18, 0xF7	; 247
    21ca:	23 83       	std	Z+3, r18	; 0x03
    21cc:	e4 e0       	ldi	r30, 0x04	; 4
    21ce:	0c 94 b7 13 	jmp	0x276e	; 0x276e <__epilogue_restores__+0x1c>

000021d2 <vfprintf>:
    21d2:	ab e0       	ldi	r26, 0x0B	; 11
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	ef ee       	ldi	r30, 0xEF	; 239
    21d8:	f0 e1       	ldi	r31, 0x10	; 16
    21da:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__prologue_saves__>
    21de:	6c 01       	movw	r12, r24
    21e0:	7b 01       	movw	r14, r22
    21e2:	8a 01       	movw	r16, r20
    21e4:	fc 01       	movw	r30, r24
    21e6:	17 82       	std	Z+7, r1	; 0x07
    21e8:	16 82       	std	Z+6, r1	; 0x06
    21ea:	83 81       	ldd	r24, Z+3	; 0x03
    21ec:	81 ff       	sbrs	r24, 1
    21ee:	cc c1       	rjmp	.+920    	; 0x2588 <vfprintf+0x3b6>
    21f0:	ce 01       	movw	r24, r28
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	3c 01       	movw	r6, r24
    21f6:	f6 01       	movw	r30, r12
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	f7 01       	movw	r30, r14
    21fc:	93 fd       	sbrc	r25, 3
    21fe:	85 91       	lpm	r24, Z+
    2200:	93 ff       	sbrs	r25, 3
    2202:	81 91       	ld	r24, Z+
    2204:	7f 01       	movw	r14, r30
    2206:	88 23       	and	r24, r24
    2208:	09 f4       	brne	.+2      	; 0x220c <vfprintf+0x3a>
    220a:	ba c1       	rjmp	.+884    	; 0x2580 <vfprintf+0x3ae>
    220c:	85 32       	cpi	r24, 0x25	; 37
    220e:	39 f4       	brne	.+14     	; 0x221e <vfprintf+0x4c>
    2210:	93 fd       	sbrc	r25, 3
    2212:	85 91       	lpm	r24, Z+
    2214:	93 ff       	sbrs	r25, 3
    2216:	81 91       	ld	r24, Z+
    2218:	7f 01       	movw	r14, r30
    221a:	85 32       	cpi	r24, 0x25	; 37
    221c:	29 f4       	brne	.+10     	; 0x2228 <vfprintf+0x56>
    221e:	b6 01       	movw	r22, r12
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <fputc>
    2226:	e7 cf       	rjmp	.-50     	; 0x21f6 <vfprintf+0x24>
    2228:	91 2c       	mov	r9, r1
    222a:	21 2c       	mov	r2, r1
    222c:	31 2c       	mov	r3, r1
    222e:	ff e1       	ldi	r31, 0x1F	; 31
    2230:	f3 15       	cp	r31, r3
    2232:	d8 f0       	brcs	.+54     	; 0x226a <vfprintf+0x98>
    2234:	8b 32       	cpi	r24, 0x2B	; 43
    2236:	79 f0       	breq	.+30     	; 0x2256 <vfprintf+0x84>
    2238:	38 f4       	brcc	.+14     	; 0x2248 <vfprintf+0x76>
    223a:	80 32       	cpi	r24, 0x20	; 32
    223c:	79 f0       	breq	.+30     	; 0x225c <vfprintf+0x8a>
    223e:	83 32       	cpi	r24, 0x23	; 35
    2240:	a1 f4       	brne	.+40     	; 0x226a <vfprintf+0x98>
    2242:	23 2d       	mov	r18, r3
    2244:	20 61       	ori	r18, 0x10	; 16
    2246:	1d c0       	rjmp	.+58     	; 0x2282 <vfprintf+0xb0>
    2248:	8d 32       	cpi	r24, 0x2D	; 45
    224a:	61 f0       	breq	.+24     	; 0x2264 <vfprintf+0x92>
    224c:	80 33       	cpi	r24, 0x30	; 48
    224e:	69 f4       	brne	.+26     	; 0x226a <vfprintf+0x98>
    2250:	23 2d       	mov	r18, r3
    2252:	21 60       	ori	r18, 0x01	; 1
    2254:	16 c0       	rjmp	.+44     	; 0x2282 <vfprintf+0xb0>
    2256:	83 2d       	mov	r24, r3
    2258:	82 60       	ori	r24, 0x02	; 2
    225a:	38 2e       	mov	r3, r24
    225c:	e3 2d       	mov	r30, r3
    225e:	e4 60       	ori	r30, 0x04	; 4
    2260:	3e 2e       	mov	r3, r30
    2262:	2a c0       	rjmp	.+84     	; 0x22b8 <vfprintf+0xe6>
    2264:	f3 2d       	mov	r31, r3
    2266:	f8 60       	ori	r31, 0x08	; 8
    2268:	1d c0       	rjmp	.+58     	; 0x22a4 <vfprintf+0xd2>
    226a:	37 fc       	sbrc	r3, 7
    226c:	2d c0       	rjmp	.+90     	; 0x22c8 <vfprintf+0xf6>
    226e:	20 ed       	ldi	r18, 0xD0	; 208
    2270:	28 0f       	add	r18, r24
    2272:	2a 30       	cpi	r18, 0x0A	; 10
    2274:	40 f0       	brcs	.+16     	; 0x2286 <vfprintf+0xb4>
    2276:	8e 32       	cpi	r24, 0x2E	; 46
    2278:	b9 f4       	brne	.+46     	; 0x22a8 <vfprintf+0xd6>
    227a:	36 fc       	sbrc	r3, 6
    227c:	81 c1       	rjmp	.+770    	; 0x2580 <vfprintf+0x3ae>
    227e:	23 2d       	mov	r18, r3
    2280:	20 64       	ori	r18, 0x40	; 64
    2282:	32 2e       	mov	r3, r18
    2284:	19 c0       	rjmp	.+50     	; 0x22b8 <vfprintf+0xe6>
    2286:	36 fe       	sbrs	r3, 6
    2288:	06 c0       	rjmp	.+12     	; 0x2296 <vfprintf+0xc4>
    228a:	8a e0       	ldi	r24, 0x0A	; 10
    228c:	98 9e       	mul	r9, r24
    228e:	20 0d       	add	r18, r0
    2290:	11 24       	eor	r1, r1
    2292:	92 2e       	mov	r9, r18
    2294:	11 c0       	rjmp	.+34     	; 0x22b8 <vfprintf+0xe6>
    2296:	ea e0       	ldi	r30, 0x0A	; 10
    2298:	2e 9e       	mul	r2, r30
    229a:	20 0d       	add	r18, r0
    229c:	11 24       	eor	r1, r1
    229e:	22 2e       	mov	r2, r18
    22a0:	f3 2d       	mov	r31, r3
    22a2:	f0 62       	ori	r31, 0x20	; 32
    22a4:	3f 2e       	mov	r3, r31
    22a6:	08 c0       	rjmp	.+16     	; 0x22b8 <vfprintf+0xe6>
    22a8:	8c 36       	cpi	r24, 0x6C	; 108
    22aa:	21 f4       	brne	.+8      	; 0x22b4 <vfprintf+0xe2>
    22ac:	83 2d       	mov	r24, r3
    22ae:	80 68       	ori	r24, 0x80	; 128
    22b0:	38 2e       	mov	r3, r24
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <vfprintf+0xe6>
    22b4:	88 36       	cpi	r24, 0x68	; 104
    22b6:	41 f4       	brne	.+16     	; 0x22c8 <vfprintf+0xf6>
    22b8:	f7 01       	movw	r30, r14
    22ba:	93 fd       	sbrc	r25, 3
    22bc:	85 91       	lpm	r24, Z+
    22be:	93 ff       	sbrs	r25, 3
    22c0:	81 91       	ld	r24, Z+
    22c2:	7f 01       	movw	r14, r30
    22c4:	81 11       	cpse	r24, r1
    22c6:	b3 cf       	rjmp	.-154    	; 0x222e <vfprintf+0x5c>
    22c8:	98 2f       	mov	r25, r24
    22ca:	9f 7d       	andi	r25, 0xDF	; 223
    22cc:	95 54       	subi	r25, 0x45	; 69
    22ce:	93 30       	cpi	r25, 0x03	; 3
    22d0:	28 f4       	brcc	.+10     	; 0x22dc <vfprintf+0x10a>
    22d2:	0c 5f       	subi	r16, 0xFC	; 252
    22d4:	1f 4f       	sbci	r17, 0xFF	; 255
    22d6:	9f e3       	ldi	r25, 0x3F	; 63
    22d8:	99 83       	std	Y+1, r25	; 0x01
    22da:	0d c0       	rjmp	.+26     	; 0x22f6 <vfprintf+0x124>
    22dc:	83 36       	cpi	r24, 0x63	; 99
    22de:	31 f0       	breq	.+12     	; 0x22ec <vfprintf+0x11a>
    22e0:	83 37       	cpi	r24, 0x73	; 115
    22e2:	71 f0       	breq	.+28     	; 0x2300 <vfprintf+0x12e>
    22e4:	83 35       	cpi	r24, 0x53	; 83
    22e6:	09 f0       	breq	.+2      	; 0x22ea <vfprintf+0x118>
    22e8:	59 c0       	rjmp	.+178    	; 0x239c <vfprintf+0x1ca>
    22ea:	21 c0       	rjmp	.+66     	; 0x232e <vfprintf+0x15c>
    22ec:	f8 01       	movw	r30, r16
    22ee:	80 81       	ld	r24, Z
    22f0:	89 83       	std	Y+1, r24	; 0x01
    22f2:	0e 5f       	subi	r16, 0xFE	; 254
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	88 24       	eor	r8, r8
    22f8:	83 94       	inc	r8
    22fa:	91 2c       	mov	r9, r1
    22fc:	53 01       	movw	r10, r6
    22fe:	13 c0       	rjmp	.+38     	; 0x2326 <vfprintf+0x154>
    2300:	28 01       	movw	r4, r16
    2302:	f2 e0       	ldi	r31, 0x02	; 2
    2304:	4f 0e       	add	r4, r31
    2306:	51 1c       	adc	r5, r1
    2308:	f8 01       	movw	r30, r16
    230a:	a0 80       	ld	r10, Z
    230c:	b1 80       	ldd	r11, Z+1	; 0x01
    230e:	36 fe       	sbrs	r3, 6
    2310:	03 c0       	rjmp	.+6      	; 0x2318 <vfprintf+0x146>
    2312:	69 2d       	mov	r22, r9
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	02 c0       	rjmp	.+4      	; 0x231c <vfprintf+0x14a>
    2318:	6f ef       	ldi	r22, 0xFF	; 255
    231a:	7f ef       	ldi	r23, 0xFF	; 255
    231c:	c5 01       	movw	r24, r10
    231e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <strnlen>
    2322:	4c 01       	movw	r8, r24
    2324:	82 01       	movw	r16, r4
    2326:	f3 2d       	mov	r31, r3
    2328:	ff 77       	andi	r31, 0x7F	; 127
    232a:	3f 2e       	mov	r3, r31
    232c:	16 c0       	rjmp	.+44     	; 0x235a <vfprintf+0x188>
    232e:	28 01       	movw	r4, r16
    2330:	22 e0       	ldi	r18, 0x02	; 2
    2332:	42 0e       	add	r4, r18
    2334:	51 1c       	adc	r5, r1
    2336:	f8 01       	movw	r30, r16
    2338:	a0 80       	ld	r10, Z
    233a:	b1 80       	ldd	r11, Z+1	; 0x01
    233c:	36 fe       	sbrs	r3, 6
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <vfprintf+0x174>
    2340:	69 2d       	mov	r22, r9
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	02 c0       	rjmp	.+4      	; 0x234a <vfprintf+0x178>
    2346:	6f ef       	ldi	r22, 0xFF	; 255
    2348:	7f ef       	ldi	r23, 0xFF	; 255
    234a:	c5 01       	movw	r24, r10
    234c:	0e 94 ca 12 	call	0x2594	; 0x2594 <strnlen_P>
    2350:	4c 01       	movw	r8, r24
    2352:	f3 2d       	mov	r31, r3
    2354:	f0 68       	ori	r31, 0x80	; 128
    2356:	3f 2e       	mov	r3, r31
    2358:	82 01       	movw	r16, r4
    235a:	33 fc       	sbrc	r3, 3
    235c:	1b c0       	rjmp	.+54     	; 0x2394 <vfprintf+0x1c2>
    235e:	82 2d       	mov	r24, r2
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	88 16       	cp	r8, r24
    2364:	99 06       	cpc	r9, r25
    2366:	b0 f4       	brcc	.+44     	; 0x2394 <vfprintf+0x1c2>
    2368:	b6 01       	movw	r22, r12
    236a:	80 e2       	ldi	r24, 0x20	; 32
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <fputc>
    2372:	2a 94       	dec	r2
    2374:	f4 cf       	rjmp	.-24     	; 0x235e <vfprintf+0x18c>
    2376:	f5 01       	movw	r30, r10
    2378:	37 fc       	sbrc	r3, 7
    237a:	85 91       	lpm	r24, Z+
    237c:	37 fe       	sbrs	r3, 7
    237e:	81 91       	ld	r24, Z+
    2380:	5f 01       	movw	r10, r30
    2382:	b6 01       	movw	r22, r12
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <fputc>
    238a:	21 10       	cpse	r2, r1
    238c:	2a 94       	dec	r2
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	82 1a       	sub	r8, r18
    2392:	91 08       	sbc	r9, r1
    2394:	81 14       	cp	r8, r1
    2396:	91 04       	cpc	r9, r1
    2398:	71 f7       	brne	.-36     	; 0x2376 <vfprintf+0x1a4>
    239a:	e8 c0       	rjmp	.+464    	; 0x256c <vfprintf+0x39a>
    239c:	84 36       	cpi	r24, 0x64	; 100
    239e:	11 f0       	breq	.+4      	; 0x23a4 <vfprintf+0x1d2>
    23a0:	89 36       	cpi	r24, 0x69	; 105
    23a2:	41 f5       	brne	.+80     	; 0x23f4 <vfprintf+0x222>
    23a4:	f8 01       	movw	r30, r16
    23a6:	37 fe       	sbrs	r3, 7
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <vfprintf+0x1e6>
    23aa:	60 81       	ld	r22, Z
    23ac:	71 81       	ldd	r23, Z+1	; 0x01
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	0c 5f       	subi	r16, 0xFC	; 252
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	08 c0       	rjmp	.+16     	; 0x23c8 <vfprintf+0x1f6>
    23b8:	60 81       	ld	r22, Z
    23ba:	71 81       	ldd	r23, Z+1	; 0x01
    23bc:	07 2e       	mov	r0, r23
    23be:	00 0c       	add	r0, r0
    23c0:	88 0b       	sbc	r24, r24
    23c2:	99 0b       	sbc	r25, r25
    23c4:	0e 5f       	subi	r16, 0xFE	; 254
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	f3 2d       	mov	r31, r3
    23ca:	ff 76       	andi	r31, 0x6F	; 111
    23cc:	3f 2e       	mov	r3, r31
    23ce:	97 ff       	sbrs	r25, 7
    23d0:	09 c0       	rjmp	.+18     	; 0x23e4 <vfprintf+0x212>
    23d2:	90 95       	com	r25
    23d4:	80 95       	com	r24
    23d6:	70 95       	com	r23
    23d8:	61 95       	neg	r22
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	8f 4f       	sbci	r24, 0xFF	; 255
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	f0 68       	ori	r31, 0x80	; 128
    23e2:	3f 2e       	mov	r3, r31
    23e4:	2a e0       	ldi	r18, 0x0A	; 10
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	a3 01       	movw	r20, r6
    23ea:	0e 94 1c 13 	call	0x2638	; 0x2638 <__ultoa_invert>
    23ee:	88 2e       	mov	r8, r24
    23f0:	86 18       	sub	r8, r6
    23f2:	45 c0       	rjmp	.+138    	; 0x247e <vfprintf+0x2ac>
    23f4:	85 37       	cpi	r24, 0x75	; 117
    23f6:	31 f4       	brne	.+12     	; 0x2404 <vfprintf+0x232>
    23f8:	23 2d       	mov	r18, r3
    23fa:	2f 7e       	andi	r18, 0xEF	; 239
    23fc:	b2 2e       	mov	r11, r18
    23fe:	2a e0       	ldi	r18, 0x0A	; 10
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	25 c0       	rjmp	.+74     	; 0x244e <vfprintf+0x27c>
    2404:	93 2d       	mov	r25, r3
    2406:	99 7f       	andi	r25, 0xF9	; 249
    2408:	b9 2e       	mov	r11, r25
    240a:	8f 36       	cpi	r24, 0x6F	; 111
    240c:	c1 f0       	breq	.+48     	; 0x243e <vfprintf+0x26c>
    240e:	18 f4       	brcc	.+6      	; 0x2416 <vfprintf+0x244>
    2410:	88 35       	cpi	r24, 0x58	; 88
    2412:	79 f0       	breq	.+30     	; 0x2432 <vfprintf+0x260>
    2414:	b5 c0       	rjmp	.+362    	; 0x2580 <vfprintf+0x3ae>
    2416:	80 37       	cpi	r24, 0x70	; 112
    2418:	19 f0       	breq	.+6      	; 0x2420 <vfprintf+0x24e>
    241a:	88 37       	cpi	r24, 0x78	; 120
    241c:	21 f0       	breq	.+8      	; 0x2426 <vfprintf+0x254>
    241e:	b0 c0       	rjmp	.+352    	; 0x2580 <vfprintf+0x3ae>
    2420:	e9 2f       	mov	r30, r25
    2422:	e0 61       	ori	r30, 0x10	; 16
    2424:	be 2e       	mov	r11, r30
    2426:	b4 fe       	sbrs	r11, 4
    2428:	0d c0       	rjmp	.+26     	; 0x2444 <vfprintf+0x272>
    242a:	fb 2d       	mov	r31, r11
    242c:	f4 60       	ori	r31, 0x04	; 4
    242e:	bf 2e       	mov	r11, r31
    2430:	09 c0       	rjmp	.+18     	; 0x2444 <vfprintf+0x272>
    2432:	34 fe       	sbrs	r3, 4
    2434:	0a c0       	rjmp	.+20     	; 0x244a <vfprintf+0x278>
    2436:	29 2f       	mov	r18, r25
    2438:	26 60       	ori	r18, 0x06	; 6
    243a:	b2 2e       	mov	r11, r18
    243c:	06 c0       	rjmp	.+12     	; 0x244a <vfprintf+0x278>
    243e:	28 e0       	ldi	r18, 0x08	; 8
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	05 c0       	rjmp	.+10     	; 0x244e <vfprintf+0x27c>
    2444:	20 e1       	ldi	r18, 0x10	; 16
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	02 c0       	rjmp	.+4      	; 0x244e <vfprintf+0x27c>
    244a:	20 e1       	ldi	r18, 0x10	; 16
    244c:	32 e0       	ldi	r19, 0x02	; 2
    244e:	f8 01       	movw	r30, r16
    2450:	b7 fe       	sbrs	r11, 7
    2452:	07 c0       	rjmp	.+14     	; 0x2462 <vfprintf+0x290>
    2454:	60 81       	ld	r22, Z
    2456:	71 81       	ldd	r23, Z+1	; 0x01
    2458:	82 81       	ldd	r24, Z+2	; 0x02
    245a:	93 81       	ldd	r25, Z+3	; 0x03
    245c:	0c 5f       	subi	r16, 0xFC	; 252
    245e:	1f 4f       	sbci	r17, 0xFF	; 255
    2460:	06 c0       	rjmp	.+12     	; 0x246e <vfprintf+0x29c>
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 5f       	subi	r16, 0xFE	; 254
    246c:	1f 4f       	sbci	r17, 0xFF	; 255
    246e:	a3 01       	movw	r20, r6
    2470:	0e 94 1c 13 	call	0x2638	; 0x2638 <__ultoa_invert>
    2474:	88 2e       	mov	r8, r24
    2476:	86 18       	sub	r8, r6
    2478:	fb 2d       	mov	r31, r11
    247a:	ff 77       	andi	r31, 0x7F	; 127
    247c:	3f 2e       	mov	r3, r31
    247e:	36 fe       	sbrs	r3, 6
    2480:	0d c0       	rjmp	.+26     	; 0x249c <vfprintf+0x2ca>
    2482:	23 2d       	mov	r18, r3
    2484:	2e 7f       	andi	r18, 0xFE	; 254
    2486:	a2 2e       	mov	r10, r18
    2488:	89 14       	cp	r8, r9
    248a:	58 f4       	brcc	.+22     	; 0x24a2 <vfprintf+0x2d0>
    248c:	34 fe       	sbrs	r3, 4
    248e:	0b c0       	rjmp	.+22     	; 0x24a6 <vfprintf+0x2d4>
    2490:	32 fc       	sbrc	r3, 2
    2492:	09 c0       	rjmp	.+18     	; 0x24a6 <vfprintf+0x2d4>
    2494:	83 2d       	mov	r24, r3
    2496:	8e 7e       	andi	r24, 0xEE	; 238
    2498:	a8 2e       	mov	r10, r24
    249a:	05 c0       	rjmp	.+10     	; 0x24a6 <vfprintf+0x2d4>
    249c:	b8 2c       	mov	r11, r8
    249e:	a3 2c       	mov	r10, r3
    24a0:	03 c0       	rjmp	.+6      	; 0x24a8 <vfprintf+0x2d6>
    24a2:	b8 2c       	mov	r11, r8
    24a4:	01 c0       	rjmp	.+2      	; 0x24a8 <vfprintf+0x2d6>
    24a6:	b9 2c       	mov	r11, r9
    24a8:	a4 fe       	sbrs	r10, 4
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <vfprintf+0x2f8>
    24ac:	fe 01       	movw	r30, r28
    24ae:	e8 0d       	add	r30, r8
    24b0:	f1 1d       	adc	r31, r1
    24b2:	80 81       	ld	r24, Z
    24b4:	80 33       	cpi	r24, 0x30	; 48
    24b6:	21 f4       	brne	.+8      	; 0x24c0 <vfprintf+0x2ee>
    24b8:	9a 2d       	mov	r25, r10
    24ba:	99 7e       	andi	r25, 0xE9	; 233
    24bc:	a9 2e       	mov	r10, r25
    24be:	09 c0       	rjmp	.+18     	; 0x24d2 <vfprintf+0x300>
    24c0:	a2 fe       	sbrs	r10, 2
    24c2:	06 c0       	rjmp	.+12     	; 0x24d0 <vfprintf+0x2fe>
    24c4:	b3 94       	inc	r11
    24c6:	b3 94       	inc	r11
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <vfprintf+0x300>
    24ca:	8a 2d       	mov	r24, r10
    24cc:	86 78       	andi	r24, 0x86	; 134
    24ce:	09 f0       	breq	.+2      	; 0x24d2 <vfprintf+0x300>
    24d0:	b3 94       	inc	r11
    24d2:	a3 fc       	sbrc	r10, 3
    24d4:	11 c0       	rjmp	.+34     	; 0x24f8 <vfprintf+0x326>
    24d6:	a0 fe       	sbrs	r10, 0
    24d8:	06 c0       	rjmp	.+12     	; 0x24e6 <vfprintf+0x314>
    24da:	b2 14       	cp	r11, r2
    24dc:	88 f4       	brcc	.+34     	; 0x2500 <vfprintf+0x32e>
    24de:	28 0c       	add	r2, r8
    24e0:	92 2c       	mov	r9, r2
    24e2:	9b 18       	sub	r9, r11
    24e4:	0e c0       	rjmp	.+28     	; 0x2502 <vfprintf+0x330>
    24e6:	b2 14       	cp	r11, r2
    24e8:	60 f4       	brcc	.+24     	; 0x2502 <vfprintf+0x330>
    24ea:	b6 01       	movw	r22, r12
    24ec:	80 e2       	ldi	r24, 0x20	; 32
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <fputc>
    24f4:	b3 94       	inc	r11
    24f6:	f7 cf       	rjmp	.-18     	; 0x24e6 <vfprintf+0x314>
    24f8:	b2 14       	cp	r11, r2
    24fa:	18 f4       	brcc	.+6      	; 0x2502 <vfprintf+0x330>
    24fc:	2b 18       	sub	r2, r11
    24fe:	02 c0       	rjmp	.+4      	; 0x2504 <vfprintf+0x332>
    2500:	98 2c       	mov	r9, r8
    2502:	21 2c       	mov	r2, r1
    2504:	a4 fe       	sbrs	r10, 4
    2506:	10 c0       	rjmp	.+32     	; 0x2528 <vfprintf+0x356>
    2508:	b6 01       	movw	r22, r12
    250a:	80 e3       	ldi	r24, 0x30	; 48
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <fputc>
    2512:	a2 fe       	sbrs	r10, 2
    2514:	17 c0       	rjmp	.+46     	; 0x2544 <vfprintf+0x372>
    2516:	a1 fc       	sbrc	r10, 1
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <vfprintf+0x34e>
    251a:	88 e7       	ldi	r24, 0x78	; 120
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <vfprintf+0x352>
    2520:	88 e5       	ldi	r24, 0x58	; 88
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	b6 01       	movw	r22, r12
    2526:	0c c0       	rjmp	.+24     	; 0x2540 <vfprintf+0x36e>
    2528:	8a 2d       	mov	r24, r10
    252a:	86 78       	andi	r24, 0x86	; 134
    252c:	59 f0       	breq	.+22     	; 0x2544 <vfprintf+0x372>
    252e:	a1 fe       	sbrs	r10, 1
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <vfprintf+0x364>
    2532:	8b e2       	ldi	r24, 0x2B	; 43
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <vfprintf+0x366>
    2536:	80 e2       	ldi	r24, 0x20	; 32
    2538:	a7 fc       	sbrc	r10, 7
    253a:	8d e2       	ldi	r24, 0x2D	; 45
    253c:	b6 01       	movw	r22, r12
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <fputc>
    2544:	89 14       	cp	r8, r9
    2546:	38 f4       	brcc	.+14     	; 0x2556 <vfprintf+0x384>
    2548:	b6 01       	movw	r22, r12
    254a:	80 e3       	ldi	r24, 0x30	; 48
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <fputc>
    2552:	9a 94       	dec	r9
    2554:	f7 cf       	rjmp	.-18     	; 0x2544 <vfprintf+0x372>
    2556:	8a 94       	dec	r8
    2558:	f3 01       	movw	r30, r6
    255a:	e8 0d       	add	r30, r8
    255c:	f1 1d       	adc	r31, r1
    255e:	80 81       	ld	r24, Z
    2560:	b6 01       	movw	r22, r12
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <fputc>
    2568:	81 10       	cpse	r8, r1
    256a:	f5 cf       	rjmp	.-22     	; 0x2556 <vfprintf+0x384>
    256c:	22 20       	and	r2, r2
    256e:	09 f4       	brne	.+2      	; 0x2572 <vfprintf+0x3a0>
    2570:	42 ce       	rjmp	.-892    	; 0x21f6 <vfprintf+0x24>
    2572:	b6 01       	movw	r22, r12
    2574:	80 e2       	ldi	r24, 0x20	; 32
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <fputc>
    257c:	2a 94       	dec	r2
    257e:	f6 cf       	rjmp	.-20     	; 0x256c <vfprintf+0x39a>
    2580:	f6 01       	movw	r30, r12
    2582:	86 81       	ldd	r24, Z+6	; 0x06
    2584:	97 81       	ldd	r25, Z+7	; 0x07
    2586:	02 c0       	rjmp	.+4      	; 0x258c <vfprintf+0x3ba>
    2588:	8f ef       	ldi	r24, 0xFF	; 255
    258a:	9f ef       	ldi	r25, 0xFF	; 255
    258c:	2b 96       	adiw	r28, 0x0b	; 11
    258e:	e2 e1       	ldi	r30, 0x12	; 18
    2590:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__epilogue_restores__>

00002594 <strnlen_P>:
    2594:	fc 01       	movw	r30, r24
    2596:	05 90       	lpm	r0, Z+
    2598:	61 50       	subi	r22, 0x01	; 1
    259a:	70 40       	sbci	r23, 0x00	; 0
    259c:	01 10       	cpse	r0, r1
    259e:	d8 f7       	brcc	.-10     	; 0x2596 <strnlen_P+0x2>
    25a0:	80 95       	com	r24
    25a2:	90 95       	com	r25
    25a4:	8e 0f       	add	r24, r30
    25a6:	9f 1f       	adc	r25, r31
    25a8:	08 95       	ret

000025aa <strnlen>:
    25aa:	fc 01       	movw	r30, r24
    25ac:	61 50       	subi	r22, 0x01	; 1
    25ae:	70 40       	sbci	r23, 0x00	; 0
    25b0:	01 90       	ld	r0, Z+
    25b2:	01 10       	cpse	r0, r1
    25b4:	d8 f7       	brcc	.-10     	; 0x25ac <strnlen+0x2>
    25b6:	80 95       	com	r24
    25b8:	90 95       	com	r25
    25ba:	8e 0f       	add	r24, r30
    25bc:	9f 1f       	adc	r25, r31
    25be:	08 95       	ret

000025c0 <fputc>:
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	fb 01       	movw	r30, r22
    25ca:	23 81       	ldd	r18, Z+3	; 0x03
    25cc:	21 fd       	sbrc	r18, 1
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <fputc+0x16>
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	9f ef       	ldi	r25, 0xFF	; 255
    25d4:	2c c0       	rjmp	.+88     	; 0x262e <fputc+0x6e>
    25d6:	22 ff       	sbrs	r18, 2
    25d8:	16 c0       	rjmp	.+44     	; 0x2606 <fputc+0x46>
    25da:	46 81       	ldd	r20, Z+6	; 0x06
    25dc:	57 81       	ldd	r21, Z+7	; 0x07
    25de:	24 81       	ldd	r18, Z+4	; 0x04
    25e0:	35 81       	ldd	r19, Z+5	; 0x05
    25e2:	42 17       	cp	r20, r18
    25e4:	53 07       	cpc	r21, r19
    25e6:	44 f4       	brge	.+16     	; 0x25f8 <fputc+0x38>
    25e8:	a0 81       	ld	r26, Z
    25ea:	b1 81       	ldd	r27, Z+1	; 0x01
    25ec:	9d 01       	movw	r18, r26
    25ee:	2f 5f       	subi	r18, 0xFF	; 255
    25f0:	3f 4f       	sbci	r19, 0xFF	; 255
    25f2:	31 83       	std	Z+1, r19	; 0x01
    25f4:	20 83       	st	Z, r18
    25f6:	8c 93       	st	X, r24
    25f8:	26 81       	ldd	r18, Z+6	; 0x06
    25fa:	37 81       	ldd	r19, Z+7	; 0x07
    25fc:	2f 5f       	subi	r18, 0xFF	; 255
    25fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2600:	37 83       	std	Z+7, r19	; 0x07
    2602:	26 83       	std	Z+6, r18	; 0x06
    2604:	14 c0       	rjmp	.+40     	; 0x262e <fputc+0x6e>
    2606:	8b 01       	movw	r16, r22
    2608:	ec 01       	movw	r28, r24
    260a:	fb 01       	movw	r30, r22
    260c:	00 84       	ldd	r0, Z+8	; 0x08
    260e:	f1 85       	ldd	r31, Z+9	; 0x09
    2610:	e0 2d       	mov	r30, r0
    2612:	09 95       	icall
    2614:	89 2b       	or	r24, r25
    2616:	e1 f6       	brne	.-72     	; 0x25d0 <fputc+0x10>
    2618:	d8 01       	movw	r26, r16
    261a:	16 96       	adiw	r26, 0x06	; 6
    261c:	8d 91       	ld	r24, X+
    261e:	9c 91       	ld	r25, X
    2620:	17 97       	sbiw	r26, 0x07	; 7
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	17 96       	adiw	r26, 0x07	; 7
    2626:	9c 93       	st	X, r25
    2628:	8e 93       	st	-X, r24
    262a:	16 97       	sbiw	r26, 0x06	; 6
    262c:	ce 01       	movw	r24, r28
    262e:	df 91       	pop	r29
    2630:	cf 91       	pop	r28
    2632:	1f 91       	pop	r17
    2634:	0f 91       	pop	r16
    2636:	08 95       	ret

00002638 <__ultoa_invert>:
    2638:	fa 01       	movw	r30, r20
    263a:	aa 27       	eor	r26, r26
    263c:	28 30       	cpi	r18, 0x08	; 8
    263e:	51 f1       	breq	.+84     	; 0x2694 <__ultoa_invert+0x5c>
    2640:	20 31       	cpi	r18, 0x10	; 16
    2642:	81 f1       	breq	.+96     	; 0x26a4 <__ultoa_invert+0x6c>
    2644:	e8 94       	clt
    2646:	6f 93       	push	r22
    2648:	6e 7f       	andi	r22, 0xFE	; 254
    264a:	6e 5f       	subi	r22, 0xFE	; 254
    264c:	7f 4f       	sbci	r23, 0xFF	; 255
    264e:	8f 4f       	sbci	r24, 0xFF	; 255
    2650:	9f 4f       	sbci	r25, 0xFF	; 255
    2652:	af 4f       	sbci	r26, 0xFF	; 255
    2654:	b1 e0       	ldi	r27, 0x01	; 1
    2656:	3e d0       	rcall	.+124    	; 0x26d4 <__ultoa_invert+0x9c>
    2658:	b4 e0       	ldi	r27, 0x04	; 4
    265a:	3c d0       	rcall	.+120    	; 0x26d4 <__ultoa_invert+0x9c>
    265c:	67 0f       	add	r22, r23
    265e:	78 1f       	adc	r23, r24
    2660:	89 1f       	adc	r24, r25
    2662:	9a 1f       	adc	r25, r26
    2664:	a1 1d       	adc	r26, r1
    2666:	68 0f       	add	r22, r24
    2668:	79 1f       	adc	r23, r25
    266a:	8a 1f       	adc	r24, r26
    266c:	91 1d       	adc	r25, r1
    266e:	a1 1d       	adc	r26, r1
    2670:	6a 0f       	add	r22, r26
    2672:	71 1d       	adc	r23, r1
    2674:	81 1d       	adc	r24, r1
    2676:	91 1d       	adc	r25, r1
    2678:	a1 1d       	adc	r26, r1
    267a:	20 d0       	rcall	.+64     	; 0x26bc <__ultoa_invert+0x84>
    267c:	09 f4       	brne	.+2      	; 0x2680 <__ultoa_invert+0x48>
    267e:	68 94       	set
    2680:	3f 91       	pop	r19
    2682:	2a e0       	ldi	r18, 0x0A	; 10
    2684:	26 9f       	mul	r18, r22
    2686:	11 24       	eor	r1, r1
    2688:	30 19       	sub	r19, r0
    268a:	30 5d       	subi	r19, 0xD0	; 208
    268c:	31 93       	st	Z+, r19
    268e:	de f6       	brtc	.-74     	; 0x2646 <__ultoa_invert+0xe>
    2690:	cf 01       	movw	r24, r30
    2692:	08 95       	ret
    2694:	46 2f       	mov	r20, r22
    2696:	47 70       	andi	r20, 0x07	; 7
    2698:	40 5d       	subi	r20, 0xD0	; 208
    269a:	41 93       	st	Z+, r20
    269c:	b3 e0       	ldi	r27, 0x03	; 3
    269e:	0f d0       	rcall	.+30     	; 0x26be <__ultoa_invert+0x86>
    26a0:	c9 f7       	brne	.-14     	; 0x2694 <__ultoa_invert+0x5c>
    26a2:	f6 cf       	rjmp	.-20     	; 0x2690 <__ultoa_invert+0x58>
    26a4:	46 2f       	mov	r20, r22
    26a6:	4f 70       	andi	r20, 0x0F	; 15
    26a8:	40 5d       	subi	r20, 0xD0	; 208
    26aa:	4a 33       	cpi	r20, 0x3A	; 58
    26ac:	18 f0       	brcs	.+6      	; 0x26b4 <__ultoa_invert+0x7c>
    26ae:	49 5d       	subi	r20, 0xD9	; 217
    26b0:	31 fd       	sbrc	r19, 1
    26b2:	40 52       	subi	r20, 0x20	; 32
    26b4:	41 93       	st	Z+, r20
    26b6:	02 d0       	rcall	.+4      	; 0x26bc <__ultoa_invert+0x84>
    26b8:	a9 f7       	brne	.-22     	; 0x26a4 <__ultoa_invert+0x6c>
    26ba:	ea cf       	rjmp	.-44     	; 0x2690 <__ultoa_invert+0x58>
    26bc:	b4 e0       	ldi	r27, 0x04	; 4
    26be:	a6 95       	lsr	r26
    26c0:	97 95       	ror	r25
    26c2:	87 95       	ror	r24
    26c4:	77 95       	ror	r23
    26c6:	67 95       	ror	r22
    26c8:	ba 95       	dec	r27
    26ca:	c9 f7       	brne	.-14     	; 0x26be <__ultoa_invert+0x86>
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	61 05       	cpc	r22, r1
    26d0:	71 05       	cpc	r23, r1
    26d2:	08 95       	ret
    26d4:	9b 01       	movw	r18, r22
    26d6:	ac 01       	movw	r20, r24
    26d8:	0a 2e       	mov	r0, r26
    26da:	06 94       	lsr	r0
    26dc:	57 95       	ror	r21
    26de:	47 95       	ror	r20
    26e0:	37 95       	ror	r19
    26e2:	27 95       	ror	r18
    26e4:	ba 95       	dec	r27
    26e6:	c9 f7       	brne	.-14     	; 0x26da <__ultoa_invert+0xa2>
    26e8:	62 0f       	add	r22, r18
    26ea:	73 1f       	adc	r23, r19
    26ec:	84 1f       	adc	r24, r20
    26ee:	95 1f       	adc	r25, r21
    26f0:	a0 1d       	adc	r26, r0
    26f2:	08 95       	ret

000026f4 <__muluhisi3>:
    26f4:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    26f8:	a5 9f       	mul	r26, r21
    26fa:	90 0d       	add	r25, r0
    26fc:	b4 9f       	mul	r27, r20
    26fe:	90 0d       	add	r25, r0
    2700:	a4 9f       	mul	r26, r20
    2702:	80 0d       	add	r24, r0
    2704:	91 1d       	adc	r25, r1
    2706:	11 24       	eor	r1, r1
    2708:	08 95       	ret

0000270a <__mulshisi3>:
    270a:	b7 ff       	sbrs	r27, 7
    270c:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__muluhisi3>

00002710 <__mulohisi3>:
    2710:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__muluhisi3>
    2714:	82 1b       	sub	r24, r18
    2716:	93 0b       	sbc	r25, r19
    2718:	08 95       	ret

0000271a <__prologue_saves__>:
    271a:	2f 92       	push	r2
    271c:	3f 92       	push	r3
    271e:	4f 92       	push	r4
    2720:	5f 92       	push	r5
    2722:	6f 92       	push	r6
    2724:	7f 92       	push	r7
    2726:	8f 92       	push	r8
    2728:	9f 92       	push	r9
    272a:	af 92       	push	r10
    272c:	bf 92       	push	r11
    272e:	cf 92       	push	r12
    2730:	df 92       	push	r13
    2732:	ef 92       	push	r14
    2734:	ff 92       	push	r15
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	cf 93       	push	r28
    273c:	df 93       	push	r29
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	ca 1b       	sub	r28, r26
    2744:	db 0b       	sbc	r29, r27
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	de bf       	out	0x3e, r29	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	cd bf       	out	0x3d, r28	; 61
    2750:	09 94       	ijmp

00002752 <__epilogue_restores__>:
    2752:	2a 88       	ldd	r2, Y+18	; 0x12
    2754:	39 88       	ldd	r3, Y+17	; 0x11
    2756:	48 88       	ldd	r4, Y+16	; 0x10
    2758:	5f 84       	ldd	r5, Y+15	; 0x0f
    275a:	6e 84       	ldd	r6, Y+14	; 0x0e
    275c:	7d 84       	ldd	r7, Y+13	; 0x0d
    275e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2760:	9b 84       	ldd	r9, Y+11	; 0x0b
    2762:	aa 84       	ldd	r10, Y+10	; 0x0a
    2764:	b9 84       	ldd	r11, Y+9	; 0x09
    2766:	c8 84       	ldd	r12, Y+8	; 0x08
    2768:	df 80       	ldd	r13, Y+7	; 0x07
    276a:	ee 80       	ldd	r14, Y+6	; 0x06
    276c:	fd 80       	ldd	r15, Y+5	; 0x05
    276e:	0c 81       	ldd	r16, Y+4	; 0x04
    2770:	1b 81       	ldd	r17, Y+3	; 0x03
    2772:	aa 81       	ldd	r26, Y+2	; 0x02
    2774:	b9 81       	ldd	r27, Y+1	; 0x01
    2776:	ce 0f       	add	r28, r30
    2778:	d1 1d       	adc	r29, r1
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	ed 01       	movw	r28, r26
    2786:	08 95       	ret

00002788 <_exit>:
    2788:	f8 94       	cli

0000278a <__stop_program>:
    278a:	ff cf       	rjmp	.-2      	; 0x278a <__stop_program>
