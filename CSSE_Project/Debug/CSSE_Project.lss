
CSSE_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00002a78  00002b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  008001da  008001da  00002be6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002be6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00002c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ef8  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017ba  00000000  00000000  00006f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023b0  00000000  00000000  0000873e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b6c  00000000  00000000  0000aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000119b  00000000  00000000  0000b65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002cc0  00000000  00000000  0000c7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  0000f4b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__ctors_end>
       4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
       8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
       c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      10:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      14:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_5>
      18:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      1c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      20:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      24:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      28:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      2c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      30:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      34:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      38:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      3c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      40:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__vector_16>
      44:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      48:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      4c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      50:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__vector_20>
      54:	0c 94 54 0d 	jmp	0x1aa8	; 0x1aa8 <__vector_21>
      58:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      5c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      60:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      64:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      68:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      6c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      70:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      74:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      78:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	59 6f       	ori	r21, 0xF9	; 249
      7e:	75 20       	and	r7, r5
      80:	68 61       	ori	r22, 0x18	; 24
      82:	76 65       	ori	r23, 0x56	; 86
      84:	20 25       	eor	r18, r0
      86:	6c 75       	andi	r22, 0x5C	; 92
      88:	20 6c       	ori	r18, 0xC0	; 192
      8a:	69 76       	andi	r22, 0x69	; 105
      8c:	65 73       	andi	r22, 0x35	; 53
      8e:	20 72       	andi	r18, 0x20	; 32
      90:	65 6d       	ori	r22, 0xD5	; 213
      92:	61 69       	ori	r22, 0x91	; 145
      94:	6e 69       	ori	r22, 0x9E	; 158
      96:	6e 67       	ori	r22, 0x7E	; 126
      98:	2e 00       	.word	0x002e	; ????

0000009a <__c.2419>:
      9a:	53 63 6f 72 65 3a 20 25 6c 75 00                    Score: %lu.

000000a5 <__c.2333>:
      a5:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      b5:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000c3 <__c.2331>:
      c3:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000cd <__c.2307>:
      cd:	59 6f 75 20 68 61 76 65 20 25 6c 75 20 6c 69 76     You have %lu liv
      dd:	65 73 20 72 65 6d 61 69 6e 69 6e 67 2e 00           es remaining..

000000eb <__c.2305>:
      eb:	53 63 6f 72 65 3a 20 25 6c 75 00                    Score: %lu.

000000f6 <__c.2303>:
      f6:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

00000100 <__c.2294>:
     100:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
     110:	6f 6a 65 63 74 20 62 79 20 4d 61 74 74 68 65 77     oject by Matthew
     120:	20 42 75 72 74 6f 6e 00                              Burton.

00000128 <__c.2292>:
     128:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

00000132 <numbers>:
     132:	9d 01 9a 01 96 01 92 01 8e 01 8a 01 86 01 82 01     ................
     142:	7e 01 7a 01                                         ~.z.

00000146 <letters>:
     146:	0c 02 08 02 04 02 00 02 fc 01 f8 01 f4 01 f0 01     ................
     156:	ed 01 e9 01 e5 01 e1 01 dc 01 d8 01 d4 01 d0 01     ................
     166:	cb 01 c7 01 c3 01 be 01 ba 01 b5 01 b0 01 ab 01     ................
     176:	a6 01 a1 01                                         ....

0000017a <cols_9>:
     17a:	64 92 92 7d                                         d..}

0000017e <cols_8>:
     17e:	6c 92 92 6d                                         l..m

00000182 <cols_7>:
     182:	80 9e a0 c1                                         ....

00000186 <cols_6>:
     186:	7c 92 92 4d                                         |..M

0000018a <cols_5>:
     18a:	e4 a2 a2 9d                                         ....

0000018e <cols_4>:
     18e:	18 28 48 ff                                         .(H.

00000192 <cols_3>:
     192:	44 92 92 6d                                         D..m

00000196 <cols_2>:
     196:	46 8a 92 63                                         F..c

0000019a <cols_1>:
     19a:	42 fe 03                                            B..

0000019d <cols_0>:
     19d:	7c 92 a2 7d                                         |..}

000001a1 <cols_Z>:
     1a1:	86 8a 92 a2 c3                                      .....

000001a6 <cols_Y>:
     1a6:	e0 10 0e 10 e1                                      .....

000001ab <cols_X>:
     1ab:	c6 28 10 28 c7                                      .(.(.

000001b0 <cols_W>:
     1b0:	fc 02 1c 02 fd                                      .....

000001b5 <cols_V>:
     1b5:	f8 04 02 04 f9                                      .....

000001ba <cols_U>:
     1ba:	fc 02 02 fd                                         ....

000001be <cols_T>:
     1be:	80 80 fe 80 81                                      .....

000001c3 <cols_S>:
     1c3:	64 92 92 4d                                         d..M

000001c7 <cols_R>:
     1c7:	fe 90 98 67                                         ...g

000001cb <cols_Q>:
     1cb:	7c 82 8a 7c 03                                      |..|.

000001d0 <cols_P>:
     1d0:	fe 90 90 61                                         ...a

000001d4 <cols_O>:
     1d4:	7c 82 82 7d                                         |..}

000001d8 <cols_N>:
     1d8:	fe 20 10 ff                                         . ..

000001dc <cols_M>:
     1dc:	fe 40 30 40 ff                                      .@0@.

000001e1 <cols_L>:
     1e1:	fe 02 02 03                                         ....

000001e5 <cols_K>:
     1e5:	fe 10 28 c7                                         ..(.

000001e9 <cols_J>:
     1e9:	04 02 02 fd                                         ....

000001ed <cols_I>:
     1ed:	82 fe 83                                            ...

000001f0 <cols_H>:
     1f0:	fe 10 10 ff                                         ....

000001f4 <cols_G>:
     1f4:	7c 82 92 5d                                         |..]

000001f8 <cols_F>:
     1f8:	fe 90 90 81                                         ....

000001fc <cols_E>:
     1fc:	fe 92 92 83                                         ....

00000200 <cols_D>:
     200:	fe 82 82 7d                                         ...}

00000204 <cols_C>:
     204:	7c 82 82 45                                         |..E

00000208 <cols_B>:
     208:	fe 92 92 6d                                         ...m

0000020c <cols_A>:
     20c:	7e 90 90 7f                                         ~...

00000210 <__c.2040>:
     210:	1b 5b 32 4a 00                                      .[2J.

00000215 <__c.2025>:
     215:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

0000021e <__ctors_end>:
     21e:	11 24       	eor	r1, r1
     220:	1f be       	out	0x3f, r1	; 63
     222:	cf ef       	ldi	r28, 0xFF	; 255
     224:	d8 e0       	ldi	r29, 0x08	; 8
     226:	de bf       	out	0x3e, r29	; 62
     228:	cd bf       	out	0x3d, r28	; 61

0000022a <__do_copy_data>:
     22a:	11 e0       	ldi	r17, 0x01	; 1
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b1 e0       	ldi	r27, 0x01	; 1
     230:	e8 e7       	ldi	r30, 0x78	; 120
     232:	fa e2       	ldi	r31, 0x2A	; 42
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x10>
     236:	05 90       	lpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	aa 3d       	cpi	r26, 0xDA	; 218
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0xc>

00000240 <__do_clear_bss>:
     240:	23 e0       	ldi	r18, 0x03	; 3
     242:	aa ed       	ldi	r26, 0xDA	; 218
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	a5 35       	cpi	r26, 0x55	; 85
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>
     250:	0e 94 98 0b 	call	0x1730	; 0x1730 <main>
     254:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <_exit>

00000258 <__bad_interrupt>:
     258:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025c <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     25c:	e8 e6       	ldi	r30, 0x68	; 104
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	82 60       	ori	r24, 0x02	; 2
     264:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     266:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     268:	ec e6       	ldi	r30, 0x6C	; 108
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     272:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
     276:	08 95       	ret

00000278 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     278:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     27c:	18 16       	cp	r1, r24
     27e:	3c f5       	brge	.+78     	; 0x2ce <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     280:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     284:	6f b7       	in	r22, 0x3f	; 63
		cli();
     286:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     288:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <__data_end>
     28c:	92 30       	cpi	r25, 0x02	; 2
     28e:	b4 f0       	brlt	.+44     	; 0x2bc <button_pushed+0x44>
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     296:	f9 01       	movw	r30, r18
     298:	e5 52       	subi	r30, 0x25	; 37
     29a:	fe 4f       	sbci	r31, 0xFE	; 254
     29c:	40 81       	ld	r20, Z
     29e:	f9 01       	movw	r30, r18
     2a0:	e6 52       	subi	r30, 0x26	; 38
     2a2:	fe 4f       	sbci	r31, 0xFE	; 254
     2a4:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2a6:	9f 5f       	subi	r25, 0xFF	; 255
     2a8:	29 2f       	mov	r18, r25
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 91 da 01 	lds	r20, 0x01DA	; 0x8001da <__data_end>
     2b0:	04 2e       	mov	r0, r20
     2b2:	00 0c       	add	r0, r0
     2b4:	55 0b       	sbc	r21, r21
     2b6:	24 17       	cp	r18, r20
     2b8:	35 07       	cpc	r19, r21
     2ba:	6c f3       	brlt	.-38     	; 0x296 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     2bc:	90 91 da 01 	lds	r25, 0x01DA	; 0x8001da <__data_end>
     2c0:	91 50       	subi	r25, 0x01	; 1
     2c2:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <__data_end>
		
		if(interrupts_were_enabled) {
     2c6:	66 23       	and	r22, r22
     2c8:	1c f4       	brge	.+6      	; 0x2d0 <button_pushed+0x58>
			// Turn them back on again
			sei();
     2ca:	78 94       	sei
     2cc:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     2d0:	08 95       	ret

000002d2 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	2f 93       	push	r18
     2de:	3f 93       	push	r19
     2e0:	4f 93       	push	r20
     2e2:	5f 93       	push	r21
     2e4:	6f 93       	push	r22
     2e6:	7f 93       	push	r23
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	ef 93       	push	r30
     2ee:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2f0:	43 b1       	in	r20, 0x03	; 3
     2f2:	4f 70       	andi	r20, 0x0F	; 15
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     2f8:	64 2f       	mov	r22, r20
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <__data_end>
     300:	24 30       	cpi	r18, 0x04	; 4
     302:	04 f5       	brge	.+64     	; 0x344 <__vector_5+0x72>
     304:	9b 01       	movw	r18, r22
     306:	08 2e       	mov	r0, r24
     308:	02 c0       	rjmp	.+4      	; 0x30e <__vector_5+0x3c>
     30a:	35 95       	asr	r19
     30c:	27 95       	ror	r18
     30e:	0a 94       	dec	r0
     310:	e2 f7       	brpl	.-8      	; 0x30a <__vector_5+0x38>
     312:	20 ff       	sbrs	r18, 0
     314:	17 c0       	rjmp	.+46     	; 0x344 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     316:	20 91 df 01 	lds	r18, 0x01DF	; 0x8001df <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	08 2e       	mov	r0, r24
     31e:	02 c0       	rjmp	.+4      	; 0x324 <__vector_5+0x52>
     320:	35 95       	asr	r19
     322:	27 95       	ror	r18
     324:	0a 94       	dec	r0
     326:	e2 f7       	brpl	.-8      	; 0x320 <__vector_5+0x4e>
     328:	20 fd       	sbrc	r18, 0
     32a:	0c c0       	rjmp	.+24     	; 0x344 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     32c:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <__data_end>
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	2e 0f       	add	r18, r30
     334:	20 93 da 01 	sts	0x01DA, r18	; 0x8001da <__data_end>
     338:	0e 2e       	mov	r0, r30
     33a:	00 0c       	add	r0, r0
     33c:	ff 0b       	sbc	r31, r31
     33e:	e5 52       	subi	r30, 0x25	; 37
     340:	fe 4f       	sbci	r31, 0xFE	; 254
     342:	80 83       	st	Z, r24
     344:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     346:	84 30       	cpi	r24, 0x04	; 4
     348:	91 05       	cpc	r25, r1
     34a:	c1 f6       	brne	.-80     	; 0x2fc <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     34c:	40 93 df 01 	sts	0x01DF, r20	; 0x8001df <last_button_state>
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	9f 91       	pop	r25
     356:	8f 91       	pop	r24
     358:	7f 91       	pop	r23
     35a:	6f 91       	pop	r22
     35c:	5f 91       	pop	r21
     35e:	4f 91       	pop	r20
     360:	3f 91       	pop	r19
     362:	2f 91       	pop	r18
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <asteroid_at>:
// Check whether there is an asteroid at a given position.
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     36e:	20 e1       	ldi	r18, 0x10	; 16
     370:	82 9f       	mul	r24, r18
     372:	c0 01       	movw	r24, r0
     374:	11 24       	eor	r1, r1
     376:	6f 70       	andi	r22, 0x0F	; 15
     378:	86 2b       	or	r24, r22
	for(i=0; i < numAsteroids; i++) {
     37a:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <numAsteroids>
     37e:	04 2e       	mov	r0, r20
     380:	00 0c       	add	r0, r0
     382:	55 0b       	sbc	r21, r21
     384:	14 16       	cp	r1, r20
     386:	15 06       	cpc	r1, r21
     388:	c4 f4       	brge	.+48     	; 0x3ba <asteroid_at+0x4c>
		if(asteroids[i] == positionToCheck) {
     38a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <asteroids>
     38e:	89 17       	cp	r24, r25
     390:	49 f0       	breq	.+18     	; 0x3a4 <asteroid_at+0x36>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0a c0       	rjmp	.+20     	; 0x3aa <asteroid_at+0x3c>
     396:	f9 01       	movw	r30, r18
     398:	e0 5f       	subi	r30, 0xF0	; 240
     39a:	fd 4f       	sbci	r31, 0xFD	; 253
     39c:	20 81       	ld	r18, Z
     39e:	82 13       	cpse	r24, r18
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <asteroid_at+0x3c>
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <asteroid_at+0x38>
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     3a4:	90 e0       	ldi	r25, 0x00	; 0
		if(asteroids[i] == positionToCheck) {
			// Asteroid i is at the given position
			return i;
     3a6:	89 2f       	mov	r24, r25
     3a8:	08 95       	ret
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     3aa:	9f 5f       	subi	r25, 0xFF	; 255
     3ac:	29 2f       	mov	r18, r25
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	24 17       	cp	r18, r20
     3b2:	35 07       	cpc	r19, r21
     3b4:	84 f3       	brlt	.-32     	; 0x396 <asteroid_at+0x28>
			// Asteroid i is at the given position
			return i;
		}
	}
	// No match was found - no asteroid at the given position
	return -1;
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	08 95       	ret
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
}
     3bc:	08 95       	ret

000003be <redraw_base>:
	redraw_all_asteroids();	
	redraw_all_projectiles();
}


static void redraw_base(uint8_t colour){
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	18 2f       	mov	r17, r24
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition + 1; x++) {
     3c6:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <basePosition>
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	89 0f       	add	r24, r25
     3ce:	48 2f       	mov	r20, r24
     3d0:	08 2e       	mov	r0, r24
     3d2:	00 0c       	add	r0, r0
     3d4:	55 0b       	sbc	r21, r21
     3d6:	29 2f       	mov	r18, r25
     3d8:	09 2e       	mov	r0, r25
     3da:	00 0c       	add	r0, r0
     3dc:	33 0b       	sbc	r19, r19
     3de:	2f 5f       	subi	r18, 0xFF	; 255
     3e0:	3f 4f       	sbci	r19, 0xFF	; 255
     3e2:	24 17       	cp	r18, r20
     3e4:	35 07       	cpc	r19, r21
     3e6:	e4 f0       	brlt	.+56     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3e8:	d8 e0       	ldi	r29, 0x08	; 8
     3ea:	d9 1b       	sub	r29, r25
     3ec:	c8 2f       	mov	r28, r24
		if (x >= 0 && x < FIELD_WIDTH) {
     3ee:	88 30       	cpi	r24, 0x08	; 8
     3f0:	28 f4       	brcc	.+10     	; 0x3fc <redraw_base+0x3e>
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
     3f2:	41 2f       	mov	r20, r17
     3f4:	6d 2f       	mov	r22, r29
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <ledmatrix_update_pixel>
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	8c 0f       	add	r24, r28


static void redraw_base(uint8_t colour){
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition + 1; x++) {
     400:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <basePosition>
     404:	d1 50       	subi	r29, 0x01	; 1
     406:	48 2f       	mov	r20, r24
     408:	08 2e       	mov	r0, r24
     40a:	00 0c       	add	r0, r0
     40c:	55 0b       	sbc	r21, r21
     40e:	29 2f       	mov	r18, r25
     410:	09 2e       	mov	r0, r25
     412:	00 0c       	add	r0, r0
     414:	33 0b       	sbc	r19, r19
     416:	2f 5f       	subi	r18, 0xFF	; 255
     418:	3f 4f       	sbci	r19, 0xFF	; 255
     41a:	24 17       	cp	r18, r20
     41c:	35 07       	cpc	r19, r21
     41e:	34 f7       	brge	.-52     	; 0x3ec <redraw_base+0x2e>
		if (x >= 0 && x < FIELD_WIDTH) {
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
     420:	67 e0       	ldi	r22, 0x07	; 7
     422:	69 1b       	sub	r22, r25
     424:	41 2f       	mov	r20, r17
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <ledmatrix_update_pixel>
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	08 95       	ret

00000434 <redraw_asteroid>:
}


static void redraw_asteroid(uint8_t asteroidNumber, uint8_t colour) {
	uint8_t asteroidPosn;
	if(asteroidNumber < numAsteroids) {
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <numAsteroids>
     43a:	02 2e       	mov	r0, r18
     43c:	00 0c       	add	r0, r0
     43e:	33 0b       	sbc	r19, r19
     440:	82 17       	cp	r24, r18
     442:	93 07       	cpc	r25, r19
     444:	6c f4       	brge	.+26     	; 0x460 <redraw_asteroid+0x2c>
     446:	46 2f       	mov	r20, r22
		asteroidPosn = asteroids[asteroidNumber];
     448:	fc 01       	movw	r30, r24
     44a:	e0 5f       	subi	r30, 0xF0	; 240
     44c:	fd 4f       	sbci	r31, 0xFD	; 253
     44e:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(asteroidPosn), colour);
     450:	98 2f       	mov	r25, r24
     452:	92 95       	swap	r25
     454:	9f 70       	andi	r25, 0x0F	; 15
     456:	67 e0       	ldi	r22, 0x07	; 7
     458:	69 1b       	sub	r22, r25
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <ledmatrix_update_pixel>
     460:	08 95       	ret

00000462 <remove_asteroid>:
}

/* Remove asteroid with the given index number (from 0 to
** numAsteroids - 1).
*/
static void remove_asteroid(int8_t asteroidNumber) {
     462:	cf 93       	push	r28
	if(asteroidNumber < 0 || asteroidNumber >= numAsteroids) {
     464:	88 23       	and	r24, r24
     466:	4c f1       	brlt	.+82     	; 0x4ba <remove_asteroid+0x58>
     468:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <numAsteroids>
     46c:	89 17       	cp	r24, r25
     46e:	2c f5       	brge	.+74     	; 0x4ba <remove_asteroid+0x58>
     470:	c8 2f       	mov	r28, r24
		// Invalid index - do nothing
		return;
	}
	
	// Remove the asteroid from the display
	redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
	
	if(asteroidNumber < numAsteroids - 1) {
     478:	8c 2f       	mov	r24, r28
     47a:	cc 0f       	add	r28, r28
     47c:	99 0b       	sbc	r25, r25
     47e:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <numAsteroids>
     482:	24 2f       	mov	r18, r20
     484:	04 2e       	mov	r0, r20
     486:	00 0c       	add	r0, r0
     488:	33 0b       	sbc	r19, r19
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	31 09       	sbc	r19, r1
     48e:	82 17       	cp	r24, r18
     490:	93 07       	cpc	r25, r19
     492:	84 f4       	brge	.+32     	; 0x4b4 <remove_asteroid+0x52>
		// Asteroid is not the last one in the list
		// - move the last one in the list to this position
		asteroids[asteroidNumber] = asteroids[numAsteroids - 1];
     494:	f9 01       	movw	r30, r18
     496:	e0 5f       	subi	r30, 0xF0	; 240
     498:	fd 4f       	sbci	r31, 0xFD	; 253
     49a:	50 81       	ld	r21, Z
     49c:	fc 01       	movw	r30, r24
     49e:	e0 5f       	subi	r30, 0xF0	; 240
     4a0:	fd 4f       	sbci	r31, 0xFD	; 253
     4a2:	50 83       	st	Z, r21
		asteroid_speeds[asteroidNumber] = asteroid_speeds[numAsteroids - 1];
     4a4:	f9 01       	movw	r30, r18
     4a6:	ea 50       	subi	r30, 0x0A	; 10
     4a8:	fe 4f       	sbci	r31, 0xFE	; 254
     4aa:	20 81       	ld	r18, Z
     4ac:	fc 01       	movw	r30, r24
     4ae:	ea 50       	subi	r30, 0x0A	; 10
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	20 83       	st	Z, r18
	}
	// Last position in asteroids array is no longer used
	numAsteroids--;
     4b4:	41 50       	subi	r20, 0x01	; 1
     4b6:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <numAsteroids>
}
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <redraw_projectile>:

static void redraw_projectile(uint8_t projectileNumber, uint8_t colour) {
	uint8_t projectilePosn;
	
	// Check projectileNumber is valid - ignore otherwise
	if(projectileNumber < numProjectiles) {
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <numProjectiles>
     4c4:	02 2e       	mov	r0, r18
     4c6:	00 0c       	add	r0, r0
     4c8:	33 0b       	sbc	r19, r19
     4ca:	82 17       	cp	r24, r18
     4cc:	93 07       	cpc	r25, r19
     4ce:	6c f4       	brge	.+26     	; 0x4ea <redraw_projectile+0x2c>
     4d0:	46 2f       	mov	r20, r22
		projectilePosn = projectiles[projectileNumber];
     4d2:	fc 01       	movw	r30, r24
     4d4:	e5 5f       	subi	r30, 0xF5	; 245
     4d6:	fd 4f       	sbci	r31, 0xFD	; 253
     4d8:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(projectilePosn), colour);
     4da:	98 2f       	mov	r25, r24
     4dc:	92 95       	swap	r25
     4de:	9f 70       	andi	r25, 0x0F	; 15
     4e0:	67 e0       	ldi	r22, 0x07	; 7
     4e2:	69 1b       	sub	r22, r25
     4e4:	8f 70       	andi	r24, 0x0F	; 15
     4e6:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <ledmatrix_update_pixel>
     4ea:	08 95       	ret

000004ec <remove_projectile>:
}


// Remove projectile with the given projectile number (from 0 to
// numProjectiles - 1).
static void remove_projectile(int8_t projectileNumber) {	
     4ec:	cf 93       	push	r28
	if(projectileNumber < 0 || projectileNumber >= numProjectiles) {
     4ee:	88 23       	and	r24, r24
     4f0:	24 f1       	brlt	.+72     	; 0x53a <remove_projectile+0x4e>
     4f2:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <numProjectiles>
     4f6:	89 17       	cp	r24, r25
     4f8:	04 f5       	brge	.+64     	; 0x53a <remove_projectile+0x4e>
     4fa:	c8 2f       	mov	r28, r24
		// Invalid index - do nothing 
		return;
	}
	
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	0e 94 5f 02 	call	0x4be	; 0x4be <redraw_projectile>
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	8c 0f       	add	r24, r28
     506:	28 2f       	mov	r18, r24
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	60 91 0f 02 	lds	r22, 0x020F	; 0x80020f <numProjectiles>
     50e:	46 2f       	mov	r20, r22
     510:	06 2e       	mov	r0, r22
     512:	00 0c       	add	r0, r0
     514:	55 0b       	sbc	r21, r21
     516:	24 17       	cp	r18, r20
     518:	35 07       	cpc	r19, r21
     51a:	64 f4       	brge	.+24     	; 0x534 <remove_projectile+0x48>
		projectiles[i-1] = projectiles[i];
     51c:	f9 01       	movw	r30, r18
     51e:	e5 5f       	subi	r30, 0xF5	; 245
     520:	fd 4f       	sbci	r31, 0xFD	; 253
     522:	90 81       	ld	r25, Z
     524:	31 97       	sbiw	r30, 0x01	; 1
     526:	90 83       	st	Z, r25
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	28 2f       	mov	r18, r24
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	24 17       	cp	r18, r20
     530:	35 07       	cpc	r19, r21
     532:	a4 f3       	brlt	.-24     	; 0x51c <remove_projectile+0x30>
		projectiles[i-1] = projectiles[i];
	}
	// Update projectile count - have one fewer projectiles now.
	numProjectiles--;
     534:	61 50       	subi	r22, 0x01	; 1
     536:	60 93 0f 02 	sts	0x020F, r22	; 0x80020f <numProjectiles>
}
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <redraw_hit_base>:
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
}


static void redraw_hit_base(void) {
     53e:	4f 92       	push	r4
     540:	5f 92       	push	r5
     542:	6f 92       	push	r6
     544:	7f 92       	push	r7
     546:	8f 92       	push	r8
     548:	9f 92       	push	r9
     54a:	af 92       	push	r10
     54c:	bf 92       	push	r11
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	00 d0       	rcall	.+0      	; 0x55c <redraw_hit_base+0x1e>
     55c:	00 d0       	rcall	.+0      	; 0x55e <redraw_hit_base+0x20>
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
	// Write a new timer function to handle this, if you don't want to use sound.
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
     562:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <get_current_time>
     566:	69 83       	std	Y+1, r22	; 0x01
     568:	7a 83       	std	Y+2, r23	; 0x02
     56a:	8b 83       	std	Y+3, r24	; 0x03
     56c:	9c 83       	std	Y+4, r25	; 0x04
	uint32_t current_time = start_time;
	uint32_t flicker_time = start_time;
	init_sound();
     56e:	0e 94 83 08 	call	0x1106	; 0x1106 <init_sound>
static void redraw_hit_base(void) {
	// Write a new timer function to handle this, if you don't want to use sound.
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
	uint32_t current_time = start_time;
	uint32_t flicker_time = start_time;
     572:	89 80       	ldd	r8, Y+1	; 0x01
     574:	9a 80       	ldd	r9, Y+2	; 0x02
     576:	ab 80       	ldd	r10, Y+3	; 0x03
     578:	bc 80       	ldd	r11, Y+4	; 0x04

static void redraw_hit_base(void) {
	// Write a new timer function to handle this, if you don't want to use sound.
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
	uint32_t current_time = start_time;
     57a:	75 01       	movw	r14, r10
     57c:	64 01       	movw	r12, r8
	uint32_t flicker_time = start_time;
	init_sound();
	while(current_time < start_time + 1000) {
     57e:	24 01       	movw	r4, r8
     580:	35 01       	movw	r6, r10
     582:	88 ee       	ldi	r24, 0xE8	; 232
     584:	48 0e       	add	r4, r24
     586:	83 e0       	ldi	r24, 0x03	; 3
     588:	58 1e       	adc	r5, r24
     58a:	61 1c       	adc	r6, r1
     58c:	71 1c       	adc	r7, r1
     58e:	36 c0       	rjmp	.+108    	; 0x5fc <redraw_hit_base+0xbe>
		random_sound();
     590:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <random_sound>
		display_data(current_time);
     594:	c7 01       	movw	r24, r14
     596:	b6 01       	movw	r22, r12
     598:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <display_data>
		current_time = get_current_time();
     59c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <get_current_time>
     5a0:	6b 01       	movw	r12, r22
     5a2:	7c 01       	movw	r14, r24
		if (current_time == flicker_time + 250) {
     5a4:	d5 01       	movw	r26, r10
     5a6:	c4 01       	movw	r24, r8
     5a8:	86 50       	subi	r24, 0x06	; 6
     5aa:	9f 4f       	sbci	r25, 0xFF	; 255
     5ac:	af 4f       	sbci	r26, 0xFF	; 255
     5ae:	bf 4f       	sbci	r27, 0xFF	; 255
     5b0:	c8 16       	cp	r12, r24
     5b2:	d9 06       	cpc	r13, r25
     5b4:	ea 06       	cpc	r14, r26
     5b6:	fb 06       	cpc	r15, r27
     5b8:	19 f4       	brne	.+6      	; 0x5c0 <redraw_hit_base+0x82>
			redraw_base(COLOUR_BLACK);
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
		} 
		if (current_time == flicker_time + 500) {
     5c0:	d5 01       	movw	r26, r10
     5c2:	c4 01       	movw	r24, r8
     5c4:	8c 50       	subi	r24, 0x0C	; 12
     5c6:	9e 4f       	sbci	r25, 0xFE	; 254
     5c8:	af 4f       	sbci	r26, 0xFF	; 255
     5ca:	bf 4f       	sbci	r27, 0xFF	; 255
     5cc:	c8 16       	cp	r12, r24
     5ce:	d9 06       	cpc	r13, r25
     5d0:	ea 06       	cpc	r14, r26
     5d2:	fb 06       	cpc	r15, r27
     5d4:	19 f4       	brne	.+6      	; 0x5dc <redraw_hit_base+0x9e>
			redraw_base(COLOUR_PROJECTILE);
     5d6:	8f e0       	ldi	r24, 0x0F	; 15
     5d8:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
		}
		if (current_time == flicker_time + 750) {
     5dc:	d5 01       	movw	r26, r10
     5de:	c4 01       	movw	r24, r8
     5e0:	82 51       	subi	r24, 0x12	; 18
     5e2:	9d 4f       	sbci	r25, 0xFD	; 253
     5e4:	af 4f       	sbci	r26, 0xFF	; 255
     5e6:	bf 4f       	sbci	r27, 0xFF	; 255
     5e8:	c8 16       	cp	r12, r24
     5ea:	d9 06       	cpc	r13, r25
     5ec:	ea 06       	cpc	r14, r26
     5ee:	fb 06       	cpc	r15, r27
     5f0:	29 f4       	brne	.+10     	; 0x5fc <redraw_hit_base+0xbe>
			redraw_base(COLOUR_GREEN);
     5f2:	80 ef       	ldi	r24, 0xF0	; 240
     5f4:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
			flicker_time = current_time;
     5f8:	46 01       	movw	r8, r12
     5fa:	57 01       	movw	r10, r14
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
	uint32_t current_time = start_time;
	uint32_t flicker_time = start_time;
	init_sound();
	while(current_time < start_time + 1000) {
     5fc:	c4 14       	cp	r12, r4
     5fe:	d5 04       	cpc	r13, r5
     600:	e6 04       	cpc	r14, r6
     602:	f7 04       	cpc	r15, r7
     604:	28 f2       	brcs	.-118    	; 0x590 <redraw_hit_base+0x52>
		if (current_time == flicker_time + 750) {
			redraw_base(COLOUR_GREEN);
			flicker_time = current_time;
		}
	}
	kill_sound();
     606:	0e 94 7e 08 	call	0x10fc	; 0x10fc <kill_sound>
	update_time(start_time - 3);
     60a:	69 81       	ldd	r22, Y+1	; 0x01
     60c:	7a 81       	ldd	r23, Y+2	; 0x02
     60e:	8b 81       	ldd	r24, Y+3	; 0x03
     610:	9c 81       	ldd	r25, Y+4	; 0x04
     612:	63 50       	subi	r22, 0x03	; 3
     614:	71 09       	sbc	r23, r1
     616:	81 09       	sbc	r24, r1
     618:	91 09       	sbc	r25, r1
     61a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <update_time>
	set_clock_ticks(start_time);
     61e:	69 81       	ldd	r22, Y+1	; 0x01
     620:	7a 81       	ldd	r23, Y+2	; 0x02
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	9c 81       	ldd	r25, Y+4	; 0x04
     626:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <set_clock_ticks>
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     62a:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
	clear_serial_input_buffer();
     62e:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <clear_serial_input_buffer>
	redraw_base(COLOUR_BASE);
     632:	8f ed       	ldi	r24, 0xDF	; 223
     634:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
}
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	9f 90       	pop	r9
     652:	8f 90       	pop	r8
     654:	7f 90       	pop	r7
     656:	6f 90       	pop	r6
     658:	5f 90       	pop	r5
     65a:	4f 90       	pop	r4
     65c:	08 95       	ret

0000065e <handle_collision>:
	return 0;
}

// Remove the projectile and asteroid when they collide. Incrementing score.
// Sound effects can be handled here as well.
static void handle_collision(int8_t asteroidIndex, int8_t projectileIndex) {
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	1f 93       	push	r17
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	c8 2f       	mov	r28, r24
     66a:	86 2f       	mov	r24, r22
	// Remove the collided particles.
	remove_projectile(projectileIndex);
     66c:	0e 94 76 02 	call	0x4ec	; 0x4ec <remove_projectile>
	remove_asteroid(asteroidIndex);
     670:	8c 2f       	mov	r24, r28
     672:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		// Generate random x position - somewhere from 0
		// to FIELD_WIDTH - 1
		x = (uint8_t)(random() % FIELD_WIDTH);
		// Generate random y position - somewhere from
		// FIELD_HEIGHT - 1 to FIELD_HEIGHT - 2
		y = (uint8_t)(FIELD_HEIGHT - 1 - (random() % 2));
     676:	df e0       	ldi	r29, 0x0F	; 15
	// Generate random position that does not already
	// have an asteroid.
	do {
		// Generate random x position - somewhere from 0
		// to FIELD_WIDTH - 1
		x = (uint8_t)(random() % FIELD_WIDTH);
     678:	0e 94 a4 11 	call	0x2348	; 0x2348 <random>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	87 70       	andi	r24, 0x07	; 7
     682:	99 27       	eor	r25, r25
     684:	aa 27       	eor	r26, r26
     686:	b0 78       	andi	r27, 0x80	; 128
     688:	bb 23       	and	r27, r27
     68a:	54 f4       	brge	.+20     	; 0x6a0 <handle_collision+0x42>
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	a1 09       	sbc	r26, r1
     690:	b1 09       	sbc	r27, r1
     692:	88 6f       	ori	r24, 0xF8	; 248
     694:	9f 6f       	ori	r25, 0xFF	; 255
     696:	af 6f       	ori	r26, 0xFF	; 255
     698:	bf 6f       	ori	r27, 0xFF	; 255
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	a1 1d       	adc	r26, r1
     69e:	b1 1d       	adc	r27, r1
     6a0:	c8 2f       	mov	r28, r24
		// Generate random y position - somewhere from
		// FIELD_HEIGHT - 1 to FIELD_HEIGHT - 2
		y = (uint8_t)(FIELD_HEIGHT - 1 - (random() % 2));
     6a2:	0e 94 a4 11 	call	0x2348	; 0x2348 <random>
     6a6:	dc 01       	movw	r26, r24
     6a8:	cb 01       	movw	r24, r22
     6aa:	81 70       	andi	r24, 0x01	; 1
     6ac:	99 27       	eor	r25, r25
     6ae:	aa 27       	eor	r26, r26
     6b0:	b0 78       	andi	r27, 0x80	; 128
     6b2:	bb 23       	and	r27, r27
     6b4:	54 f4       	brge	.+20     	; 0x6ca <handle_collision+0x6c>
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	a1 09       	sbc	r26, r1
     6ba:	b1 09       	sbc	r27, r1
     6bc:	8e 6f       	ori	r24, 0xFE	; 254
     6be:	9f 6f       	ori	r25, 0xFF	; 255
     6c0:	af 6f       	ori	r26, 0xFF	; 255
     6c2:	bf 6f       	ori	r27, 0xFF	; 255
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	a1 1d       	adc	r26, r1
     6c8:	b1 1d       	adc	r27, r1
     6ca:	1d 2f       	mov	r17, r29
     6cc:	18 1b       	sub	r17, r24
	} while(asteroid_at(x,y) != -1);
     6ce:	61 2f       	mov	r22, r17
     6d0:	8c 2f       	mov	r24, r28
     6d2:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     6d6:	8f 3f       	cpi	r24, 0xFF	; 255
     6d8:	79 f6       	brne	.-98     	; 0x678 <handle_collision+0x1a>
	// If we get here, we've now found an x,y location without
	// an existing asteroid - record the position
	asteroids[numAsteroids] = GAME_POSITION(x,y);
     6da:	e0 90 0a 02 	lds	r14, 0x020A	; 0x80020a <numAsteroids>
     6de:	0e 2c       	mov	r0, r14
     6e0:	00 0c       	add	r0, r0
     6e2:	ff 08       	sbc	r15, r15
     6e4:	f7 01       	movw	r30, r14
     6e6:	e0 5f       	subi	r30, 0xF0	; 240
     6e8:	fd 4f       	sbci	r31, 0xFD	; 253
     6ea:	80 e1       	ldi	r24, 0x10	; 16
     6ec:	c8 9f       	mul	r28, r24
     6ee:	b0 01       	movw	r22, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	1f 70       	andi	r17, 0x0F	; 15
     6f4:	61 2b       	or	r22, r17
     6f6:	60 83       	st	Z, r22
	asteroid_speeds[numAsteroids] = (uint8_t)(random() % 4);
     6f8:	0e 94 a4 11 	call	0x2348	; 0x2348 <random>
     6fc:	f7 01       	movw	r30, r14
     6fe:	ea 50       	subi	r30, 0x0A	; 10
     700:	fe 4f       	sbci	r31, 0xFE	; 254
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	83 70       	andi	r24, 0x03	; 3
     708:	99 27       	eor	r25, r25
     70a:	aa 27       	eor	r26, r26
     70c:	b0 78       	andi	r27, 0x80	; 128
     70e:	bb 23       	and	r27, r27
     710:	54 f4       	brge	.+20     	; 0x726 <handle_collision+0xc8>
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	a1 09       	sbc	r26, r1
     716:	b1 09       	sbc	r27, r1
     718:	8c 6f       	ori	r24, 0xFC	; 252
     71a:	9f 6f       	ori	r25, 0xFF	; 255
     71c:	af 6f       	ori	r26, 0xFF	; 255
     71e:	bf 6f       	ori	r27, 0xFF	; 255
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	a1 1d       	adc	r26, r1
     724:	b1 1d       	adc	r27, r1
     726:	80 83       	st	Z, r24
	numAsteroids++;
     728:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <numAsteroids>
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	98 0f       	add	r25, r24
     730:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <numAsteroids>
	
	// Add the asteroid to the display
	redraw_asteroid(numAsteroids - 1, COLOUR_ASTEROID);
     734:	60 ef       	ldi	r22, 0xF0	; 240
     736:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
	// Remove the collided particles.
	remove_projectile(projectileIndex);
	remove_asteroid(asteroidIndex);
	add_asteroid();
	// Add one to the score
	add_to_score(1);
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 ac 0b 	call	0x1758	; 0x1758 <add_to_score>
	// Output the score to the console - Potential to handle this in project.c
	move_cursor(2,4);
     742:	64 e0       	ldi	r22, 0x04	; 4
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <move_cursor>
	printf_P(PSTR("Score: %lu"), get_score());
     74e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <get_score>
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	7f 93       	push	r23
     758:	6f 93       	push	r22
     75a:	8a e9       	ldi	r24, 0x9A	; 154
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
}
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	08 95       	ret

0000077e <initialise_game>:
 
// Initialise game field:
// (1) base starts in the centre (x=3)
// (2) no projectiles initially
// (3) the maximum number of asteroids, randomly distributed.
void initialise_game(void) {
     77e:	4f 92       	push	r4
     780:	5f 92       	push	r5
     782:	6f 92       	push	r6
     784:	7f 92       	push	r7
     786:	8f 92       	push	r8
     788:	9f 92       	push	r9
     78a:	af 92       	push	r10
     78c:	bf 92       	push	r11
     78e:	cf 92       	push	r12
     790:	df 92       	push	r13
     792:	ef 92       	push	r14
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
	uint8_t x, y, i;
	
    basePosition = 3;
     79e:	83 e0       	ldi	r24, 0x03	; 3
     7a0:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <basePosition>
	numProjectiles = 0;
     7a4:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <numProjectiles>
	numAsteroids = 0;
     7a8:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <numAsteroids>
     7ac:	00 e1       	ldi	r16, 0x10	; 16
     7ae:	12 e0       	ldi	r17, 0x02	; 2
     7b0:	0f 2e       	mov	r0, r31
     7b2:	f6 ef       	ldi	r31, 0xF6	; 246
     7b4:	af 2e       	mov	r10, r31
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	bf 2e       	mov	r11, r31
     7ba:	f0 2d       	mov	r31, r0
     7bc:	0f 2e       	mov	r0, r31
     7be:	f4 e2       	ldi	r31, 0x24	; 36
     7c0:	8f 2e       	mov	r8, r31
     7c2:	f2 e0       	ldi	r31, 0x02	; 2
     7c4:	9f 2e       	mov	r9, r31
     7c6:	f0 2d       	mov	r31, r0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     7c8:	0f 2e       	mov	r0, r31
     7ca:	fd e0       	ldi	r31, 0x0D	; 13
     7cc:	4f 2e       	mov	r4, r31
     7ce:	51 2c       	mov	r5, r1
     7d0:	61 2c       	mov	r6, r1
     7d2:	71 2c       	mov	r7, r1
     7d4:	f0 2d       	mov	r31, r0
		// Generate random position that does not already
		// have an asteroid.
		do {
			// Generate random x position - somewhere from 0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
     7d6:	0e 94 a4 11 	call	0x2348	; 0x2348 <random>
     7da:	6b 01       	movw	r12, r22
     7dc:	7c 01       	movw	r14, r24
     7de:	27 e0       	ldi	r18, 0x07	; 7
     7e0:	c2 22       	and	r12, r18
     7e2:	dd 24       	eor	r13, r13
     7e4:	ee 24       	eor	r14, r14
     7e6:	20 e8       	ldi	r18, 0x80	; 128
     7e8:	f2 22       	and	r15, r18
     7ea:	ff 20       	and	r15, r15
     7ec:	84 f4       	brge	.+32     	; 0x80e <initialise_game+0x90>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	c8 1a       	sub	r12, r24
     7f2:	d1 08       	sbc	r13, r1
     7f4:	e1 08       	sbc	r14, r1
     7f6:	f1 08       	sbc	r15, r1
     7f8:	e8 ef       	ldi	r30, 0xF8	; 248
     7fa:	ce 2a       	or	r12, r30
     7fc:	dd 24       	eor	r13, r13
     7fe:	da 94       	dec	r13
     800:	ed 2c       	mov	r14, r13
     802:	fe 2c       	mov	r15, r14
     804:	ff ef       	ldi	r31, 0xFF	; 255
     806:	cf 1a       	sub	r12, r31
     808:	df 0a       	sbc	r13, r31
     80a:	ef 0a       	sbc	r14, r31
     80c:	ff 0a       	sbc	r15, r31
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     80e:	0e 94 a4 11 	call	0x2348	; 0x2348 <random>
     812:	a3 01       	movw	r20, r6
     814:	92 01       	movw	r18, r4
     816:	0e 94 17 11 	call	0x222e	; 0x222e <__divmodsi4>
     81a:	c3 e0       	ldi	r28, 0x03	; 3
     81c:	c6 0f       	add	r28, r22
		} while(asteroid_at(x,y) != -1);
     81e:	6c 2f       	mov	r22, r28
     820:	8c 2d       	mov	r24, r12
     822:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     826:	8f 3f       	cpi	r24, 0xFF	; 255
     828:	b1 f6       	brne	.-84     	; 0x7d6 <initialise_game+0x58>
		// If we get here, we've now found an x,y location without
		// an existing asteroid - record the position
		asteroids[i] = GAME_POSITION(x,y);
     82a:	20 e1       	ldi	r18, 0x10	; 16
     82c:	c2 9e       	mul	r12, r18
     82e:	b0 01       	movw	r22, r0
     830:	11 24       	eor	r1, r1
     832:	cf 70       	andi	r28, 0x0F	; 15
     834:	c6 2b       	or	r28, r22
     836:	f8 01       	movw	r30, r16
     838:	c1 93       	st	Z+, r28
     83a:	8f 01       	movw	r16, r30
		asteroid_speeds[i] = random() % 4;
     83c:	0e 94 a4 11 	call	0x2348	; 0x2348 <random>
     840:	dc 01       	movw	r26, r24
     842:	cb 01       	movw	r24, r22
     844:	83 70       	andi	r24, 0x03	; 3
     846:	99 27       	eor	r25, r25
     848:	aa 27       	eor	r26, r26
     84a:	b0 78       	andi	r27, 0x80	; 128
     84c:	bb 23       	and	r27, r27
     84e:	54 f4       	brge	.+20     	; 0x864 <initialise_game+0xe6>
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	a1 09       	sbc	r26, r1
     854:	b1 09       	sbc	r27, r1
     856:	8c 6f       	ori	r24, 0xFC	; 252
     858:	9f 6f       	ori	r25, 0xFF	; 255
     85a:	af 6f       	ori	r26, 0xFF	; 255
     85c:	bf 6f       	ori	r27, 0xFF	; 255
     85e:	01 96       	adiw	r24, 0x01	; 1
     860:	a1 1d       	adc	r26, r1
     862:	b1 1d       	adc	r27, r1
     864:	f5 01       	movw	r30, r10
     866:	81 93       	st	Z+, r24
     868:	5f 01       	movw	r10, r30
		numAsteroids++;
     86a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <numAsteroids>
     86e:	8f 5f       	subi	r24, 0xFF	; 255
     870:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <numAsteroids>
	
    basePosition = 3;
	numProjectiles = 0;
	numAsteroids = 0;

	for(i=0; i < MAX_ASTEROIDS ; i++) {
     874:	08 15       	cp	r16, r8
     876:	19 05       	cpc	r17, r9
     878:	09 f0       	breq	.+2      	; 0x87c <initialise_game+0xfe>
     87a:	ad cf       	rjmp	.-166    	; 0x7d6 <initialise_game+0x58>

// Redraw the whole display - base, asteroids and projectiles.
// We assume all of the data structures have been appropriately populated
static void redraw_whole_display(void) {
	// clear the display
	ledmatrix_clear();
     87c:	0e 94 32 07 	call	0xe64	; 0xe64 <ledmatrix_clear>
	
	// Redraw each of the elements
	redraw_base(COLOUR_BASE);
     880:	8f ed       	ldi	r24, 0xDF	; 223
     882:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
}


static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     886:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <numAsteroids>
     88a:	18 16       	cp	r1, r24
     88c:	84 f4       	brge	.+32     	; 0x8ae <initialise_game+0x130>
     88e:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_asteroid(i, COLOUR_ASTEROID);
     890:	60 ef       	ldi	r22, 0xF0	; 240
     892:	8c 2f       	mov	r24, r28
     894:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
}


static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     898:	cf 5f       	subi	r28, 0xFF	; 255
     89a:	2c 2f       	mov	r18, r28
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <numAsteroids>
     8a2:	08 2e       	mov	r0, r24
     8a4:	00 0c       	add	r0, r0
     8a6:	99 0b       	sbc	r25, r25
     8a8:	28 17       	cp	r18, r24
     8aa:	39 07       	cpc	r19, r25
     8ac:	8c f3       	brlt	.-30     	; 0x890 <initialise_game+0x112>
}


static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     8ae:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <numProjectiles>
     8b2:	18 16       	cp	r1, r24
     8b4:	84 f4       	brge	.+32     	; 0x8d6 <initialise_game+0x158>
     8b6:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_projectile(i, COLOUR_PROJECTILE);
     8b8:	6f e0       	ldi	r22, 0x0F	; 15
     8ba:	8c 2f       	mov	r24, r28
     8bc:	0e 94 5f 02 	call	0x4be	; 0x4be <redraw_projectile>
}


static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     8c0:	cf 5f       	subi	r28, 0xFF	; 255
     8c2:	2c 2f       	mov	r18, r28
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <numProjectiles>
     8ca:	08 2e       	mov	r0, r24
     8cc:	00 0c       	add	r0, r0
     8ce:	99 0b       	sbc	r25, r25
     8d0:	28 17       	cp	r18, r24
     8d2:	39 07       	cpc	r19, r25
     8d4:	8c f3       	brlt	.-30     	; 0x8b8 <initialise_game+0x13a>
		asteroid_speeds[i] = random() % 4;
		numAsteroids++;
	}
	
	redraw_whole_display();
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	bf 90       	pop	r11
     8e8:	af 90       	pop	r10
     8ea:	9f 90       	pop	r9
     8ec:	8f 90       	pop	r8
     8ee:	7f 90       	pop	r7
     8f0:	6f 90       	pop	r6
     8f2:	5f 90       	pop	r5
     8f4:	4f 90       	pop	r4
     8f6:	08 95       	ret

000008f8 <fire_projectile>:
// Fire projectile - add it immediately above the base
// station, provided there is not already a projectile
// there. We are also limited in the number of projectiles
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
     8f8:	cf 93       	push	r28
	uint8_t newProjectileNumber;
	uint8_t asteroidLocation;
	
	if(numProjectiles < MAX_PROJECTILES && 
     8fa:	c0 91 0f 02 	lds	r28, 0x020F	; 0x80020f <numProjectiles>
     8fe:	c4 30       	cpi	r28, 0x04	; 4
     900:	0c f0       	brlt	.+2      	; 0x904 <__stack+0x5>
     902:	43 c0       	rjmp	.+134    	; 0x98a <__stack+0x8b>
			projectile_at(basePosition, 2) == -1) {
     904:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <basePosition>
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     908:	90 e1       	ldi	r25, 0x10	; 16
     90a:	89 9f       	mul	r24, r25
     90c:	90 01       	movw	r18, r0
     90e:	11 24       	eor	r1, r1
     910:	42 2f       	mov	r20, r18
     912:	42 60       	ori	r20, 0x02	; 2
	for(i=0; i < numProjectiles; i++) {
     914:	6c 2f       	mov	r22, r28
     916:	0c 2e       	mov	r0, r28
     918:	00 0c       	add	r0, r0
     91a:	77 0b       	sbc	r23, r23
     91c:	16 16       	cp	r1, r22
     91e:	17 06       	cpc	r1, r23
     920:	b4 f4       	brge	.+44     	; 0x94e <__stack+0x4f>
		if(projectiles[i] == positionToCheck) {
     922:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <projectiles>
     926:	94 17       	cp	r25, r20
     928:	91 f1       	breq	.+100    	; 0x98e <__stack+0x8f>
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	0a c0       	rjmp	.+20     	; 0x942 <__stack+0x43>
     92e:	f9 01       	movw	r30, r18
     930:	e5 5f       	subi	r30, 0xF5	; 245
     932:	fd 4f       	sbci	r31, 0xFD	; 253
     934:	20 81       	ld	r18, Z
     936:	42 13       	cpse	r20, r18
     938:	04 c0       	rjmp	.+8      	; 0x942 <__stack+0x43>
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
	uint8_t newProjectileNumber;
	uint8_t asteroidLocation;
	
	if(numProjectiles < MAX_PROJECTILES && 
     93a:	9f 3f       	cpi	r25, 0xFF	; 255
     93c:	41 f0       	breq	.+16     	; 0x94e <__stack+0x4f>
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		}
		return 1;
	} else {
		return 0;
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	27 c0       	rjmp	.+78     	; 0x990 <__stack+0x91>
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     942:	9f 5f       	subi	r25, 0xFF	; 255
     944:	29 2f       	mov	r18, r25
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	26 17       	cp	r18, r22
     94a:	37 07       	cpc	r19, r23
     94c:	84 f3       	brlt	.-32     	; 0x92e <__stack+0x2f>
	
	if(numProjectiles < MAX_PROJECTILES && 
			projectile_at(basePosition, 2) == -1) {
		// Have space to add projectile - add it at the x position of
		// the base, in row 2(y=2)
		newProjectileNumber = numProjectiles++;
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	9c 0f       	add	r25, r28
     952:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <numProjectiles>
		projectiles[newProjectileNumber] = GAME_POSITION(basePosition, 2);
     956:	ec 2f       	mov	r30, r28
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	e5 5f       	subi	r30, 0xF5	; 245
     95c:	fd 4f       	sbci	r31, 0xFD	; 253
     95e:	90 e1       	ldi	r25, 0x10	; 16
     960:	89 02       	muls	r24, r25
     962:	90 01       	movw	r18, r0
     964:	11 24       	eor	r1, r1
     966:	22 60       	ori	r18, 0x02	; 2
     968:	20 83       	st	Z, r18
		asteroidLocation = asteroid_at(basePosition, 2);
     96a:	62 e0       	ldi	r22, 0x02	; 2
     96c:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
		// Check if the projectile immediately hits an asteroid.
		if (asteroid_at(basePosition, 2) != -1) {
     970:	8f 3f       	cpi	r24, 0xFF	; 255
     972:	29 f0       	breq	.+10     	; 0x97e <__stack+0x7f>
			handle_collision(asteroidLocation, newProjectileNumber);
     974:	6c 2f       	mov	r22, r28
     976:	0e 94 2f 03 	call	0x65e	; 0x65e <handle_collision>
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		}
		return 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	09 c0       	rjmp	.+18     	; 0x990 <__stack+0x91>
		asteroidLocation = asteroid_at(basePosition, 2);
		// Check if the projectile immediately hits an asteroid.
		if (asteroid_at(basePosition, 2) != -1) {
			handle_collision(asteroidLocation, newProjectileNumber);
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
     97e:	6f e0       	ldi	r22, 0x0F	; 15
     980:	8c 2f       	mov	r24, r28
     982:	0e 94 5f 02 	call	0x4be	; 0x4be <redraw_projectile>
		}
		return 1;
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	03 c0       	rjmp	.+6      	; 0x990 <__stack+0x91>
	} else {
		return 0;
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	01 c0       	rjmp	.+2      	; 0x990 <__stack+0x91>
     98e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <advance_projectiles>:
}


// Move projectiles up by one position, and remove those that 
// have gone off the top or that hit an asteroid.
void advance_projectiles(void) {
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
	uint8_t x, y;
	int8_t projectileNumber;
	int8_t asteroid_location;

	projectileNumber = 0;
     99e:	10 e0       	ldi	r17, 0x00	; 0
	while(projectileNumber < numProjectiles) {
     9a0:	31 c0       	rjmp	.+98     	; 0xa04 <advance_projectiles+0x70>
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     9a2:	e1 2e       	mov	r14, r17
     9a4:	01 2e       	mov	r0, r17
     9a6:	00 0c       	add	r0, r0
     9a8:	ff 08       	sbc	r15, r15
     9aa:	f7 01       	movw	r30, r14
     9ac:	e5 5f       	subi	r30, 0xF5	; 245
     9ae:	fd 4f       	sbci	r31, 0xFD	; 253
     9b0:	80 81       	ld	r24, Z
		y = GET_Y_POSITION(projectiles[projectileNumber]);
     9b2:	c8 2f       	mov	r28, r24
     9b4:	cf 70       	andi	r28, 0x0F	; 15
		
		// Work out the new position (but don't update the projectile 
		// location yet - we only do that if we know the move is valid)
		y = y+1;
     9b6:	cf 5f       	subi	r28, 0xFF	; 255
		
		// Check if new position would be off the top of the display
		if(y == FIELD_HEIGHT) {
     9b8:	c0 31       	cpi	r28, 0x10	; 16
     9ba:	21 f4       	brne	.+8      	; 0x9c4 <advance_projectiles+0x30>
			// Yes - remove the projectile. (Note that we haven't updated
			// the position of the projectile itself - so the projectile 
			// will be removed from its old location.)
			remove_projectile(projectileNumber);
     9bc:	81 2f       	mov	r24, r17
     9be:	0e 94 76 02 	call	0x4ec	; 0x4ec <remove_projectile>
     9c2:	20 c0       	rjmp	.+64     	; 0xa04 <advance_projectiles+0x70>
	int8_t asteroid_location;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     9c4:	d8 2f       	mov	r29, r24
     9c6:	d2 95       	swap	r29
     9c8:	df 70       	andi	r29, 0x0F	; 15
		} else {
			// Projectile is not going off the top of the display
			// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
			// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
			// AND THE ASTEROID.
			asteroid_location = asteroid_at(x, y);
     9ca:	6c 2f       	mov	r22, r28
     9cc:	8d 2f       	mov	r24, r29
     9ce:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
			if (asteroid_location != -1) {
     9d2:	8f 3f       	cpi	r24, 0xFF	; 255
     9d4:	21 f0       	breq	.+8      	; 0x9de <advance_projectiles+0x4a>
				handle_collision(asteroid_location, projectileNumber);
     9d6:	61 2f       	mov	r22, r17
     9d8:	0e 94 2f 03 	call	0x65e	; 0x65e <handle_collision>
     9dc:	13 c0       	rjmp	.+38     	; 0xa04 <advance_projectiles+0x70>
			} else {	
				// Remove the projectile from the display 
				redraw_projectile(projectileNumber, COLOUR_BLACK);
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	81 2f       	mov	r24, r17
     9e2:	0e 94 5f 02 	call	0x4be	; 0x4be <redraw_projectile>
			
				// Update the projectile's position
				projectiles[projectileNumber] = GAME_POSITION(x,y);
     9e6:	f7 01       	movw	r30, r14
     9e8:	e5 5f       	subi	r30, 0xF5	; 245
     9ea:	fd 4f       	sbci	r31, 0xFD	; 253
     9ec:	20 e1       	ldi	r18, 0x10	; 16
     9ee:	d2 9f       	mul	r29, r18
     9f0:	c0 01       	movw	r24, r0
     9f2:	11 24       	eor	r1, r1
     9f4:	cf 70       	andi	r28, 0x0F	; 15
     9f6:	c8 2b       	or	r28, r24
     9f8:	c0 83       	st	Z, r28
			
				// Redraw the projectile
				redraw_projectile(projectileNumber, COLOUR_PROJECTILE);
     9fa:	6f e0       	ldi	r22, 0x0F	; 15
     9fc:	81 2f       	mov	r24, r17
     9fe:	0e 94 5f 02 	call	0x4be	; 0x4be <redraw_projectile>
			
				// Move on to the next projectile (we don't do this if a projectile
				// is removed since projectiles will be shuffled in the list and the
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
     a02:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t x, y;
	int8_t projectileNumber;
	int8_t asteroid_location;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
     a04:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <numProjectiles>
     a08:	18 17       	cp	r17, r24
     a0a:	5c f2       	brlt	.-106    	; 0x9a2 <advance_projectiles+0xe>
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
			}
		}			
	}
}
     a0c:	df 91       	pop	r29
     a0e:	cf 91       	pop	r28
     a10:	1f 91       	pop	r17
     a12:	ff 90       	pop	r15
     a14:	ef 90       	pop	r14
     a16:	08 95       	ret

00000a18 <is_game_over>:


// Returns 1 if the game is over, 0 otherwise.
int8_t is_game_over(void) {
	return (get_lives() == 0);
     a18:	0e 94 a5 07 	call	0xf4a	; 0xf4a <get_lives>
     a1c:	21 e0       	ldi	r18, 0x01	; 1
     a1e:	67 2b       	or	r22, r23
     a20:	68 2b       	or	r22, r24
     a22:	69 2b       	or	r22, r25
     a24:	09 f0       	breq	.+2      	; 0xa28 <is_game_over+0x10>
     a26:	20 e0       	ldi	r18, 0x00	; 0
}
     a28:	82 2f       	mov	r24, r18
     a2a:	08 95       	ret

00000a2c <subtract_life>:

/******** INTERNAL FUNCTIONS ****************/

// Change the state of game over
void subtract_life() {
	if (get_lives() != 0) {
     a2c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <get_lives>
     a30:	67 2b       	or	r22, r23
     a32:	68 2b       	or	r22, r24
     a34:	69 2b       	or	r22, r25
     a36:	21 f0       	breq	.+8      	; 0xa40 <subtract_life+0x14>
		add_to_lives(-1);
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	9f ef       	ldi	r25, 0xFF	; 255
     a3c:	0e 94 4a 07 	call	0xe94	; 0xe94 <add_to_lives>
	}
	move_cursor(2, 6);
     a40:	66 e0       	ldi	r22, 0x06	; 6
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <move_cursor>
	printf_P(PSTR("You have %lu lives remaining."), get_lives());
     a4c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <get_lives>
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	7f 93       	push	r23
     a56:	6f 93       	push	r22
     a58:	8c e7       	ldi	r24, 0x7C	; 124
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
}
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	08 95       	ret

00000a72 <move_base>:
// The direction argument has the value MOVE_LEFT or
// MOVE_RIGHT. The move succeeds if the base isn't all 
// the way to one side, e.g., not permitted to move
// left if basePosition is already 0.
// Returns 1 if move successful, 0 otherwise.
int8_t move_base(int8_t direction) {	
     a72:	cf 93       	push	r28
     a74:	c8 2f       	mov	r28, r24
	// (and eventually wrap around - e.g. subtracting 1 from
	// basePosition 256 times will eventually bring it back to
	// same value.
	
	// We erase the base from its current position first
	redraw_base(COLOUR_BLACK);
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
	
	if (direction == MOVE_LEFT && basePosition != 0) {
     a7c:	c1 11       	cpse	r28, r1
     a7e:	08 c0       	rjmp	.+16     	; 0xa90 <move_base+0x1e>
     a80:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <basePosition>
     a84:	88 23       	and	r24, r24
     a86:	71 f0       	breq	.+28     	; 0xaa4 <move_base+0x32>
		// Check if the user wants to move left
		// Check bounds -> move left.
		basePosition--;
     a88:	81 50       	subi	r24, 0x01	; 1
     a8a:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <basePosition>
     a8e:	0f c0       	rjmp	.+30     	; 0xaae <move_base+0x3c>
	} else if (direction == MOVE_RIGHT && basePosition != 7){
     a90:	c1 30       	cpi	r28, 0x01	; 1
     a92:	41 f4       	brne	.+16     	; 0xaa4 <move_base+0x32>
     a94:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <basePosition>
     a98:	87 30       	cpi	r24, 0x07	; 7
     a9a:	21 f0       	breq	.+8      	; 0xaa4 <move_base+0x32>
		// Assume right press, check bounds -> move right.
		basePosition++;
     a9c:	8f 5f       	subi	r24, 0xFF	; 255
     a9e:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <basePosition>
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <move_base+0x3c>
	} else {
		redraw_base(COLOUR_BASE);
     aa4:	8f ed       	ldi	r24, 0xDF	; 223
     aa6:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
		return 0;
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	34 c0       	rjmp	.+104    	; 0xb16 <move_base+0xa4>
	}
	
	
	// Check if the base is being moved into an asteroid. 
	// We don't need to check the middle as it is impossible to reach.
	if (asteroid_at(basePosition, 1) != -1 ||  asteroid_at(basePosition - 1, 0) != -1 
     aae:	c0 91 24 02 	lds	r28, 0x0224	; 0x800224 <basePosition>
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	8c 2f       	mov	r24, r28
     ab6:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     aba:	8f 3f       	cpi	r24, 0xFF	; 255
     abc:	69 f4       	brne	.+26     	; 0xad8 <move_base+0x66>
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	8c 0f       	add	r24, r28
     ac2:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     ac6:	8f 3f       	cpi	r24, 0xFF	; 255
     ac8:	39 f4       	brne	.+14     	; 0xad8 <move_base+0x66>
	|| asteroid_at(basePosition + 1, 0) != -1) {
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	8c 0f       	add	r24, r28
     ad0:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     ad4:	8f 3f       	cpi	r24, 0xFF	; 255
     ad6:	d9 f0       	breq	.+54     	; 0xb0e <move_base+0x9c>
		subtract_life();
     ad8:	0e 94 16 05 	call	0xa2c	; 0xa2c <subtract_life>
		remove_asteroid(asteroid_at(basePosition, 1));
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <basePosition>
     ae2:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     ae6:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		remove_asteroid(asteroid_at(basePosition - 1, 0));
     aea:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <basePosition>
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	81 50       	subi	r24, 0x01	; 1
     af2:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     af6:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		remove_asteroid(asteroid_at(basePosition + 1, 0));
     afa:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <basePosition>
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	8f 5f       	subi	r24, 0xFF	; 255
     b02:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     b06:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		redraw_hit_base();
     b0a:	0e 94 9f 02 	call	0x53e	; 0x53e <redraw_hit_base>
	}
	
	// Redraw the base
	redraw_base(COLOUR_BASE);
     b0e:	8f ed       	ldi	r24, 0xDF	; 223
     b10:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
	
	return 1;
     b14:	81 e0       	ldi	r24, 0x01	; 1
}
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <advance_asteroids>:
}


// Move asteroids down by one position, and remove those that
// have gone off the bottom or that hit a projectile.
void advance_asteroids(void) {
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
	static uint8_t speed_number = 0;
	uint8_t x, y;
	int8_t asteroidNumber;
	int8_t projectile_location;
	
	speed_number = (speed_number + 1) % 4;
     b2a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <speed_number.2347>
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	83 70       	andi	r24, 0x03	; 3
     b34:	90 78       	andi	r25, 0x80	; 128
     b36:	99 23       	and	r25, r25
     b38:	24 f4       	brge	.+8      	; 0xb42 <advance_asteroids+0x28>
     b3a:	01 97       	sbiw	r24, 0x01	; 1
     b3c:	8c 6f       	ori	r24, 0xFC	; 252
     b3e:	9f 6f       	ori	r25, 0xFF	; 255
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <speed_number.2347>
	asteroidNumber = 0;
     b46:	f1 2c       	mov	r15, r1
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
		if(projectiles[i] == positionToCheck) {
     b48:	cb e0       	ldi	r28, 0x0B	; 11
     b4a:	d2 e0       	ldi	r29, 0x02	; 2
	int8_t asteroidNumber;
	int8_t projectile_location;
	
	speed_number = (speed_number + 1) % 4;
	asteroidNumber = 0;
	while(asteroidNumber < numAsteroids) {
     b4c:	78 c0       	rjmp	.+240    	; 0xc3e <advance_asteroids+0x124>
		if ((speed_number + asteroid_speeds[asteroidNumber]) < 3) {
     b4e:	0f 2d       	mov	r16, r15
     b50:	0f 2c       	mov	r0, r15
     b52:	00 0c       	add	r0, r0
     b54:	11 0b       	sbc	r17, r17
     b56:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <speed_number.2347>
     b5a:	f8 01       	movw	r30, r16
     b5c:	ea 50       	subi	r30, 0x0A	; 10
     b5e:	fe 4f       	sbci	r31, 0xFE	; 254
     b60:	80 81       	ld	r24, Z
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	82 0f       	add	r24, r18
     b66:	91 1d       	adc	r25, r1
     b68:	03 97       	sbiw	r24, 0x03	; 3
     b6a:	14 f4       	brge	.+4      	; 0xb70 <advance_asteroids+0x56>
			asteroidNumber++;
     b6c:	f3 94       	inc	r15
			continue;
     b6e:	67 c0       	rjmp	.+206    	; 0xc3e <advance_asteroids+0x124>
		}
		// Get the current position of the asteroid
		x = GET_X_POSITION(asteroids[asteroidNumber]);
     b70:	f8 01       	movw	r30, r16
     b72:	e0 5f       	subi	r30, 0xF0	; 240
     b74:	fd 4f       	sbci	r31, 0xFD	; 253
     b76:	80 81       	ld	r24, Z
     b78:	e8 2e       	mov	r14, r24
     b7a:	e6 94       	lsr	r14
     b7c:	e6 94       	lsr	r14
     b7e:	e6 94       	lsr	r14
     b80:	e6 94       	lsr	r14
		y = GET_Y_POSITION(asteroids[asteroidNumber]);
     b82:	8f 70       	andi	r24, 0x0F	; 15
     b84:	d8 2e       	mov	r13, r24
			
		// Work out the new position (but don't update the asteroid
		// location yet - we only do that if we know the move is valid)
		y = y - 1;
     b86:	cc 24       	eor	r12, r12
     b88:	ca 94       	dec	r12
     b8a:	c8 0e       	add	r12, r24
		projectile_location = asteroid_at(x, y);
     b8c:	6c 2d       	mov	r22, r12
     b8e:	8e 2d       	mov	r24, r14
     b90:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
		if (projectile_location != -1) {
     b94:	8f 3f       	cpi	r24, 0xFF	; 255
     b96:	59 f0       	breq	.+22     	; 0xbae <advance_asteroids+0x94>
			asteroid_speeds[asteroidNumber] = asteroid_speeds[projectile_location];
     b98:	e8 2f       	mov	r30, r24
     b9a:	88 0f       	add	r24, r24
     b9c:	ff 0b       	sbc	r31, r31
     b9e:	ea 50       	subi	r30, 0x0A	; 10
     ba0:	fe 4f       	sbci	r31, 0xFE	; 254
     ba2:	80 81       	ld	r24, Z
     ba4:	f8 01       	movw	r30, r16
     ba6:	ea 50       	subi	r30, 0x0A	; 10
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	80 83       	st	Z, r24
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <advance_asteroids+0x96>
		x = GET_X_POSITION(asteroids[asteroidNumber]);
		y = GET_Y_POSITION(asteroids[asteroidNumber]);
			
		// Work out the new position (but don't update the asteroid
		// location yet - we only do that if we know the move is valid)
		y = y - 1;
     bae:	dc 2c       	mov	r13, r12
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     bb0:	ee 2d       	mov	r30, r14
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	cf 01       	movw	r24, r30
     bb6:	82 95       	swap	r24
     bb8:	92 95       	swap	r25
     bba:	90 7f       	andi	r25, 0xF0	; 240
     bbc:	98 27       	eor	r25, r24
     bbe:	80 7f       	andi	r24, 0xF0	; 240
     bc0:	98 27       	eor	r25, r24
     bc2:	9d 2d       	mov	r25, r13
     bc4:	9f 70       	andi	r25, 0x0F	; 15
     bc6:	e9 2e       	mov	r14, r25
     bc8:	e8 2a       	or	r14, r24
	for(i=0; i < numProjectiles; i++) {
     bca:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <numProjectiles>
     bce:	04 2e       	mov	r0, r20
     bd0:	00 0c       	add	r0, r0
     bd2:	55 0b       	sbc	r21, r21
     bd4:	14 16       	cp	r1, r20
     bd6:	15 06       	cpc	r1, r21
     bd8:	d4 f4       	brge	.+52     	; 0xc0e <advance_asteroids+0xf4>
		if(projectiles[i] == positionToCheck) {
     bda:	88 81       	ld	r24, Y
     bdc:	8e 15       	cp	r24, r14
     bde:	91 f0       	breq	.+36     	; 0xc04 <advance_asteroids+0xea>
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	09 c0       	rjmp	.+18     	; 0xbf6 <advance_asteroids+0xdc>
     be4:	d9 01       	movw	r26, r18
     be6:	a5 5f       	subi	r26, 0xF5	; 245
     be8:	bd 4f       	sbci	r27, 0xFD	; 253
     bea:	9c 91       	ld	r25, X
     bec:	e9 12       	cpse	r14, r25
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <advance_asteroids+0xdc>
			// Asteroid is not going off the bottom of the display
			// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
			// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
			// AND THE ASTEROID.
			projectile_location = projectile_at(x, y);
			if (projectile_location != -1) {
     bf0:	6f 3f       	cpi	r22, 0xFF	; 255
     bf2:	49 f4       	brne	.+18     	; 0xc06 <advance_asteroids+0xec>
     bf4:	0c c0       	rjmp	.+24     	; 0xc0e <advance_asteroids+0xf4>
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     bf6:	6f 5f       	subi	r22, 0xFF	; 255
     bf8:	26 2f       	mov	r18, r22
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	24 17       	cp	r18, r20
     bfe:	35 07       	cpc	r19, r21
     c00:	8c f3       	brlt	.-30     	; 0xbe4 <advance_asteroids+0xca>
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <advance_asteroids+0xf4>
		if(projectiles[i] == positionToCheck) {
			// Projectile i is at the given position
			return i;
     c04:	60 e0       	ldi	r22, 0x00	; 0
			// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
			// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
			// AND THE ASTEROID.
			projectile_location = projectile_at(x, y);
			if (projectile_location != -1) {
				handle_collision(asteroidNumber, projectile_location);
     c06:	8f 2d       	mov	r24, r15
     c08:	0e 94 2f 03 	call	0x65e	; 0x65e <handle_collision>
     c0c:	18 c0       	rjmp	.+48     	; 0xc3e <advance_asteroids+0x124>
}


// Check whether the base is at a given location.
static int8_t base_at(uint8_t x, uint8_t y) {
	if (y > 1) {
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	8d 15       	cp	r24, r13
     c12:	18 f1       	brcs	.+70     	; 0xc5a <advance_asteroids+0x140>
		// This is too high for the base.
		return 0;
	}
	
	if (x == basePosition) {
     c14:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <basePosition>
     c18:	08 2e       	mov	r0, r24
     c1a:	00 0c       	add	r0, r0
     c1c:	99 0b       	sbc	r25, r25
     c1e:	e8 17       	cp	r30, r24
     c20:	f9 07       	cpc	r31, r25
     c22:	99 f0       	breq	.+38     	; 0xc4a <advance_asteroids+0x130>
		// This can occur for both y = 1 and y = 0.
		return 1;
	} else if (y == 0) {
     c24:	d1 10       	cpse	r13, r1
     c26:	19 c0       	rjmp	.+50     	; 0xc5a <advance_asteroids+0x140>
		// Check the sides of the base.
		if (x == basePosition -1 || x == basePosition + 1) {
     c28:	9c 01       	movw	r18, r24
     c2a:	21 50       	subi	r18, 0x01	; 1
     c2c:	31 09       	sbc	r19, r1
     c2e:	e2 17       	cp	r30, r18
     c30:	f3 07       	cpc	r31, r19
     c32:	59 f0       	breq	.+22     	; 0xc4a <advance_asteroids+0x130>
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	e8 17       	cp	r30, r24
     c38:	f9 07       	cpc	r31, r25
     c3a:	79 f4       	brne	.+30     	; 0xc5a <advance_asteroids+0x140>
     c3c:	06 c0       	rjmp	.+12     	; 0xc4a <advance_asteroids+0x130>
	int8_t asteroidNumber;
	int8_t projectile_location;
	
	speed_number = (speed_number + 1) % 4;
	asteroidNumber = 0;
	while(asteroidNumber < numAsteroids) {
     c3e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <numAsteroids>
     c42:	f8 16       	cp	r15, r24
     c44:	0c f4       	brge	.+2      	; 0xc48 <advance_asteroids+0x12e>
     c46:	83 cf       	rjmp	.-250    	; 0xb4e <advance_asteroids+0x34>
     c48:	16 c0       	rjmp	.+44     	; 0xc76 <advance_asteroids+0x15c>
			projectile_location = projectile_at(x, y);
			if (projectile_location != -1) {
				handle_collision(asteroidNumber, projectile_location);
			} else if (base_at(x, y)) {
				// If the asteroid collides with the base, handle the event.
				subtract_life();
     c4a:	0e 94 16 05 	call	0xa2c	; 0xa2c <subtract_life>
				remove_asteroid(asteroidNumber);
     c4e:	8f 2d       	mov	r24, r15
     c50:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
				redraw_hit_base();
     c54:	0e 94 9f 02 	call	0x53e	; 0x53e <redraw_hit_base>
     c58:	f2 cf       	rjmp	.-28     	; 0xc3e <advance_asteroids+0x124>
			} else {
				// Remove the asteroid from the display
				redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	8f 2d       	mov	r24, r15
     c5e:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
					
				// Update the asteroid's position
				asteroids[asteroidNumber] = GAME_POSITION(x,y);
     c62:	f8 01       	movw	r30, r16
     c64:	e0 5f       	subi	r30, 0xF0	; 240
     c66:	fd 4f       	sbci	r31, 0xFD	; 253
     c68:	e0 82       	st	Z, r14
					
				// Redraw the asteroid
				redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     c6a:	60 ef       	ldi	r22, 0xF0	; 240
     c6c:	8f 2d       	mov	r24, r15
     c6e:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
					
				// Move on to the next asteroid
				asteroidNumber++;
     c72:	f3 94       	inc	r15
     c74:	e4 cf       	rjmp	.-56     	; 0xc3e <advance_asteroids+0x124>
			}
		}
	}
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
     c86:	08 95       	ret

00000c88 <game_over_animation>:
	// Update projectile count - have one fewer projectiles now.
	numProjectiles--;
}


uint8_t game_over_animation(uint32_t current_time, uint8_t animation_number) {
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	cf 93       	push	r28
     c92:	6b 01       	movw	r12, r22
     c94:	7c 01       	movw	r14, r24
     c96:	c4 2f       	mov	r28, r20
	static uint32_t previous_time;
	if (current_time > previous_time + 100 && animation_number == 1) {
     c98:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <previous_time.2414>
     c9c:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <previous_time.2414+0x1>
     ca0:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <previous_time.2414+0x2>
     ca4:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <previous_time.2414+0x3>
     ca8:	8c 59       	subi	r24, 0x9C	; 156
     caa:	9f 4f       	sbci	r25, 0xFF	; 255
     cac:	af 4f       	sbci	r26, 0xFF	; 255
     cae:	bf 4f       	sbci	r27, 0xFF	; 255
     cb0:	8c 15       	cp	r24, r12
     cb2:	9d 05       	cpc	r25, r13
     cb4:	ae 05       	cpc	r26, r14
     cb6:	bf 05       	cpc	r27, r15
     cb8:	78 f4       	brcc	.+30     	; 0xcd8 <game_over_animation+0x50>
     cba:	41 30       	cpi	r20, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <game_over_animation+0x38>
     cbe:	5d c0       	rjmp	.+186    	; 0xd7a <game_over_animation+0xf2>
		ledmatrix_shift_display_right();
     cc0:	0e 94 2b 07 	call	0xe56	; 0xe56 <ledmatrix_shift_display_right>
		previous_time = current_time;
     cc4:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <previous_time.2414>
     cc8:	d0 92 e1 01 	sts	0x01E1, r13	; 0x8001e1 <previous_time.2414+0x1>
     ccc:	e0 92 e2 01 	sts	0x01E2, r14	; 0x8001e2 <previous_time.2414+0x2>
     cd0:	f0 92 e3 01 	sts	0x01E3, r15	; 0x8001e3 <previous_time.2414+0x3>
		return 1;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	72 c0       	rjmp	.+228    	; 0xdbc <game_over_animation+0x134>
	} else if (animation_number == 2) {
     cd8:	42 30       	cpi	r20, 0x02	; 2
     cda:	09 f0       	breq	.+2      	; 0xcde <game_over_animation+0x56>
     cdc:	52 c0       	rjmp	.+164    	; 0xd82 <game_over_animation+0xfa>
		set_scrolling_display_text("GAME OVER NERD", COLOUR_GREEN);
     cde:	60 ef       	ldi	r22, 0xF0	; 240
     ce0:	8c e2       	ldi	r24, 0x2C	; 44
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <set_scrolling_display_text>
		return 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	68 c0       	rjmp	.+208    	; 0xdbc <game_over_animation+0x134>
	} else if (current_time > previous_time + 100 && scroll_display() 
     cec:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <scroll_display>
     cf0:	88 23       	and	r24, r24
     cf2:	69 f0       	breq	.+26     	; 0xd0e <game_over_animation+0x86>
	&& animation_number == 3) {
     cf4:	c3 30       	cpi	r28, 0x03	; 3
     cf6:	09 f0       	breq	.+2      	; 0xcfa <game_over_animation+0x72>
     cf8:	4f c0       	rjmp	.+158    	; 0xd98 <game_over_animation+0x110>
		previous_time = current_time;
     cfa:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <previous_time.2414>
     cfe:	d0 92 e1 01 	sts	0x01E1, r13	; 0x8001e1 <previous_time.2414+0x1>
     d02:	e0 92 e2 01 	sts	0x01E2, r14	; 0x8001e2 <previous_time.2414+0x2>
     d06:	f0 92 e3 01 	sts	0x01E3, r15	; 0x8001e3 <previous_time.2414+0x3>
		return 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	57 c0       	rjmp	.+174    	; 0xdbc <game_over_animation+0x134>
	} else if (current_time > previous_time + 100 && animation_number == 3) {
     d0e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <previous_time.2414>
     d12:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <previous_time.2414+0x1>
     d16:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <previous_time.2414+0x2>
     d1a:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <previous_time.2414+0x3>
     d1e:	8c 59       	subi	r24, 0x9C	; 156
     d20:	9f 4f       	sbci	r25, 0xFF	; 255
     d22:	af 4f       	sbci	r26, 0xFF	; 255
     d24:	bf 4f       	sbci	r27, 0xFF	; 255
     d26:	8c 15       	cp	r24, r12
     d28:	9d 05       	cpc	r25, r13
     d2a:	ae 05       	cpc	r26, r14
     d2c:	bf 05       	cpc	r27, r15
     d2e:	68 f5       	brcc	.+90     	; 0xd8a <game_over_animation+0x102>
     d30:	c3 30       	cpi	r28, 0x03	; 3
     d32:	79 f5       	brne	.+94     	; 0xd92 <game_over_animation+0x10a>
		previous_time = current_time;
     d34:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <previous_time.2414>
     d38:	d0 92 e1 01 	sts	0x01E1, r13	; 0x8001e1 <previous_time.2414+0x1>
     d3c:	e0 92 e2 01 	sts	0x01E2, r14	; 0x8001e2 <previous_time.2414+0x2>
     d40:	f0 92 e3 01 	sts	0x01E3, r15	; 0x8001e3 <previous_time.2414+0x3>
		return 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	3a c0       	rjmp	.+116    	; 0xdbc <game_over_animation+0x134>
	} else if (animation_number == 4) {
		set_scrolling_display_text("GG", COLOUR_GREEN);
     d48:	60 ef       	ldi	r22, 0xF0	; 240
     d4a:	8b e3       	ldi	r24, 0x3B	; 59
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <set_scrolling_display_text>
		return 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	33 c0       	rjmp	.+102    	; 0xdbc <game_over_animation+0x134>
	} else if (current_time > previous_time + 100 && scroll_display()
     d56:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <scroll_display>
     d5a:	88 23       	and	r24, r24
     d5c:	79 f1       	breq	.+94     	; 0xdbc <game_over_animation+0x134>
	&& animation_number == 5) {
     d5e:	c5 30       	cpi	r28, 0x05	; 5
     d60:	51 f4       	brne	.+20     	; 0xd76 <game_over_animation+0xee>
		previous_time = current_time;
     d62:	c0 92 e0 01 	sts	0x01E0, r12	; 0x8001e0 <previous_time.2414>
     d66:	d0 92 e1 01 	sts	0x01E1, r13	; 0x8001e1 <previous_time.2414+0x1>
     d6a:	e0 92 e2 01 	sts	0x01E2, r14	; 0x8001e2 <previous_time.2414+0x2>
     d6e:	f0 92 e3 01 	sts	0x01E3, r15	; 0x8001e3 <previous_time.2414+0x3>
		return 1;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	23 c0       	rjmp	.+70     	; 0xdbc <game_over_animation+0x134>
	}
	return 0;
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	21 c0       	rjmp	.+66     	; 0xdbc <game_over_animation+0x134>
	static uint32_t previous_time;
	if (current_time > previous_time + 100 && animation_number == 1) {
		ledmatrix_shift_display_right();
		previous_time = current_time;
		return 1;
	} else if (animation_number == 2) {
     d7a:	42 30       	cpi	r20, 0x02	; 2
     d7c:	09 f0       	breq	.+2      	; 0xd80 <game_over_animation+0xf8>
     d7e:	b6 cf       	rjmp	.-148    	; 0xcec <game_over_animation+0x64>
     d80:	ae cf       	rjmp	.-164    	; 0xcde <game_over_animation+0x56>
		previous_time = current_time;
		return 1;
	} else if (current_time > previous_time + 100 && animation_number == 3) {
		previous_time = current_time;
		return 1;
	} else if (animation_number == 4) {
     d82:	44 30       	cpi	r20, 0x04	; 4
     d84:	09 f3       	breq	.-62     	; 0xd48 <game_over_animation+0xc0>
	} else if (current_time > previous_time + 100 && scroll_display()
	&& animation_number == 5) {
		previous_time = current_time;
		return 1;
	}
	return 0;
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	19 c0       	rjmp	.+50     	; 0xdbc <game_over_animation+0x134>
		previous_time = current_time;
		return 1;
	} else if (current_time > previous_time + 100 && animation_number == 3) {
		previous_time = current_time;
		return 1;
	} else if (animation_number == 4) {
     d8a:	c4 30       	cpi	r28, 0x04	; 4
     d8c:	e9 f2       	breq	.-70     	; 0xd48 <game_over_animation+0xc0>
	} else if (current_time > previous_time + 100 && scroll_display()
	&& animation_number == 5) {
		previous_time = current_time;
		return 1;
	}
	return 0;
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	15 c0       	rjmp	.+42     	; 0xdbc <game_over_animation+0x134>
		previous_time = current_time;
		return 1;
	} else if (current_time > previous_time + 100 && animation_number == 3) {
		previous_time = current_time;
		return 1;
	} else if (animation_number == 4) {
     d92:	c4 30       	cpi	r28, 0x04	; 4
     d94:	01 f7       	brne	.-64     	; 0xd56 <game_over_animation+0xce>
     d96:	d8 cf       	rjmp	.-80     	; 0xd48 <game_over_animation+0xc0>
		return 1;
	} else if (current_time > previous_time + 100 && scroll_display() 
	&& animation_number == 3) {
		previous_time = current_time;
		return 1;
	} else if (current_time > previous_time + 100 && animation_number == 3) {
     d98:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <previous_time.2414>
     d9c:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <previous_time.2414+0x1>
     da0:	a0 91 e2 01 	lds	r26, 0x01E2	; 0x8001e2 <previous_time.2414+0x2>
     da4:	b0 91 e3 01 	lds	r27, 0x01E3	; 0x8001e3 <previous_time.2414+0x3>
     da8:	8c 59       	subi	r24, 0x9C	; 156
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	af 4f       	sbci	r26, 0xFF	; 255
     dae:	bf 4f       	sbci	r27, 0xFF	; 255
     db0:	8c 15       	cp	r24, r12
     db2:	9d 05       	cpc	r25, r13
     db4:	ae 05       	cpc	r26, r14
     db6:	bf 05       	cpc	r27, r15
     db8:	60 f3       	brcs	.-40     	; 0xd92 <game_over_animation+0x10a>
     dba:	e7 cf       	rjmp	.-50     	; 0xd8a <game_over_animation+0x102>
	&& animation_number == 5) {
		previous_time = current_time;
		return 1;
	}
	return 0;
}
     dbc:	cf 91       	pop	r28
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	08 95       	ret

00000dc8 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <spi_setup_master>
     dce:	08 95       	ret

00000dd0 <ledmatrix_update_pixel>:
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	80 31       	cpi	r24, 0x10	; 16
     dd8:	b0 f4       	brcc	.+44     	; 0xe06 <ledmatrix_update_pixel+0x36>
     dda:	68 30       	cpi	r22, 0x08	; 8
     ddc:	a0 f4       	brcc	.+40     	; 0xe06 <ledmatrix_update_pixel+0x36>
     dde:	14 2f       	mov	r17, r20
     de0:	c6 2f       	mov	r28, r22
     de2:	d8 2f       	mov	r29, r24
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     dea:	6c 2f       	mov	r22, r28
     dec:	67 70       	andi	r22, 0x07	; 7
     dee:	80 e1       	ldi	r24, 0x10	; 16
     df0:	68 9f       	mul	r22, r24
     df2:	90 01       	movw	r18, r0
     df4:	11 24       	eor	r1, r1
     df6:	8d 2f       	mov	r24, r29
     df8:	8f 70       	andi	r24, 0x0F	; 15
     dfa:	82 2b       	or	r24, r18
     dfc:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e00:	81 2f       	mov	r24, r17
     e02:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	08 95       	ret

00000e0e <ledmatrix_update_column>:
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	80 31       	cpi	r24, 0x10	; 16
     e18:	90 f4       	brcc	.+36     	; 0xe3e <ledmatrix_update_column+0x30>
     e1a:	8b 01       	movw	r16, r22
     e1c:	c8 2f       	mov	r28, r24
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e24:	8c 2f       	mov	r24, r28
     e26:	8f 70       	andi	r24, 0x0F	; 15
     e28:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e2c:	e8 01       	movw	r28, r16
     e2e:	08 5f       	subi	r16, 0xF8	; 248
     e30:	1f 4f       	sbci	r17, 0xFF	; 255
     e32:	89 91       	ld	r24, Y+
     e34:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e38:	c0 17       	cp	r28, r16
     e3a:	d1 07       	cpc	r29, r17
     e3c:	d1 f7       	brne	.-12     	; 0xe32 <ledmatrix_update_column+0x24>
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <ledmatrix_shift_display_left>:
     e48:	84 e0       	ldi	r24, 0x04	; 4
     e4a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e54:	08 95       	ret

00000e56 <ledmatrix_shift_display_right>:
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e62:	08 95       	ret

00000e64 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     e64:	8f e0       	ldi	r24, 0x0F	; 15
     e66:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <spi_send_byte>
     e6a:	08 95       	ret

00000e6c <init_lives>:

uint32_t lives;

void init_lives(void) {
	// Leave the joystick alone
	PORTA &= (1 << 0) | (1 << 1);
     e6c:	82 b1       	in	r24, 0x02	; 2
     e6e:	83 70       	andi	r24, 0x03	; 3
     e70:	82 b9       	out	0x02, r24	; 2
	for (int8_t i = 0; i < 4; i++) {
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTA |= (1 << (4 + i));
     e72:	14 9a       	sbi	0x02, 4	; 2
     e74:	15 9a       	sbi	0x02, 5	; 2
     e76:	16 9a       	sbi	0x02, 6	; 2
     e78:	17 9a       	sbi	0x02, 7	; 2
	}
	lives = 4;
     e7a:	84 e0       	ldi	r24, 0x04	; 4
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lives>
     e86:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lives+0x1>
     e8a:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <lives+0x2>
     e8e:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <lives+0x3>
     e92:	08 95       	ret

00000e94 <add_to_lives>:
}

void add_to_lives(int16_t value) {
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
	lives += value;
     e98:	09 2e       	mov	r0, r25
     e9a:	00 0c       	add	r0, r0
     e9c:	aa 0b       	sbc	r26, r26
     e9e:	bb 0b       	sbc	r27, r27
     ea0:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <lives>
     ea4:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <lives+0x1>
     ea8:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <lives+0x2>
     eac:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <lives+0x3>
     eb0:	84 0f       	add	r24, r20
     eb2:	95 1f       	adc	r25, r21
     eb4:	a6 1f       	adc	r26, r22
     eb6:	b7 1f       	adc	r27, r23
     eb8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lives>
     ebc:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lives+0x1>
     ec0:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <lives+0x2>
     ec4:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <lives+0x3>
	// Reset the last seven bits.
	PORTA &= (1 << 0) | (1 << 1);
     ec8:	82 b1       	in	r24, 0x02	; 2
     eca:	83 70       	andi	r24, 0x03	; 3
     ecc:	82 b9       	out	0x02, r24	; 2
	// Does the lights in the right order.
	for (int8_t i = 1; i < lives + 1; i++) {
     ece:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <lives>
     ed2:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <lives+0x1>
     ed6:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <lives+0x2>
     eda:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <lives+0x3>
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	a1 1d       	adc	r26, r1
     ee2:	b1 1d       	adc	r27, r1
     ee4:	02 97       	sbiw	r24, 0x02	; 2
     ee6:	a1 05       	cpc	r26, r1
     ee8:	b1 05       	cpc	r27, r1
     eea:	60 f1       	brcs	.+88     	; 0xf44 <add_to_lives+0xb0>
     eec:	81 e0       	ldi	r24, 0x01	; 1
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTA |= (1 << (7 - i));
     eee:	a7 e0       	ldi	r26, 0x07	; 7
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e1 e0       	ldi	r30, 0x01	; 1
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	92 b1       	in	r25, 0x02	; 2
     ef8:	9d 01       	movw	r18, r26
     efa:	28 1b       	sub	r18, r24
     efc:	31 09       	sbc	r19, r1
     efe:	87 fd       	sbrc	r24, 7
     f00:	33 95       	inc	r19
     f02:	af 01       	movw	r20, r30
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <add_to_lives+0x76>
     f06:	44 0f       	add	r20, r20
     f08:	55 1f       	adc	r21, r21
     f0a:	2a 95       	dec	r18
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <add_to_lives+0x72>
     f0e:	9a 01       	movw	r18, r20
     f10:	29 2b       	or	r18, r25
     f12:	22 b9       	out	0x02, r18	; 2
     f14:	8f 5f       	subi	r24, 0xFF	; 255
void add_to_lives(int16_t value) {
	lives += value;
	// Reset the last seven bits.
	PORTA &= (1 << 0) | (1 << 1);
	// Does the lights in the right order.
	for (int8_t i = 1; i < lives + 1; i++) {
     f16:	08 2f       	mov	r16, r24
     f18:	08 2e       	mov	r0, r24
     f1a:	00 0c       	add	r0, r0
     f1c:	11 0b       	sbc	r17, r17
     f1e:	22 0b       	sbc	r18, r18
     f20:	33 0b       	sbc	r19, r19
     f22:	40 91 25 02 	lds	r20, 0x0225	; 0x800225 <lives>
     f26:	50 91 26 02 	lds	r21, 0x0226	; 0x800226 <lives+0x1>
     f2a:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <lives+0x2>
     f2e:	70 91 28 02 	lds	r23, 0x0228	; 0x800228 <lives+0x3>
     f32:	4f 5f       	subi	r20, 0xFF	; 255
     f34:	5f 4f       	sbci	r21, 0xFF	; 255
     f36:	6f 4f       	sbci	r22, 0xFF	; 255
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	04 17       	cp	r16, r20
     f3c:	15 07       	cpc	r17, r21
     f3e:	26 07       	cpc	r18, r22
     f40:	37 07       	cpc	r19, r23
     f42:	c8 f2       	brcs	.-78     	; 0xef6 <add_to_lives+0x62>
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTA |= (1 << (7 - i));
	}
}
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	08 95       	ret

00000f4a <get_lives>:

uint32_t get_lives(void) {
	return lives;
     f4a:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <lives>
     f4e:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <lives+0x1>
     f52:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <lives+0x2>
     f56:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <lives+0x3>
}
     f5a:	08 95       	ret

00000f5c <init_joystick>:
uint8_t x_or_y = 0;	
uint16_t value, up_down_cal, left_right_cal;

void init_joystick(void) {
	/* Turn on global interrupts */
	sei();
     f5c:	78 94       	sei
	
	// Set up ADC - AVCC reference, right adjust
	// Input selection doesn't matter yet - we'll swap this around in the while
	// loop below.
	ADMUX = (1 << REFS0);
     f5e:	ec e7       	ldi	r30, 0x7C	; 124
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 e4       	ldi	r24, 0x40	; 64
     f64:	80 83       	st	Z, r24
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1);
     f66:	aa e7       	ldi	r26, 0x7A	; 122
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	86 e8       	ldi	r24, 0x86	; 134
     f6c:	8c 93       	st	X, r24
	ADMUX = 0;
     f6e:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);
     f70:	80 81       	ld	r24, Z
     f72:	80 64       	ori	r24, 0x40	; 64
     f74:	80 83       	st	Z, r24

	// Start the ADC conversion
	ADCSRA |= (1 << ADSC);
     f76:	8c 91       	ld	r24, X
     f78:	80 64       	ori	r24, 0x40	; 64
     f7a:	8c 93       	st	X, r24
	
	while(ADCSRA & (1<<ADSC)) {
     f7c:	ea e7       	ldi	r30, 0x7A	; 122
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	86 fd       	sbrc	r24, 6
     f84:	fd cf       	rjmp	.-6      	; 0xf80 <init_joystick+0x24>
		; /* Wait until conversion finished */
	}
	left_right_cal = ADC;
     f86:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     f8a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     f8e:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <left_right_cal+0x1>
     f92:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <left_right_cal>
	
	ADMUX |= (0 << MUX4) | (0 << MUX3) | (0 << MUX2) | (0 << MUX1) | (1 << MUX0);
     f96:	ec e7       	ldi	r30, 0x7C	; 124
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	81 60       	ori	r24, 0x01	; 1
     f9e:	80 83       	st	Z, r24
	// Start the ADC conversion
	ADCSRA |= (1 << ADSC);
     fa0:	ea e7       	ldi	r30, 0x7A	; 122
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	80 64       	ori	r24, 0x40	; 64
     fa8:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC)) {
     faa:	80 81       	ld	r24, Z
     fac:	86 fd       	sbrc	r24, 6
     fae:	fd cf       	rjmp	.-6      	; 0xfaa <init_joystick+0x4e>
		; /* Wait until conversion finished */
	}
	up_down_cal = ADC;
     fb0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     fb4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     fb8:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <up_down_cal+0x1>
     fbc:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <up_down_cal>
     fc0:	08 95       	ret

00000fc2 <step_joystick>:
}

void step_joystick() {
	if (queue_length > 3) {
     fc2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <queue_length>
     fc6:	84 30       	cpi	r24, 0x04	; 4
     fc8:	0c f0       	brlt	.+2      	; 0xfcc <step_joystick+0xa>
     fca:	6f c0       	rjmp	.+222    	; 0x10aa <step_joystick+0xe8>
		return;
	}
	// Set the ADC mux to choose ADC0 if x_or_y is 0, ADC1 if x_or_y is 1
	if(x_or_y == 0) {
     fcc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <x_or_y>
     fd0:	81 11       	cpse	r24, r1
     fd2:	07 c0       	rjmp	.+14     	; 0xfe2 <step_joystick+0x20>
		ADMUX = 0;
     fd4:	ec e7       	ldi	r30, 0x7C	; 124
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	10 82       	st	Z, r1
		ADMUX |= (1 << REFS0);
     fda:	80 81       	ld	r24, Z
     fdc:	80 64       	ori	r24, 0x40	; 64
     fde:	80 83       	st	Z, r24
     fe0:	05 c0       	rjmp	.+10     	; 0xfec <step_joystick+0x2a>
	} else {
		ADMUX |= (0 << MUX4) | (0 << MUX3) | (0 << MUX2) | (0 << MUX1) | (1 << MUX0);
     fe2:	ec e7       	ldi	r30, 0x7C	; 124
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	81 60       	ori	r24, 0x01	; 1
     fea:	80 83       	st	Z, r24
	}
	// Start the ADC conversion
	ADCSRA |= (1 << ADSC);
     fec:	ea e7       	ldi	r30, 0x7A	; 122
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 64       	ori	r24, 0x40	; 64
     ff4:	80 83       	st	Z, r24
	
	while(ADCSRA & (1<<ADSC)) {
     ff6:	80 81       	ld	r24, Z
     ff8:	86 fd       	sbrc	r24, 6
     ffa:	fd cf       	rjmp	.-6      	; 0xff6 <step_joystick+0x34>
		; /* Wait until conversion finished */
	}
	value = ADC; // read the value
     ffc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    1000:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1004:	30 93 2e 02 	sts	0x022E, r19	; 0x80022e <value+0x1>
    1008:	20 93 2d 02 	sts	0x022D, r18	; 0x80022d <value>
	
	// Set it to the appropriate movement and increment the queue size.
	if(x_or_y == 1 && (value < up_down_cal - 100 || value > up_down_cal + 100)) {
    100c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <x_or_y>
    1010:	91 30       	cpi	r25, 0x01	; 1
    1012:	e9 f4       	brne	.+58     	; 0x104e <step_joystick+0x8c>
    1014:	40 91 29 02 	lds	r20, 0x0229	; 0x800229 <up_down_cal>
    1018:	50 91 2a 02 	lds	r21, 0x022A	; 0x80022a <up_down_cal+0x1>
    101c:	ba 01       	movw	r22, r20
    101e:	64 56       	subi	r22, 0x64	; 100
    1020:	71 09       	sbc	r23, r1
    1022:	26 17       	cp	r18, r22
    1024:	37 07       	cpc	r19, r23
    1026:	28 f0       	brcs	.+10     	; 0x1032 <step_joystick+0x70>
    1028:	4c 59       	subi	r20, 0x9C	; 156
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	42 17       	cp	r20, r18
    102e:	53 07       	cpc	r21, r19
    1030:	70 f4       	brcc	.+28     	; 0x104e <step_joystick+0x8c>
		joystick_queue[queue_length++] = 3;
    1032:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <queue_length>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	8e 0f       	add	r24, r30
    103a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <queue_length>
    103e:	0e 2e       	mov	r0, r30
    1040:	00 0c       	add	r0, r0
    1042:	ff 0b       	sbc	r31, r31
    1044:	ea 51       	subi	r30, 0x1A	; 26
    1046:	fe 4f       	sbci	r31, 0xFE	; 254
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	80 83       	st	Z, r24
    104c:	2a c0       	rjmp	.+84     	; 0x10a2 <step_joystick+0xe0>
	} else if(value < left_right_cal - 100) {
    104e:	40 91 2b 02 	lds	r20, 0x022B	; 0x80022b <left_right_cal>
    1052:	50 91 2c 02 	lds	r21, 0x022C	; 0x80022c <left_right_cal+0x1>
    1056:	ba 01       	movw	r22, r20
    1058:	64 56       	subi	r22, 0x64	; 100
    105a:	71 09       	sbc	r23, r1
    105c:	26 17       	cp	r18, r22
    105e:	37 07       	cpc	r19, r23
    1060:	70 f4       	brcc	.+28     	; 0x107e <step_joystick+0xbc>
		joystick_queue[queue_length++] = 2;
    1062:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <queue_length>
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	8e 0f       	add	r24, r30
    106a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <queue_length>
    106e:	0e 2e       	mov	r0, r30
    1070:	00 0c       	add	r0, r0
    1072:	ff 0b       	sbc	r31, r31
    1074:	ea 51       	subi	r30, 0x1A	; 26
    1076:	fe 4f       	sbci	r31, 0xFE	; 254
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	80 83       	st	Z, r24
    107c:	12 c0       	rjmp	.+36     	; 0x10a2 <step_joystick+0xe0>
	} else if(value > left_right_cal + 100) {
    107e:	4c 59       	subi	r20, 0x9C	; 156
    1080:	5f 4f       	sbci	r21, 0xFF	; 255
    1082:	42 17       	cp	r20, r18
    1084:	53 07       	cpc	r21, r19
    1086:	68 f4       	brcc	.+26     	; 0x10a2 <step_joystick+0xe0>
		joystick_queue[queue_length++] = 1;
    1088:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <queue_length>
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	8e 0f       	add	r24, r30
    1090:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <queue_length>
    1094:	0e 2e       	mov	r0, r30
    1096:	00 0c       	add	r0, r0
    1098:	ff 0b       	sbc	r31, r31
    109a:	ea 51       	subi	r30, 0x1A	; 26
    109c:	fe 4f       	sbci	r31, 0xFE	; 254
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 83       	st	Z, r24
	}
	// Next time through the loop, do the other direction
	x_or_y ^= 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	89 27       	eor	r24, r25
    10a6:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <x_or_y>
    10aa:	08 95       	ret

000010ac <joystick_moved>:
}

int8_t joystick_moved(void) {
	int8_t return_value = NO_JOYSTICK_MOVEMENT;	// Assume no joystick movement
	if(queue_length > 0) {
    10ac:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <queue_length>
    10b0:	18 16       	cp	r1, r24
    10b2:	14 f5       	brge	.+68     	; 0x10f8 <joystick_moved+0x4c>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = joystick_queue[0];
    10b4:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <joystick_queue>
		
		for(uint8_t i = 1; i < queue_length; i++) {
    10b8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <queue_length>
    10bc:	92 30       	cpi	r25, 0x02	; 2
    10be:	b4 f0       	brlt	.+44     	; 0x10ec <joystick_moved+0x40>
    10c0:	21 e0       	ldi	r18, 0x01	; 1
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	91 e0       	ldi	r25, 0x01	; 1
			joystick_queue[i-1] = joystick_queue[i];
    10c6:	f9 01       	movw	r30, r18
    10c8:	ea 51       	subi	r30, 0x1A	; 26
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	40 81       	ld	r20, Z
    10ce:	f9 01       	movw	r30, r18
    10d0:	eb 51       	subi	r30, 0x1B	; 27
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	40 83       	st	Z, r20
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = joystick_queue[0];
		
		for(uint8_t i = 1; i < queue_length; i++) {
    10d6:	9f 5f       	subi	r25, 0xFF	; 255
    10d8:	29 2f       	mov	r18, r25
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <queue_length>
    10e0:	04 2e       	mov	r0, r20
    10e2:	00 0c       	add	r0, r0
    10e4:	55 0b       	sbc	r21, r21
    10e6:	24 17       	cp	r18, r20
    10e8:	35 07       	cpc	r19, r21
    10ea:	6c f3       	brlt	.-38     	; 0x10c6 <joystick_moved+0x1a>
			joystick_queue[i-1] = joystick_queue[i];
		}
		queue_length--;
    10ec:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <queue_length>
    10f0:	91 50       	subi	r25, 0x01	; 1
    10f2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <queue_length>
    10f6:	08 95       	ret
	// Next time through the loop, do the other direction
	x_or_y ^= 1;
}

int8_t joystick_moved(void) {
	int8_t return_value = NO_JOYSTICK_MOVEMENT;	// Assume no joystick movement
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
			joystick_queue[i-1] = joystick_queue[i];
		}
		queue_length--;
	}
	return return_value;
}
    10fa:	08 95       	ret

000010fc <kill_sound>:
	return (dutycycle * clockperiod) / 100;
}

// Turn the sound off
void kill_sound() {
	TCCR1A = 0;
    10fc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0;
    1100:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1104:	08 95       	ret

00001106 <init_sound>:
}

void init_sound() {
	// Make pin OC1B be an output
	if ((PIND & (1 << 6)) >> 6) {
    1106:	4e 9b       	sbis	0x09, 6	; 9
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <init_sound+0x12>
		DDRD |= (1 << 4);
    110a:	54 9a       	sbi	0x0a, 4	; 10
	
		// Set up timer/counter 1 for Fast PWM, counting from 0 to the value in OCR1A
		// before reseting to 0. Count at 1MHz (CLK/8).
		// Configure output OC1B to be clear on compare match and set on timer/counter
		// overflow (non-inverting mode).
		TCCR1A = (1 << COM1B1) |(0 << COM1B0) | (1 << WGM11) | (1 << WGM10);
    110c:	83 e2       	ldi	r24, 0x23	; 35
    110e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
		TCCR1B = (1 << WGM13) | (1 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10);
    1112:	8a e1       	ldi	r24, 0x1A	; 26
    1114:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1118:	08 95       	ret

0000111a <set_sound>:
	}
}

void set_sound(uint16_t freq, float dutycycle) {
    111a:	8f 92       	push	r8
    111c:	9f 92       	push	r9
    111e:	af 92       	push	r10
    1120:	bf 92       	push	r11
    1122:	cf 92       	push	r12
    1124:	df 92       	push	r13
    1126:	ef 92       	push	r14
    1128:	ff 92       	push	r15
    112a:	4a 01       	movw	r8, r20
    112c:	5b 01       	movw	r10, r22

uint16_t	notes[7] = {261, 294, 329, 349, 392, 440, 494};
// For a given frequency (Hz), return the clock period (in terms of the
// number of clock cycles of a 1MHz clock)
static uint16_t freq_to_clock_period(uint16_t freq) {
	return (1000000UL / freq);	// UL makes the constant an unsigned long (32 bits)
    112e:	9c 01       	movw	r18, r24
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e0       	ldi	r21, 0x00	; 0
    1134:	60 e4       	ldi	r22, 0x40	; 64
    1136:	72 e4       	ldi	r23, 0x42	; 66
    1138:	8f e0       	ldi	r24, 0x0F	; 15
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodsi4>
    1140:	69 01       	movw	r12, r18
    1142:	7a 01       	movw	r14, r20
}

// Return the width of a pulse (in clock cycles) given a duty cycle (%) and
// the period of the clock (measured in clock cycles)
static uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
	return (dutycycle * clockperiod) / 100;
    1144:	b9 01       	movw	r22, r18
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatunsisf>
    114e:	a5 01       	movw	r20, r10
    1150:	94 01       	movw	r18, r8
    1152:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__mulsf3>
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	48 ec       	ldi	r20, 0xC8	; 200
    115c:	52 e4       	ldi	r21, 0x42	; 66
    115e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <__divsf3>
    1162:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <__fixunssfsi>
void set_sound(uint16_t freq, float dutycycle) {
	uint16_t clockperiod = freq_to_clock_period(freq);
	uint16_t pulsewidth = duty_cycle_to_pulse_width(dutycycle, clockperiod);

	// Set the maximum count value for timer/counter 1 to be one less than the clockperiod
	OCR1A = clockperiod - 1;
    1166:	21 e0       	ldi	r18, 0x01	; 1
    1168:	c2 1a       	sub	r12, r18
    116a:	d1 08       	sbc	r13, r1
    116c:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1170:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	// Set the count compare value based on the pulse width. The value will be 1 less
	// than the pulse width - unless the pulse width is 0.
	if(pulsewidth == 0) {
    1174:	61 15       	cp	r22, r1
    1176:	71 05       	cpc	r23, r1
    1178:	29 f4       	brne	.+10     	; 0x1184 <set_sound+0x6a>
		OCR1B = 0;
    117a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    117e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <set_sound+0x76>
	} else {
		OCR1B = pulsewidth - 1;
    1184:	61 50       	subi	r22, 0x01	; 1
    1186:	71 09       	sbc	r23, r1
    1188:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    118c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	}
}
    1190:	ff 90       	pop	r15
    1192:	ef 90       	pop	r14
    1194:	df 90       	pop	r13
    1196:	cf 90       	pop	r12
    1198:	bf 90       	pop	r11
    119a:	af 90       	pop	r10
    119c:	9f 90       	pop	r9
    119e:	8f 90       	pop	r8
    11a0:	08 95       	ret

000011a2 <random_sound>:

// Play a random sound
void random_sound() {
	set_sound(notes[random() % 7], 2);
    11a2:	0e 94 a4 11 	call	0x2348	; 0x2348 <random>
    11a6:	27 e0       	ldi	r18, 0x07	; 7
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	0e 94 17 11 	call	0x222e	; 0x222e <__divmodsi4>
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	fb 01       	movw	r30, r22
    11b8:	eb 5f       	subi	r30, 0xFB	; 251
    11ba:	fe 4f       	sbci	r31, 0xFE	; 254
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	70 e4       	ldi	r23, 0x40	; 64
    11c4:	80 81       	ld	r24, Z
    11c6:	91 81       	ldd	r25, Z+1	; 0x01
    11c8:	0e 94 8d 08 	call	0x111a	; 0x111a <set_sound>
    11cc:	08 95       	ret

000011ce <initialise_hardware>:
	// Turn on global interrupts
	sei();
}

void delay_ms(uint16_t count) {
	while(count--) {
    11ce:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <ledmatrix_setup>
    11d2:	0e 94 2e 01 	call	0x25c	; 0x25c <init_button_interrupts>
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	7b e4       	ldi	r23, 0x4B	; 75
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <init_serial_stdio>
    11e4:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <init_timer0>
    11e8:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <init_display>
    11ec:	78 94       	sei
    11ee:	08 95       	ret

000011f0 <splash_screen>:
		_delay_ms(1);

	}
}

void splash_screen(void) {
    11f0:	7f 92       	push	r7
    11f2:	8f 92       	push	r8
    11f4:	9f 92       	push	r9
    11f6:	af 92       	push	r10
    11f8:	bf 92       	push	r11
    11fa:	cf 92       	push	r12
    11fc:	df 92       	push	r13
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
	uint32_t current_time = get_current_time();
    120a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <get_current_time>
    120e:	6b 01       	movw	r12, r22
    1210:	7c 01       	movw	r14, r24
		138, 155, 116, 20000, 123, 146, 164, 155, 146, 185, 207, 196, 185, 174, 185, 174, 123, 164, 146}; 
	static uint16_t	delays[30] = {165, 165, 83, 165, 333, 160, 500, 190, 120, 165, 
		333, 165, 500, 500, 165, 165, 83, 165, 333, 160, 333, 165, 333, 165, 83, 400, 333, 165, 800}; 
	uint8_t i = 0;
	// Clear terminal screen and output a message
	clear_terminal();
    1212:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <clear_terminal>
	move_cursor(10,10);
    1216:	6a e0       	ldi	r22, 0x0A	; 10
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	8a e0       	ldi	r24, 0x0A	; 10
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <move_cursor>
	printf_P(PSTR("Asteroids"));
    1222:	88 e2       	ldi	r24, 0x28	; 40
    1224:	91 e0       	ldi	r25, 0x01	; 1
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
	move_cursor(10,12);
    122e:	6c e0       	ldi	r22, 0x0C	; 12
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	8a e0       	ldi	r24, 0x0A	; 10
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Matthew Burton"));
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	9f 93       	push	r25
    1240:	8f 93       	push	r24
    1242:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1246:	0e 94 32 07 	call	0xe64	; 0xe64 <ledmatrix_clear>
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
	// Enjoy this trash song.
	static uint16_t theme_song[30] = {123, 146, 164, 155, 146, 185, 174, 146, 164, 155, 
		138, 155, 116, 20000, 123, 146, 164, 155, 146, 185, 207, 196, 185, 174, 185, 174, 123, 164, 146}; 
	static uint16_t	delays[30] = {165, 165, 83, 165, 333, 160, 500, 190, 120, 165, 
		333, 165, 500, 500, 165, 165, 83, 165, 333, 160, 333, 165, 333, 165, 83, 400, 333, 165, 800}; 
	uint8_t i = 0;
    1252:	71 2c       	mov	r7, r1
			current_time = get_current_time();
			// Every specified time interval, change the sound.
			if (current_time >= note_time + delays[i]) {
				init_sound();
				set_sound(theme_song[i] + 300, 0.5);
				i = (i + 1) % 30;
    1254:	0e e1       	ldi	r16, 0x1E	; 30
    1256:	10 e0       	ldi	r17, 0x00	; 0
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("ASTEROIDS MATTHEW BURTON S45293867", COLOUR_GREEN);
    1258:	60 ef       	ldi	r22, 0xF0	; 240
    125a:	8e e3       	ldi	r24, 0x3E	; 62
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	0e 94 ca 0b 	call	0x1794	; 0x1794 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		
		while(scroll_display()) {
    1262:	40 c0       	rjmp	.+128    	; 0x12e4 <splash_screen+0xf4>
			current_time = get_current_time();
    1264:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <get_current_time>
    1268:	4b 01       	movw	r8, r22
    126a:	5c 01       	movw	r10, r24
			// Every specified time interval, change the sound.
			if (current_time >= note_time + delays[i]) {
    126c:	c7 2d       	mov	r28, r7
    126e:	d0 e0       	ldi	r29, 0x00	; 0
    1270:	fe 01       	movw	r30, r28
    1272:	ee 0f       	add	r30, r30
    1274:	ff 1f       	adc	r31, r31
    1276:	e3 56       	subi	r30, 0x63	; 99
    1278:	fe 4f       	sbci	r31, 0xFE	; 254
    127a:	80 81       	ld	r24, Z
    127c:	91 81       	ldd	r25, Z+1	; 0x01
    127e:	a7 01       	movw	r20, r14
    1280:	96 01       	movw	r18, r12
    1282:	28 0f       	add	r18, r24
    1284:	39 1f       	adc	r19, r25
    1286:	41 1d       	adc	r20, r1
    1288:	51 1d       	adc	r21, r1
    128a:	82 16       	cp	r8, r18
    128c:	93 06       	cpc	r9, r19
    128e:	a4 06       	cpc	r10, r20
    1290:	b5 06       	cpc	r11, r21
    1292:	c8 f0       	brcs	.+50     	; 0x12c6 <splash_screen+0xd6>
				init_sound();
    1294:	0e 94 83 08 	call	0x1106	; 0x1106 <init_sound>
				set_sound(theme_song[i] + 300, 0.5);
    1298:	fe 01       	movw	r30, r28
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ef 59       	subi	r30, 0x9F	; 159
    12a0:	fe 4f       	sbci	r31, 0xFE	; 254
    12a2:	80 81       	ld	r24, Z
    12a4:	91 81       	ldd	r25, Z+1	; 0x01
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	7f e3       	ldi	r23, 0x3F	; 63
    12ae:	84 5d       	subi	r24, 0xD4	; 212
    12b0:	9e 4f       	sbci	r25, 0xFE	; 254
    12b2:	0e 94 8d 08 	call	0x111a	; 0x111a <set_sound>
				i = (i + 1) % 30;
    12b6:	ce 01       	movw	r24, r28
    12b8:	01 96       	adiw	r24, 0x01	; 1
    12ba:	b8 01       	movw	r22, r16
    12bc:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <__divmodhi4>
    12c0:	78 2e       	mov	r7, r24
				note_time = current_time;
    12c2:	75 01       	movw	r14, r10
    12c4:	64 01       	movw	r12, r8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	40 e7       	ldi	r20, 0x70	; 112
    12ca:	52 e0       	ldi	r21, 0x02	; 2
    12cc:	31 50       	subi	r19, 0x01	; 1
    12ce:	40 40       	sbci	r20, 0x00	; 0
    12d0:	50 40       	sbci	r21, 0x00	; 0
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <splash_screen+0xdc>
    12d4:	00 c0       	rjmp	.+0      	; 0x12d6 <splash_screen+0xe6>
    12d6:	00 00       	nop
			}
			_delay_ms(100);
			// Play the sound for 100ms then end it.
			kill_sound();
    12d8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <kill_sound>
			if(button_pushed() != NO_BUTTON_PUSHED) {
    12dc:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
    12e0:	8f 3f       	cpi	r24, 0xFF	; 255
    12e2:	29 f4       	brne	.+10     	; 0x12ee <splash_screen+0xfe>
	while(1) {
		set_scrolling_display_text("ASTEROIDS MATTHEW BURTON S45293867", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		
		while(scroll_display()) {
    12e4:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <scroll_display>
    12e8:	81 11       	cpse	r24, r1
    12ea:	bc cf       	rjmp	.-136    	; 0x1264 <splash_screen+0x74>
    12ec:	b5 cf       	rjmp	.-150    	; 0x1258 <splash_screen+0x68>
			if(button_pushed() != NO_BUTTON_PUSHED) {
				return;
			}
		}
	}
}
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	bf 90       	pop	r11
    1300:	af 90       	pop	r10
    1302:	9f 90       	pop	r9
    1304:	8f 90       	pop	r8
    1306:	7f 90       	pop	r7
    1308:	08 95       	ret

0000130a <new_game>:

void new_game(void) {
	// Initialise the game and display
	initialise_game();
    130a:	0e 94 bf 03 	call	0x77e	; 0x77e <initialise_game>
	
	// Clear the serial terminal
	clear_terminal();
    130e:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <clear_terminal>
	move_cursor(2,2);
    1312:	62 e0       	ldi	r22, 0x02	; 2
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <move_cursor>
	printf_P(PSTR("Asteroids"));
    131e:	86 ef       	ldi	r24, 0xF6	; 246
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	9f 93       	push	r25
    1324:	8f 93       	push	r24
    1326:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
	
	// Initialise the score
	init_score();
    132a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <init_score>
	move_cursor(2,4);
    132e:	64 e0       	ldi	r22, 0x04	; 4
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	82 e0       	ldi	r24, 0x02	; 2
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <move_cursor>
	printf_P(PSTR("Score: %lu"), get_score());
    133a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <get_score>
    133e:	9f 93       	push	r25
    1340:	8f 93       	push	r24
    1342:	7f 93       	push	r23
    1344:	6f 93       	push	r22
    1346:	8b ee       	ldi	r24, 0xEB	; 235
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9f 93       	push	r25
    134c:	8f 93       	push	r24
    134e:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
	
	// Initialise lives.
	init_lives();
    1352:	0e 94 36 07 	call	0xe6c	; 0xe6c <init_lives>
		
	init_joystick();
    1356:	0e 94 ae 07 	call	0xf5c	; 0xf5c <init_joystick>

	move_cursor(2, 6);
    135a:	66 e0       	ldi	r22, 0x06	; 6
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	82 e0       	ldi	r24, 0x02	; 2
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <move_cursor>
	printf_P(PSTR("You have %lu lives remaining."), get_lives());
    1366:	0e 94 a5 07 	call	0xf4a	; 0xf4a <get_lives>
    136a:	9f 93       	push	r25
    136c:	8f 93       	push	r24
    136e:	7f 93       	push	r23
    1370:	6f 93       	push	r22
    1372:	8d ec       	ldi	r24, 0xCD	; 205
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9f 93       	push	r25
    1378:	8f 93       	push	r24
    137a:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    137e:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
	clear_serial_input_buffer();
    1382:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <clear_serial_input_buffer>
}
    1386:	8d b7       	in	r24, 0x3d	; 61
    1388:	9e b7       	in	r25, 0x3e	; 62
    138a:	0e 96       	adiw	r24, 0x0e	; 14
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	9e bf       	out	0x3e, r25	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	8d bf       	out	0x3d, r24	; 61
    1396:	08 95       	ret

00001398 <play_game>:

void play_game(void) {
    1398:	2f 92       	push	r2
    139a:	3f 92       	push	r3
    139c:	4f 92       	push	r4
    139e:	5f 92       	push	r5
    13a0:	6f 92       	push	r6
    13a2:	7f 92       	push	r7
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	00 d0       	rcall	.+0      	; 0x13be <play_game+0x26>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <play_game+0x28>
    13c0:	1f 92       	push	r1
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t characters_into_escape_sequence = 0;
	uint8_t sound_duration_1 = 0;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
    13c6:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <get_current_time>
    13ca:	69 83       	std	Y+1, r22	; 0x01
    13cc:	7a 83       	std	Y+2, r23	; 0x02
    13ce:	8b 83       	std	Y+3, r24	; 0x03
    13d0:	9c 83       	std	Y+4, r25	; 0x04
	last_move_time = current_time;
	last_move_asteroid = current_time;
	joystick_move_time = current_time;
    13d2:	4b 01       	movw	r8, r22
    13d4:	5c 01       	movw	r10, r24
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
	last_move_time = current_time;
	last_move_asteroid = current_time;
    13d6:	2b 01       	movw	r4, r22
    13d8:	3c 01       	movw	r6, r24
	uint32_t current_time, last_move_time, last_move_asteroid, joystick_move_time;
	int8_t button;
	uint8_t joystick;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	uint8_t sound_duration_1 = 0;
    13da:	10 e0       	ldi	r17, 0x00	; 0
void play_game(void) {
	uint32_t current_time, last_move_time, last_move_asteroid, joystick_move_time;
	int8_t button;
	uint8_t joystick;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    13dc:	00 e0       	ldi	r16, 0x00	; 0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    13de:	33 24       	eor	r3, r3
    13e0:	3a 94       	dec	r3
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    13e2:	68 94       	set
    13e4:	22 24       	eor	r2, r2
    13e6:	21 f8       	bld	r2, 1
	last_move_time = current_time;
	last_move_asteroid = current_time;
	joystick_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    13e8:	fd c0       	rjmp	.+506    	; 0x15e4 <play_game+0x24c>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
    13ea:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
    13ee:	8d 83       	std	Y+5, r24	; 0x05
		joystick = joystick_moved();
    13f0:	0e 94 56 08 	call	0x10ac	; 0x10ac <joystick_moved>
    13f4:	e8 2e       	mov	r14, r24
		if(button == NO_BUTTON_PUSHED) {
    13f6:	3d 81       	ldd	r19, Y+5	; 0x05
    13f8:	3f 3f       	cpi	r19, 0xFF	; 255
    13fa:	09 f0       	breq	.+2      	; 0x13fe <play_game+0x66>
    13fc:	03 c1       	rjmp	.+518    	; 0x1604 <play_game+0x26c>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    13fe:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <serial_input_available>
    1402:	88 23       	and	r24, r24
    1404:	09 f4       	brne	.+2      	; 0x1408 <play_game+0x70>
    1406:	f7 c0       	rjmp	.+494    	; 0x15f6 <play_game+0x25e>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1408:	ef e4       	ldi	r30, 0x4F	; 79
    140a:	f3 e0       	ldi	r31, 0x03	; 3
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1414:	01 11       	cpse	r16, r1
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <play_game+0x8a>
    1418:	8b 31       	cpi	r24, 0x1B	; 27
    141a:	09 f4       	brne	.+2      	; 0x141e <play_game+0x86>
    141c:	e9 c0       	rjmp	.+466    	; 0x15f0 <play_game+0x258>
    141e:	23 2d       	mov	r18, r3
    1420:	0b c0       	rjmp	.+22     	; 0x1438 <play_game+0xa0>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1422:	01 30       	cpi	r16, 0x01	; 1
    1424:	29 f4       	brne	.+10     	; 0x1430 <play_game+0x98>
    1426:	8b 35       	cpi	r24, 0x5B	; 91
    1428:	09 f4       	brne	.+2      	; 0x142c <play_game+0x94>
    142a:	e4 c0       	rjmp	.+456    	; 0x15f4 <play_game+0x25c>
    142c:	23 2d       	mov	r18, r3
    142e:	04 c0       	rjmp	.+8      	; 0x1438 <play_game+0xa0>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    1430:	02 30       	cpi	r16, 0x02	; 2
    1432:	29 f4       	brne	.+10     	; 0x143e <play_game+0xa6>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    1434:	28 2f       	mov	r18, r24
					serial_input = -1;  // Don't further process this character - we
    1436:	83 2d       	mov	r24, r3
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==1) {
    1438:	24 34       	cpi	r18, 0x44	; 68
    143a:	11 f4       	brne	.+4      	; 0x1440 <play_game+0xa8>
    143c:	0a c0       	rjmp	.+20     	; 0x1452 <play_game+0xba>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    143e:	23 2d       	mov	r18, r3
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==1) {
    1440:	98 2f       	mov	r25, r24
    1442:	9f 7d       	andi	r25, 0xDF	; 223
    1444:	9c 34       	cpi	r25, 0x4C	; 76
    1446:	39 f0       	breq	.+14     	; 0x1456 <play_game+0xbe>
    1448:	e4 c0       	rjmp	.+456    	; 0x1612 <play_game+0x27a>
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
		joystick = joystick_moved();
    144a:	9e 2d       	mov	r25, r14
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==1) {
    144c:	91 30       	cpi	r25, 0x01	; 1
    144e:	b9 f4       	brne	.+46     	; 0x147e <play_game+0xe6>
    1450:	05 c0       	rjmp	.+10     	; 0x145c <play_game+0xc4>
    1452:	00 e0       	ldi	r16, 0x00	; 0
    1454:	03 c0       	rjmp	.+6      	; 0x145c <play_game+0xc4>
    1456:	00 e0       	ldi	r16, 0x00	; 0
    1458:	01 c0       	rjmp	.+2      	; 0x145c <play_game+0xc4>
    145a:	00 e0       	ldi	r16, 0x00	; 0
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			if(move_base(MOVE_LEFT)) {
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	0e 94 39 05 	call	0xa72	; 0xa72 <move_base>
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <play_game+0xd0>
    1466:	5b c0       	rjmp	.+182    	; 0x151e <play_game+0x186>
				init_sound();
    1468:	0e 94 83 08 	call	0x1106	; 0x1106 <init_sound>
				set_sound(600, 2);
    146c:	40 e0       	ldi	r20, 0x00	; 0
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	60 e0       	ldi	r22, 0x00	; 0
    1472:	70 e4       	ldi	r23, 0x40	; 64
    1474:	88 e5       	ldi	r24, 0x58	; 88
    1476:	92 e0       	ldi	r25, 0x02	; 2
    1478:	0e 94 8d 08 	call	0x111a	; 0x111a <set_sound>
    147c:	c8 c0       	rjmp	.+400    	; 0x160e <play_game+0x276>
				sound_duration_1 = 255;
			}
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ' || joystick==3) {
    147e:	fd 81       	ldd	r31, Y+5	; 0x05
    1480:	f2 30       	cpi	r31, 0x02	; 2
    1482:	41 f0       	breq	.+16     	; 0x1494 <play_game+0xfc>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    1484:	23 2d       	mov	r18, r3
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    1486:	83 2d       	mov	r24, r3
			if(move_base(MOVE_LEFT)) {
				init_sound();
				set_sound(600, 2);
				sound_duration_1 = 255;
			}
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ' || joystick==3) {
    1488:	21 34       	cpi	r18, 0x41	; 65
    148a:	21 f0       	breq	.+8      	; 0x1494 <play_game+0xfc>
    148c:	80 32       	cpi	r24, 0x20	; 32
    148e:	11 f0       	breq	.+4      	; 0x1494 <play_game+0xfc>
    1490:	93 30       	cpi	r25, 0x03	; 3
    1492:	81 f4       	brne	.+32     	; 0x14b4 <play_game+0x11c>
			// Button 2 pressed or up cursor key escape sequence completed OR
			// space bar pressed - attempt to fire projectile
			if (fire_projectile()) {
    1494:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fire_projectile>
    1498:	88 23       	and	r24, r24
    149a:	09 f4       	brne	.+2      	; 0x149e <play_game+0x106>
    149c:	40 c0       	rjmp	.+128    	; 0x151e <play_game+0x186>
				init_sound();
    149e:	0e 94 83 08 	call	0x1106	; 0x1106 <init_sound>
				set_sound(494, 2);
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e4       	ldi	r23, 0x40	; 64
    14aa:	8e ee       	ldi	r24, 0xEE	; 238
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	0e 94 8d 08 	call	0x111a	; 0x111a <set_sound>
    14b2:	ad c0       	rjmp	.+346    	; 0x160e <play_game+0x276>
				sound_duration_1 = 255;
			}
		} else if(button==1 || escape_sequence_char=='B') {
    14b4:	3d 81       	ldd	r19, Y+5	; 0x05
    14b6:	31 30       	cpi	r19, 0x01	; 1
    14b8:	91 f1       	breq	.+100    	; 0x151e <play_game+0x186>
    14ba:	22 34       	cpi	r18, 0x42	; 66
    14bc:	81 f1       	breq	.+96     	; 0x151e <play_game+0x186>
			// Button 1 pressed OR down cursor key escape sequence completed
			// Ignore at present
		} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r' 
    14be:	33 23       	and	r19, r19
    14c0:	39 f0       	breq	.+14     	; 0x14d0 <play_game+0x138>
    14c2:	23 34       	cpi	r18, 0x43	; 67
    14c4:	29 f0       	breq	.+10     	; 0x14d0 <play_game+0x138>
    14c6:	8f 7d       	andi	r24, 0xDF	; 223
    14c8:	82 35       	cpi	r24, 0x52	; 82
    14ca:	11 f0       	breq	.+4      	; 0x14d0 <play_game+0x138>
		|| joystick==2) {
    14cc:	92 30       	cpi	r25, 0x02	; 2
    14ce:	81 f4       	brne	.+32     	; 0x14f0 <play_game+0x158>
			// Button 0 pressed OR right cursor key escape sequence completed OR
			// letter R (lowercase or uppercase) pressed - attempt to move right
			if(move_base(MOVE_RIGHT)) {
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	0e 94 39 05 	call	0xa72	; 0xa72 <move_base>
    14d6:	88 23       	and	r24, r24
    14d8:	11 f1       	breq	.+68     	; 0x151e <play_game+0x186>
				init_sound();
    14da:	0e 94 83 08 	call	0x1106	; 0x1106 <init_sound>
				set_sound(600, 2);
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e4       	ldi	r23, 0x40	; 64
    14e6:	88 e5       	ldi	r24, 0x58	; 88
    14e8:	92 e0       	ldi	r25, 0x02	; 2
    14ea:	0e 94 8d 08 	call	0x111a	; 0x111a <set_sound>
    14ee:	8f c0       	rjmp	.+286    	; 0x160e <play_game+0x276>
				sound_duration_1 = 255;
			}
		} else if(serial_input == 'p' || serial_input == 'P') {
    14f0:	80 35       	cpi	r24, 0x50	; 80
    14f2:	a9 f4       	brne	.+42     	; 0x151e <play_game+0x186>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			toggle_timer();
    14f4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <toggle_timer>
			kill_sound();
    14f8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <kill_sound>
			while(1) {
				// Get the button push and discard it
				button_pushed();
    14fc:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
				if(serial_input_available()) {
    1500:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <serial_input_available>
    1504:	88 23       	and	r24, r24
    1506:	d1 f3       	breq	.-12     	; 0x14fc <play_game+0x164>
					// Serial data was available - read the data from standard input
					serial_input = fgetc(stdin);
    1508:	ef e4       	ldi	r30, 0x4F	; 79
    150a:	f3 e0       	ldi	r31, 0x03	; 3
    150c:	80 81       	ld	r24, Z
    150e:	91 81       	ldd	r25, Z+1	; 0x01
    1510:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <fgetc>
					if (serial_input == 'p' || serial_input == 'P') {
    1514:	8f 7d       	andi	r24, 0xDF	; 223
    1516:	80 35       	cpi	r24, 0x50	; 80
    1518:	89 f7       	brne	.-30     	; 0x14fc <play_game+0x164>
						break;
					}
				}
			}
			toggle_timer();
    151a:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <toggle_timer>
		} 
		
		// Check if it is time to kill the sound
		if (sound_duration_1 == 0) {
    151e:	11 11       	cpse	r17, r1
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <play_game+0x190>
			kill_sound();
    1522:	0e 94 7e 08 	call	0x10fc	; 0x10fc <kill_sound>
    1526:	01 c0       	rjmp	.+2      	; 0x152a <play_game+0x192>
		} else {
			sound_duration_1--;
    1528:	11 50       	subi	r17, 0x01	; 1
		}
		
		current_time = get_current_time();
    152a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <get_current_time>
    152e:	6b 01       	movw	r12, r22
    1530:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= last_move_time + 200) {
    1532:	0e 94 0c 05 	call	0xa18	; 0xa18 <is_game_over>
    1536:	81 11       	cpse	r24, r1
    1538:	13 c0       	rjmp	.+38     	; 0x1560 <play_game+0x1c8>
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	ab 81       	ldd	r26, Y+3	; 0x03
    1540:	bc 81       	ldd	r27, Y+4	; 0x04
    1542:	88 53       	subi	r24, 0x38	; 56
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	af 4f       	sbci	r26, 0xFF	; 255
    1548:	bf 4f       	sbci	r27, 0xFF	; 255
    154a:	c8 16       	cp	r12, r24
    154c:	d9 06       	cpc	r13, r25
    154e:	ea 06       	cpc	r14, r26
    1550:	fb 06       	cpc	r15, r27
    1552:	30 f0       	brcs	.+12     	; 0x1560 <play_game+0x1c8>
			// 500ms (0.5 second) has passed since the last time we moved
			// the projectiles - move them - and keep track of the time we 
			// moved them
			advance_projectiles();
    1554:	0e 94 ca 04 	call	0x994	; 0x994 <advance_projectiles>
			last_move_time = current_time;
    1558:	c9 82       	std	Y+1, r12	; 0x01
    155a:	da 82       	std	Y+2, r13	; 0x02
    155c:	eb 82       	std	Y+3, r14	; 0x03
    155e:	fc 82       	std	Y+4, r15	; 0x04
		}
		
		if(current_time >= joystick_move_time + 50) {
    1560:	d5 01       	movw	r26, r10
    1562:	c4 01       	movw	r24, r8
    1564:	c2 96       	adiw	r24, 0x32	; 50
    1566:	a1 1d       	adc	r26, r1
    1568:	b1 1d       	adc	r27, r1
    156a:	c8 16       	cp	r12, r24
    156c:	d9 06       	cpc	r13, r25
    156e:	ea 06       	cpc	r14, r26
    1570:	fb 06       	cpc	r15, r27
    1572:	20 f0       	brcs	.+8      	; 0x157c <play_game+0x1e4>
			// 500ms (0.5 second) has passed since the last time we moved
			// the projectiles - move them - and keep track of the time we
			// moved them
			step_joystick();
    1574:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <step_joystick>
			joystick_move_time = current_time;
    1578:	46 01       	movw	r8, r12
    157a:	57 01       	movw	r10, r14
		}
	
		if(current_time >= last_move_asteroid + 1500 - get_score() * 10) {
    157c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <get_score>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	aa 1f       	adc	r26, r26
    158a:	bb 1f       	adc	r27, r27
    158c:	9c 01       	movw	r18, r24
    158e:	ad 01       	movw	r20, r26
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
    1594:	44 1f       	adc	r20, r20
    1596:	55 1f       	adc	r21, r21
    1598:	22 0f       	add	r18, r18
    159a:	33 1f       	adc	r19, r19
    159c:	44 1f       	adc	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	ba 01       	movw	r22, r20
    15a2:	a9 01       	movw	r20, r18
    15a4:	48 0f       	add	r20, r24
    15a6:	59 1f       	adc	r21, r25
    15a8:	6a 1f       	adc	r22, r26
    15aa:	7b 1f       	adc	r23, r27
    15ac:	d3 01       	movw	r26, r6
    15ae:	c2 01       	movw	r24, r4
    15b0:	84 52       	subi	r24, 0x24	; 36
    15b2:	9a 4f       	sbci	r25, 0xFA	; 250
    15b4:	af 4f       	sbci	r26, 0xFF	; 255
    15b6:	bf 4f       	sbci	r27, 0xFF	; 255
    15b8:	84 1b       	sub	r24, r20
    15ba:	95 0b       	sbc	r25, r21
    15bc:	a6 0b       	sbc	r26, r22
    15be:	b7 0b       	sbc	r27, r23
    15c0:	c8 16       	cp	r12, r24
    15c2:	d9 06       	cpc	r13, r25
    15c4:	ea 06       	cpc	r14, r26
    15c6:	fb 06       	cpc	r15, r27
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <play_game+0x23a>
			// 1000ms (1 seconds) has passed since the last time we moved
			// the asteroids - move them - and keep track of the time we
			// moved them
			advance_asteroids();
    15ca:	0e 94 8d 05 	call	0xb1a	; 0xb1a <advance_asteroids>
			
			last_move_asteroid = current_time;
    15ce:	26 01       	movw	r4, r12
    15d0:	37 01       	movw	r6, r14
		
		/* Displays the score on the seven segment display. 
		Wraps around at 100. The refresh rate is every 3 milliseconds. 
		Might need to use above method to improve performance.
		*/
		set_value(get_score());
    15d2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <get_score>
    15d6:	cb 01       	movw	r24, r22
    15d8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <set_value>
		display_data(current_time);
    15dc:	c7 01       	movw	r24, r14
    15de:	b6 01       	movw	r22, r12
    15e0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <display_data>
	last_move_time = current_time;
	last_move_asteroid = current_time;
	joystick_move_time = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    15e4:	0e 94 0c 05 	call	0xa18	; 0xa18 <is_game_over>
    15e8:	88 23       	and	r24, r24
    15ea:	09 f4       	brne	.+2      	; 0x15ee <play_game+0x256>
    15ec:	fe ce       	rjmp	.-516    	; 0x13ea <play_game+0x52>
    15ee:	17 c0       	rjmp	.+46     	; 0x161e <play_game+0x286>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    15f0:	01 e0       	ldi	r16, 0x01	; 1
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <play_game+0x25e>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    15f4:	02 2d       	mov	r16, r2
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
		joystick = joystick_moved();
    15f6:	9e 2d       	mov	r25, r14
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==1) {
    15f8:	91 30       	cpi	r25, 0x01	; 1
    15fa:	09 f4       	brne	.+2      	; 0x15fe <play_game+0x266>
    15fc:	2f cf       	rjmp	.-418    	; 0x145c <play_game+0xc4>
    15fe:	23 2d       	mov	r18, r3
    1600:	83 2d       	mov	r24, r3
    1602:	46 cf       	rjmp	.-372    	; 0x1490 <play_game+0xf8>
    1604:	fd 81       	ldd	r31, Y+5	; 0x05
    1606:	f3 30       	cpi	r31, 0x03	; 3
    1608:	09 f4       	brne	.+2      	; 0x160c <play_game+0x274>
    160a:	28 cf       	rjmp	.-432    	; 0x145c <play_game+0xc4>
    160c:	1e cf       	rjmp	.-452    	; 0x144a <play_game+0xb2>
    160e:	1f ef       	ldi	r17, 0xFF	; 255
    1610:	8b cf       	rjmp	.-234    	; 0x1528 <play_game+0x190>
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
		joystick = joystick_moved();
    1612:	9e 2d       	mov	r25, r14
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l' || joystick==1) {
    1614:	91 30       	cpi	r25, 0x01	; 1
    1616:	09 f4       	brne	.+2      	; 0x161a <play_game+0x282>
    1618:	20 cf       	rjmp	.-448    	; 0x145a <play_game+0xc2>
    161a:	00 e0       	ldi	r16, 0x00	; 0
    161c:	35 cf       	rjmp	.-406    	; 0x1488 <play_game+0xf0>
		*/
		set_value(get_score());
		display_data(current_time);
	}
	// We get here if the game is over.
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	df 90       	pop	r13
    1636:	cf 90       	pop	r12
    1638:	bf 90       	pop	r11
    163a:	af 90       	pop	r10
    163c:	9f 90       	pop	r9
    163e:	8f 90       	pop	r8
    1640:	7f 90       	pop	r7
    1642:	6f 90       	pop	r6
    1644:	5f 90       	pop	r5
    1646:	4f 90       	pop	r4
    1648:	3f 90       	pop	r3
    164a:	2f 90       	pop	r2
    164c:	08 95       	ret

0000164e <handle_game_over>:

void handle_game_over() {
    164e:	cf 92       	push	r12
    1650:	df 92       	push	r13
    1652:	ef 92       	push	r14
    1654:	ff 92       	push	r15
    1656:	cf 93       	push	r28
	kill_sound();
    1658:	0e 94 7e 08 	call	0x10fc	; 0x10fc <kill_sound>
	uint32_t current_time = get_current_time();
    165c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <get_current_time>
	uint8_t game_over_count = 0;
	game_over_count += game_over_animation(current_time, 1);
    1660:	41 e0       	ldi	r20, 0x01	; 1
    1662:	0e 94 44 06 	call	0xc88	; 0xc88 <game_over_animation>
    1666:	c8 2f       	mov	r28, r24
	move_cursor(10,14);
    1668:	6e e0       	ldi	r22, 0x0E	; 14
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	8a e0       	ldi	r24, 0x0A	; 10
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1674:	83 ec       	ldi	r24, 0xC3	; 195
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9f 93       	push	r25
    167a:	8f 93       	push	r24
    167c:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
	move_cursor(10,15);
    1680:	6f e0       	ldi	r22, 0x0F	; 15
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	8a e0       	ldi	r24, 0x0A	; 10
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    168c:	85 ea       	ldi	r24, 0xA5	; 165
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	9f 93       	push	r25
    1692:	8f 93       	push	r24
    1694:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
    1698:	2f ef       	ldi	r18, 0xFF	; 255
    169a:	89 e6       	ldi	r24, 0x69	; 105
    169c:	98 e1       	ldi	r25, 0x18	; 24
    169e:	21 50       	subi	r18, 0x01	; 1
    16a0:	80 40       	sbci	r24, 0x00	; 0
    16a2:	90 40       	sbci	r25, 0x00	; 0
    16a4:	e1 f7       	brne	.-8      	; 0x169e <handle_game_over+0x50>
    16a6:	00 c0       	rjmp	.+0      	; 0x16a8 <handle_game_over+0x5a>
    16a8:	00 00       	nop
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	32 c0       	rjmp	.+100    	; 0x1718 <handle_game_over+0xca>
	_delay_ms(1000);
	while(button_pushed() == NO_BUTTON_PUSHED) {
		current_time = get_current_time();
    16b4:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <get_current_time>
    16b8:	6b 01       	movw	r12, r22
    16ba:	7c 01       	movw	r14, r24
		display_data(current_time);
    16bc:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <display_data>
		if (game_over_count < 16) {
    16c0:	c0 31       	cpi	r28, 0x10	; 16
    16c2:	38 f4       	brcc	.+14     	; 0x16d2 <handle_game_over+0x84>
			game_over_count += game_over_animation(current_time, 1);
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	c7 01       	movw	r24, r14
    16c8:	b6 01       	movw	r22, r12
    16ca:	0e 94 44 06 	call	0xc88	; 0xc88 <game_over_animation>
    16ce:	c8 0f       	add	r28, r24
    16d0:	23 c0       	rjmp	.+70     	; 0x1718 <handle_game_over+0xca>
		} else if (game_over_count == 16) {
    16d2:	c0 31       	cpi	r28, 0x10	; 16
    16d4:	39 f4       	brne	.+14     	; 0x16e4 <handle_game_over+0x96>
			game_over_count += game_over_animation(current_time, 2);
    16d6:	42 e0       	ldi	r20, 0x02	; 2
    16d8:	c7 01       	movw	r24, r14
    16da:	b6 01       	movw	r22, r12
    16dc:	0e 94 44 06 	call	0xc88	; 0xc88 <game_over_animation>
    16e0:	c8 0f       	add	r28, r24
    16e2:	1a c0       	rjmp	.+52     	; 0x1718 <handle_game_over+0xca>
		}  else if (game_over_count < 100) {
    16e4:	c4 36       	cpi	r28, 0x64	; 100
    16e6:	38 f4       	brcc	.+14     	; 0x16f6 <handle_game_over+0xa8>
			game_over_count += game_over_animation(current_time, 3);
    16e8:	43 e0       	ldi	r20, 0x03	; 3
    16ea:	c7 01       	movw	r24, r14
    16ec:	b6 01       	movw	r22, r12
    16ee:	0e 94 44 06 	call	0xc88	; 0xc88 <game_over_animation>
    16f2:	c8 0f       	add	r28, r24
    16f4:	11 c0       	rjmp	.+34     	; 0x1718 <handle_game_over+0xca>
		} else if (game_over_count == 100) {
    16f6:	c4 36       	cpi	r28, 0x64	; 100
    16f8:	39 f4       	brne	.+14     	; 0x1708 <handle_game_over+0xba>
			game_over_count += game_over_animation(current_time, 4);
    16fa:	44 e0       	ldi	r20, 0x04	; 4
    16fc:	c7 01       	movw	r24, r14
    16fe:	b6 01       	movw	r22, r12
    1700:	0e 94 44 06 	call	0xc88	; 0xc88 <game_over_animation>
    1704:	c8 0f       	add	r28, r24
    1706:	08 c0       	rjmp	.+16     	; 0x1718 <handle_game_over+0xca>
		} else if (game_over_count < 110) {
    1708:	ce 36       	cpi	r28, 0x6E	; 110
    170a:	30 f4       	brcc	.+12     	; 0x1718 <handle_game_over+0xca>
			game_over_count += game_over_animation(current_time, 5);
    170c:	45 e0       	ldi	r20, 0x05	; 5
    170e:	c7 01       	movw	r24, r14
    1710:	b6 01       	movw	r22, r12
    1712:	0e 94 44 06 	call	0xc88	; 0xc88 <game_over_animation>
    1716:	c8 0f       	add	r28, r24
	move_cursor(10,14);
	printf_P(PSTR("GAME OVER"));
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	_delay_ms(1000);
	while(button_pushed() == NO_BUTTON_PUSHED) {
    1718:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
    171c:	8f 3f       	cpi	r24, 0xFF	; 255
    171e:	51 f2       	breq	.-108    	; 0x16b4 <handle_game_over+0x66>
			game_over_count += game_over_animation(current_time, 4);
		} else if (game_over_count < 110) {
			game_over_count += game_over_animation(current_time, 5);
		}
	}
	init_lives();
    1720:	0e 94 36 07 	call	0xe6c	; 0xe6c <init_lives>
}
    1724:	cf 91       	pop	r28
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	08 95       	ret

00001730 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1730:	0e 94 e7 08 	call	0x11ce	; 0x11ce <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    1734:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <splash_screen>
	
	while(1) {
		new_game();
    1738:	0e 94 85 09 	call	0x130a	; 0x130a <new_game>
		play_game();
    173c:	0e 94 cc 09 	call	0x1398	; 0x1398 <play_game>
		handle_game_over();
    1740:	0e 94 27 0b 	call	0x164e	; 0x164e <handle_game_over>
    1744:	f9 cf       	rjmp	.-14     	; 0x1738 <main+0x8>

00001746 <init_score>:
#include "score.h"

uint32_t score;

void init_score(void) {
	score = 0;
    1746:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <score>
    174a:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <score+0x1>
    174e:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <score+0x2>
    1752:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <score+0x3>
    1756:	08 95       	ret

00001758 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1758:	40 91 2f 02 	lds	r20, 0x022F	; 0x80022f <score>
    175c:	50 91 30 02 	lds	r21, 0x0230	; 0x800230 <score+0x1>
    1760:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <score+0x2>
    1764:	70 91 32 02 	lds	r23, 0x0232	; 0x800232 <score+0x3>
    1768:	48 0f       	add	r20, r24
    176a:	59 1f       	adc	r21, r25
    176c:	61 1d       	adc	r22, r1
    176e:	71 1d       	adc	r23, r1
    1770:	40 93 2f 02 	sts	0x022F, r20	; 0x80022f <score>
    1774:	50 93 30 02 	sts	0x0230, r21	; 0x800230 <score+0x1>
    1778:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <score+0x2>
    177c:	70 93 32 02 	sts	0x0232, r23	; 0x800232 <score+0x3>
    1780:	08 95       	ret

00001782 <get_score>:
}

uint32_t get_score(void) {
	return score;
    1782:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <score>
    1786:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <score+0x1>
    178a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <score+0x2>
    178e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <score+0x3>
}
    1792:	08 95       	ret

00001794 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1794:	60 93 13 01 	sts	0x0113, r22	; 0x800113 <colour>
	display_string = string_to_display;
    1798:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <display_string+0x1>
    179c:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <display_string>
	next_col_ptr = 0;
    17a0:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <next_col_ptr+0x1>
    17a4:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <next_col_ptr>
	next_char_to_display = 0;
    17a8:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <next_char_to_display+0x1>
    17ac:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <next_char_to_display>
    17b0:	08 95       	ret

000017b2 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
    17be:	28 97       	sbiw	r28, 0x08	; 8
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    17ca:	e0 91 ef 01 	lds	r30, 0x01EF	; 0x8001ef <next_col_ptr>
    17ce:	f0 91 f0 01 	lds	r31, 0x01F0	; 0x8001f0 <next_col_ptr+0x1>
    17d2:	30 97       	sbiw	r30, 0x00	; 0
    17d4:	81 f0       	breq	.+32     	; 0x17f6 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    17d6:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    17d8:	10 ff       	sbrs	r17, 0
    17da:	06 c0       	rjmp	.+12     	; 0x17e8 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    17dc:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <next_col_ptr+0x1>
    17e0:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17e4:	00 e0       	ldi	r16, 0x00	; 0
    17e6:	6b c0       	rjmp	.+214    	; 0x18be <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    17e8:	31 96       	adiw	r30, 0x01	; 1
    17ea:	f0 93 f0 01 	sts	0x01F0, r31	; 0x8001f0 <next_col_ptr+0x1>
    17ee:	e0 93 ef 01 	sts	0x01EF, r30	; 0x8001ef <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17f2:	00 e0       	ldi	r16, 0x00	; 0
    17f4:	64 c0       	rjmp	.+200    	; 0x18be <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    17f6:	e0 91 eb 01 	lds	r30, 0x01EB	; 0x8001eb <next_char_to_display>
    17fa:	f0 91 ec 01 	lds	r31, 0x01EC	; 0x8001ec <next_char_to_display+0x1>
    17fe:	30 97       	sbiw	r30, 0x00	; 0
    1800:	09 f4       	brne	.+2      	; 0x1804 <scroll_display+0x52>
    1802:	49 c0       	rjmp	.+146    	; 0x1896 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1804:	cf 01       	movw	r24, r30
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <next_char_to_display+0x1>
    180c:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <next_char_to_display>
    1810:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1812:	e1 11       	cpse	r30, r1
    1814:	0a c0       	rjmp	.+20     	; 0x182a <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1816:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <next_char_to_display+0x1>
    181a:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <next_char_to_display>
			shift_countdown = 16;
    181e:	80 e1       	ldi	r24, 0x10	; 16
    1820:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1824:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1826:	10 e0       	ldi	r17, 0x00	; 0
    1828:	4a c0       	rjmp	.+148    	; 0x18be <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    182a:	8f e9       	ldi	r24, 0x9F	; 159
    182c:	8e 0f       	add	r24, r30
    182e:	8a 31       	cpi	r24, 0x1A	; 26
    1830:	70 f4       	brcc	.+28     	; 0x184e <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	ec 57       	subi	r30, 0x7C	; 124
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	85 91       	lpm	r24, Z+
    183e:	94 91       	lpm	r25, Z
    1840:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <next_col_ptr+0x1>
    1844:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1848:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    184a:	10 e0       	ldi	r17, 0x00	; 0
    184c:	38 c0       	rjmp	.+112    	; 0x18be <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    184e:	8f eb       	ldi	r24, 0xBF	; 191
    1850:	8e 0f       	add	r24, r30
    1852:	8a 31       	cpi	r24, 0x1A	; 26
    1854:	70 f4       	brcc	.+28     	; 0x1872 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	ee 0f       	add	r30, r30
    185a:	ff 1f       	adc	r31, r31
    185c:	ec 53       	subi	r30, 0x3C	; 60
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	85 91       	lpm	r24, Z+
    1862:	94 91       	lpm	r25, Z
    1864:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <next_col_ptr+0x1>
    1868:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    186c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    186e:	10 e0       	ldi	r17, 0x00	; 0
    1870:	26 c0       	rjmp	.+76     	; 0x18be <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1872:	80 ed       	ldi	r24, 0xD0	; 208
    1874:	8e 0f       	add	r24, r30
    1876:	8a 30       	cpi	r24, 0x0A	; 10
    1878:	00 f5       	brcc	.+64     	; 0x18ba <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	ee 52       	subi	r30, 0x2E	; 46
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	85 91       	lpm	r24, Z+
    1886:	94 91       	lpm	r25, Z
    1888:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <next_col_ptr+0x1>
    188c:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1890:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	14 c0       	rjmp	.+40     	; 0x18be <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1896:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <display_string>
    189a:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    189e:	01 e0       	ldi	r16, 0x01	; 1
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <scroll_display+0xf4>
    18a4:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    18a6:	90 93 ec 01 	sts	0x01EC, r25	; 0x8001ec <next_char_to_display+0x1>
    18aa:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <next_char_to_display>
		display_string = 0;
    18ae:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <display_string+0x1>
    18b2:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    18b6:	10 e0       	ldi	r17, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    18ba:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    18bc:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    18be:	0e 94 24 07 	call	0xe48	; 0xe48 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    18c2:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <colour>
    18c6:	fe 01       	movw	r30, r28
    18c8:	38 96       	adiw	r30, 0x08	; 8
    18ca:	ce 01       	movw	r24, r28
    18cc:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    18ce:	11 23       	and	r17, r17
    18d0:	14 f4       	brge	.+4      	; 0x18d6 <scroll_display+0x124>
			column_colour_data[i] = colour;
    18d2:	20 83       	st	Z, r18
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    18d6:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    18d8:	11 0f       	add	r17, r17
    18da:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    18dc:	e8 17       	cp	r30, r24
    18de:	f9 07       	cpc	r31, r25
    18e0:	b1 f7       	brne	.-20     	; 0x18ce <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    18e2:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    18e4:	be 01       	movw	r22, r28
    18e6:	6f 5f       	subi	r22, 0xFF	; 255
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	8f e0       	ldi	r24, 0x0F	; 15
    18ec:	0e 94 07 07 	call	0xe0e	; 0xe0e <ledmatrix_update_column>
	if(shift_countdown > 0) {
    18f0:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <shift_countdown.1854>
    18f4:	88 23       	and	r24, r24
    18f6:	89 f0       	breq	.+34     	; 0x191a <scroll_display+0x168>
		shift_countdown--;
    18f8:	81 50       	subi	r24, 0x01	; 1
    18fa:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    18fe:	00 23       	and	r16, r16
    1900:	11 f0       	breq	.+4      	; 0x1906 <scroll_display+0x154>
    1902:	88 23       	and	r24, r24
    1904:	11 f0       	breq	.+4      	; 0x190a <scroll_display+0x158>
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	03 c0       	rjmp	.+6      	; 0x1910 <scroll_display+0x15e>
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <scroll_display+0x15e>
    190e:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	99 23       	and	r25, r25
    1914:	29 f0       	breq	.+10     	; 0x1920 <scroll_display+0x16e>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    191a:	00 23       	and	r16, r16
    191c:	a1 f3       	breq	.-24     	; 0x1906 <scroll_display+0x154>
    191e:	f7 cf       	rjmp	.-18     	; 0x190e <scroll_display+0x15c>
	return !finished;
}
    1920:	28 96       	adiw	r28, 0x08	; 8
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	08 95       	ret

00001936 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1936:	cf 93       	push	r28
    1938:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    193a:	8a 30       	cpi	r24, 0x0A	; 10
    193c:	19 f4       	brne	.+6      	; 0x1944 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    193e:	8d e0       	ldi	r24, 0x0D	; 13
    1940:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1944:	9f b7       	in	r25, 0x3f	; 63
    1946:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1948:	02 c0       	rjmp	.+4      	; 0x194e <uart_put_char+0x18>
		if(!interrupts_enabled) {
    194a:	99 23       	and	r25, r25
    194c:	29 f1       	breq	.+74     	; 0x1998 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    194e:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <bytes_in_out_buffer>
    1952:	8f 3f       	cpi	r24, 0xFF	; 255
    1954:	d1 f3       	breq	.-12     	; 0x194a <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1956:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1958:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <out_insert_pos>
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	8e 0f       	add	r24, r30
    1960:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <out_insert_pos>
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	eb 5c       	subi	r30, 0xCB	; 203
    1968:	fd 4f       	sbci	r31, 0xFD	; 253
    196a:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    196c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <bytes_in_out_buffer>
    1970:	8f 5f       	subi	r24, 0xFF	; 255
    1972:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1976:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <out_insert_pos>
    197a:	8f 3f       	cpi	r24, 0xFF	; 255
    197c:	11 f4       	brne	.+4      	; 0x1982 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    197e:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1982:	e1 ec       	ldi	r30, 0xC1	; 193
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 62       	ori	r24, 0x20	; 32
    198a:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    198c:	99 23       	and	r25, r25
    198e:	39 f0       	breq	.+14     	; 0x199e <uart_put_char+0x68>
		sei();
    1990:	78 94       	sei
	}
	return 0;
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	05 c0       	rjmp	.+10     	; 0x19a2 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
}
    19a2:	cf 91       	pop	r28
    19a4:	08 95       	ret

000019a6 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    19a6:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <bytes_in_input_buffer>
    19aa:	88 23       	and	r24, r24
    19ac:	e1 f3       	breq	.-8      	; 0x19a6 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    19ae:	2f b7       	in	r18, 0x3f	; 63
    19b0:	20 78       	andi	r18, 0x80	; 128
	cli();
    19b2:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    19b4:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <input_insert_pos>
    19b8:	30 91 46 03 	lds	r19, 0x0346	; 0x800346 <bytes_in_input_buffer>
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	83 1b       	sub	r24, r19
    19c0:	91 09       	sbc	r25, r1
    19c2:	5a f4       	brpl	.+22     	; 0x19da <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    19c4:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <input_insert_pos>
    19c8:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	e8 1b       	sub	r30, r24
    19d0:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    19d2:	eb 5b       	subi	r30, 0xBB	; 187
    19d4:	fc 4f       	sbci	r31, 0xFC	; 252
    19d6:	80 81       	ld	r24, Z
    19d8:	0a c0       	rjmp	.+20     	; 0x19ee <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    19da:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <input_insert_pos>
    19de:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <bytes_in_input_buffer>
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	e8 1b       	sub	r30, r24
    19e6:	f1 09       	sbc	r31, r1
    19e8:	eb 5c       	subi	r30, 0xCB	; 203
    19ea:	fc 4f       	sbci	r31, 0xFC	; 252
    19ec:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    19ee:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <bytes_in_input_buffer>
    19f2:	91 50       	subi	r25, 0x01	; 1
    19f4:	90 93 46 03 	sts	0x0346, r25	; 0x800346 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    19f8:	22 23       	and	r18, r18
    19fa:	09 f0       	breq	.+2      	; 0x19fe <uart_get_char+0x58>
		sei();
    19fc:	78 94       	sei
	}	
	return c;
}
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	08 95       	ret

00001a02 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1a02:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1a06:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1a0a:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1a0e:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <bytes_in_input_buffer>
	input_overrun = 0;
    1a12:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1a16:	40 93 f1 01 	sts	0x01F1, r20	; 0x8001f1 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	aa 1f       	adc	r26, r26
    1a24:	bb 1f       	adc	r27, r27
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	aa 1f       	adc	r26, r26
    1a2c:	bb 1f       	adc	r27, r27
    1a2e:	9c 01       	movw	r18, r24
    1a30:	ad 01       	movw	r20, r26
    1a32:	22 0f       	add	r18, r18
    1a34:	33 1f       	adc	r19, r19
    1a36:	44 1f       	adc	r20, r20
    1a38:	55 1f       	adc	r21, r21
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	72 e1       	ldi	r23, 0x12	; 18
    1a3e:	8a e7       	ldi	r24, 0x7A	; 122
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 17 11 	call	0x222e	; 0x222e <__divmodsi4>
    1a46:	ba 01       	movw	r22, r20
    1a48:	a9 01       	movw	r20, r18
    1a4a:	4f 5f       	subi	r20, 0xFF	; 255
    1a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4e:	6f 4f       	sbci	r22, 0xFF	; 255
    1a50:	7f 4f       	sbci	r23, 0xFF	; 255
    1a52:	db 01       	movw	r26, r22
    1a54:	ca 01       	movw	r24, r20
    1a56:	1a f4       	brpl	.+6      	; 0x1a5e <init_serial_stdio+0x5c>
    1a58:	01 96       	adiw	r24, 0x01	; 1
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	b1 1d       	adc	r27, r1
    1a5e:	b5 95       	asr	r27
    1a60:	a7 95       	ror	r26
    1a62:	97 95       	ror	r25
    1a64:	87 95       	ror	r24
    1a66:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1a68:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1a6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1a70:	e1 ec       	ldi	r30, 0xC1	; 193
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	88 e1       	ldi	r24, 0x18	; 24
    1a76:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1a78:	80 81       	ld	r24, Z
    1a7a:	80 68       	ori	r24, 0x80	; 128
    1a7c:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1a7e:	ef e4       	ldi	r30, 0x4F	; 79
    1a80:	f3 e0       	ldi	r31, 0x03	; 3
    1a82:	84 e1       	ldi	r24, 0x14	; 20
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	93 83       	std	Z+3, r25	; 0x03
    1a88:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	80 83       	st	Z, r24
    1a8e:	08 95       	ret

00001a90 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1a90:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <bytes_in_input_buffer>
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	91 11       	cpse	r25, r1
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <serial_input_available+0xc>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
}
    1a9c:	08 95       	ret

00001a9e <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1a9e:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1aa2:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <bytes_in_input_buffer>
    1aa6:	08 95       	ret

00001aa8 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1aa8:	1f 92       	push	r1
    1aaa:	0f 92       	push	r0
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	0f 92       	push	r0
    1ab0:	11 24       	eor	r1, r1
    1ab2:	2f 93       	push	r18
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
    1ab8:	ef 93       	push	r30
    1aba:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1abc:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <bytes_in_out_buffer>
    1ac0:	88 23       	and	r24, r24
    1ac2:	29 f1       	breq	.+74     	; 0x1b0e <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1ac4:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <out_insert_pos>
    1ac8:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <bytes_in_out_buffer>
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	82 1b       	sub	r24, r18
    1ad0:	91 09       	sbc	r25, r1
    1ad2:	5a f4       	brpl	.+22     	; 0x1aea <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1ad4:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <out_insert_pos>
    1ad8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	e8 1b       	sub	r30, r24
    1ae0:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1ae2:	ec 5c       	subi	r30, 0xCC	; 204
    1ae4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ae6:	90 81       	ld	r25, Z
    1ae8:	0a c0       	rjmp	.+20     	; 0x1afe <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1aea:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <out_insert_pos>
    1aee:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <bytes_in_out_buffer>
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	e8 1b       	sub	r30, r24
    1af6:	f1 09       	sbc	r31, r1
    1af8:	eb 5c       	subi	r30, 0xCB	; 203
    1afa:	fd 4f       	sbci	r31, 0xFD	; 253
    1afc:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1afe:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <bytes_in_out_buffer>
    1b02:	81 50       	subi	r24, 0x01	; 1
    1b04:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1b08:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1b0c:	05 c0       	rjmp	.+10     	; 0x1b18 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1b0e:	e1 ec       	ldi	r30, 0xC1	; 193
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	8f 7d       	andi	r24, 0xDF	; 223
    1b16:	80 83       	st	Z, r24
	}
}
    1b18:	ff 91       	pop	r31
    1b1a:	ef 91       	pop	r30
    1b1c:	9f 91       	pop	r25
    1b1e:	8f 91       	pop	r24
    1b20:	2f 91       	pop	r18
    1b22:	0f 90       	pop	r0
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	0f 90       	pop	r0
    1b28:	1f 90       	pop	r1
    1b2a:	18 95       	reti

00001b2c <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1b2c:	1f 92       	push	r1
    1b2e:	0f 92       	push	r0
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	0f 92       	push	r0
    1b34:	11 24       	eor	r1, r1
    1b36:	2f 93       	push	r18
    1b38:	3f 93       	push	r19
    1b3a:	4f 93       	push	r20
    1b3c:	5f 93       	push	r21
    1b3e:	6f 93       	push	r22
    1b40:	7f 93       	push	r23
    1b42:	8f 93       	push	r24
    1b44:	9f 93       	push	r25
    1b46:	af 93       	push	r26
    1b48:	bf 93       	push	r27
    1b4a:	cf 93       	push	r28
    1b4c:	ef 93       	push	r30
    1b4e:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1b50:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1b54:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <do_echo>
    1b58:	88 23       	and	r24, r24
    1b5a:	49 f0       	breq	.+18     	; 0x1b6e <__vector_20+0x42>
    1b5c:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <bytes_in_out_buffer>
    1b60:	8f 3f       	cpi	r24, 0xFF	; 255
    1b62:	29 f0       	breq	.+10     	; 0x1b6e <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	70 e0       	ldi	r23, 0x00	; 0
    1b68:	8c 2f       	mov	r24, r28
    1b6a:	0e 94 9b 0c 	call	0x1936	; 0x1936 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1b6e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <bytes_in_input_buffer>
    1b72:	80 31       	cpi	r24, 0x10	; 16
    1b74:	20 f0       	brcs	.+8      	; 0x1b7e <__vector_20+0x52>
		input_overrun = 1;
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <input_overrun>
    1b7c:	18 c0       	rjmp	.+48     	; 0x1bae <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1b7e:	cd 30       	cpi	r28, 0x0D	; 13
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <__vector_20+0x58>
			c = '\n';
    1b82:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1b84:	e0 91 34 03 	lds	r30, 0x0334	; 0x800334 <input_insert_pos>
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	8e 0f       	add	r24, r30
    1b8c:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <input_insert_pos>
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	eb 5c       	subi	r30, 0xCB	; 203
    1b94:	fc 4f       	sbci	r31, 0xFC	; 252
    1b96:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1b98:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <bytes_in_input_buffer>
    1b9c:	8f 5f       	subi	r24, 0xFF	; 255
    1b9e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1ba2:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <input_insert_pos>
    1ba6:	80 31       	cpi	r24, 0x10	; 16
    1ba8:	11 f4       	brne	.+4      	; 0x1bae <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1baa:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <input_insert_pos>
		}
	}
}
    1bae:	ff 91       	pop	r31
    1bb0:	ef 91       	pop	r30
    1bb2:	cf 91       	pop	r28
    1bb4:	bf 91       	pop	r27
    1bb6:	af 91       	pop	r26
    1bb8:	9f 91       	pop	r25
    1bba:	8f 91       	pop	r24
    1bbc:	7f 91       	pop	r23
    1bbe:	6f 91       	pop	r22
    1bc0:	5f 91       	pop	r21
    1bc2:	4f 91       	pop	r20
    1bc4:	3f 91       	pop	r19
    1bc6:	2f 91       	pop	r18
    1bc8:	0f 90       	pop	r0
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	0f 90       	pop	r0
    1bce:	1f 90       	pop	r1
    1bd0:	18 95       	reti

00001bd2 <init_display>:
uint32_t previous_time;
volatile uint8_t seven_seg_cc;

void init_display(void) {
	// Set Port C to output the digits.
	DDRC = 0xFF;
    1bd2:	8f ef       	ldi	r24, 0xFF	; 255
    1bd4:	87 b9       	out	0x07, r24	; 7
	// Port C pin 0 to oscillate between digits.
	DDRD |= (1 << 3);
    1bd6:	53 9a       	sbi	0x0a, 3	; 10
	// The side to display on, 0 -> right, 1 -> left
	seven_seg_cc = 0;
    1bd8:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <seven_seg_cc>
    1bdc:	08 95       	ret

00001bde <display_data>:
}

void display_data(uint32_t current_time) {
    1bde:	0f 93       	push	r16
    1be0:	1f 93       	push	r17
	/* Displays the value on the seven segment display. 
	Wraps around at 100. The refresh rate is every 3 milliseconds. 
	Might need to use above method to improve performance.
	*/
	if (current_time > previous_time + 3) {
    1be2:	00 91 47 03 	lds	r16, 0x0347	; 0x800347 <previous_time>
    1be6:	10 91 48 03 	lds	r17, 0x0348	; 0x800348 <previous_time+0x1>
    1bea:	20 91 49 03 	lds	r18, 0x0349	; 0x800349 <previous_time+0x2>
    1bee:	30 91 4a 03 	lds	r19, 0x034A	; 0x80034a <previous_time+0x3>
    1bf2:	0d 5f       	subi	r16, 0xFD	; 253
    1bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf6:	2f 4f       	sbci	r18, 0xFF	; 255
    1bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfa:	06 17       	cp	r16, r22
    1bfc:	17 07       	cpc	r17, r23
    1bfe:	28 07       	cpc	r18, r24
    1c00:	39 07       	cpc	r19, r25
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <display_data+0x28>
    1c04:	87 c0       	rjmp	.+270    	; 0x1d14 <display_data+0x136>
		// Save the last time
		previous_time = current_time;
    1c06:	60 93 47 03 	sts	0x0347, r22	; 0x800347 <previous_time>
    1c0a:	70 93 48 03 	sts	0x0348, r23	; 0x800348 <previous_time+0x1>
    1c0e:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <previous_time+0x2>
    1c12:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <previous_time+0x3>
		// Only display the last digit
		if (display_value < 10) {
    1c16:	40 91 4c 03 	lds	r20, 0x034C	; 0x80034c <display_value>
    1c1a:	50 91 4d 03 	lds	r21, 0x034D	; 0x80034d <display_value+0x1>
    1c1e:	4a 30       	cpi	r20, 0x0A	; 10
    1c20:	51 05       	cpc	r21, r1
    1c22:	00 f5       	brcc	.+64     	; 0x1c64 <display_data+0x86>
			seven_seg_cc = 0;
    1c24:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <seven_seg_cc>
			PORTC = seven_seg_data[display_value % 10];
    1c28:	9a 01       	movw	r18, r20
    1c2a:	ad ec       	ldi	r26, 0xCD	; 205
    1c2c:	bc ec       	ldi	r27, 0xCC	; 204
    1c2e:	0e 94 36 11 	call	0x226c	; 0x226c <__umulhisi3>
    1c32:	96 95       	lsr	r25
    1c34:	87 95       	ror	r24
    1c36:	96 95       	lsr	r25
    1c38:	87 95       	ror	r24
    1c3a:	96 95       	lsr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	9c 01       	movw	r18, r24
    1c40:	22 0f       	add	r18, r18
    1c42:	33 1f       	adc	r19, r19
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	82 0f       	add	r24, r18
    1c52:	93 1f       	adc	r25, r19
    1c54:	48 1b       	sub	r20, r24
    1c56:	59 0b       	sbc	r21, r25
    1c58:	fa 01       	movw	r30, r20
    1c5a:	ee 5d       	subi	r30, 0xDE	; 222
    1c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c5e:	80 81       	ld	r24, Z
    1c60:	88 b9       	out	0x08, r24	; 8
    1c62:	4f c0       	rjmp	.+158    	; 0x1d02 <display_data+0x124>
		} else {
			seven_seg_cc = 1 - seven_seg_cc;
    1c64:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <seven_seg_cc>
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	89 1b       	sub	r24, r25
    1c6c:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <seven_seg_cc>
			if (seven_seg_cc == 0) {
    1c70:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <seven_seg_cc>
    1c74:	81 11       	cpse	r24, r1
    1c76:	1e c0       	rjmp	.+60     	; 0x1cb4 <display_data+0xd6>
				// Set the first digit
				PORTC = seven_seg_data[display_value % 10];
    1c78:	9a 01       	movw	r18, r20
    1c7a:	ad ec       	ldi	r26, 0xCD	; 205
    1c7c:	bc ec       	ldi	r27, 0xCC	; 204
    1c7e:	0e 94 36 11 	call	0x226c	; 0x226c <__umulhisi3>
    1c82:	96 95       	lsr	r25
    1c84:	87 95       	ror	r24
    1c86:	96 95       	lsr	r25
    1c88:	87 95       	ror	r24
    1c8a:	96 95       	lsr	r25
    1c8c:	87 95       	ror	r24
    1c8e:	9c 01       	movw	r18, r24
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	88 0f       	add	r24, r24
    1c9a:	99 1f       	adc	r25, r25
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	82 0f       	add	r24, r18
    1ca2:	93 1f       	adc	r25, r19
    1ca4:	48 1b       	sub	r20, r24
    1ca6:	59 0b       	sbc	r21, r25
    1ca8:	fa 01       	movw	r30, r20
    1caa:	ee 5d       	subi	r30, 0xDE	; 222
    1cac:	fe 4f       	sbci	r31, 0xFE	; 254
    1cae:	80 81       	ld	r24, Z
    1cb0:	88 b9       	out	0x08, r24	; 8
    1cb2:	27 c0       	rjmp	.+78     	; 0x1d02 <display_data+0x124>
			} else {
				// Set the second digit
				PORTC = seven_seg_data[(display_value / 10) % 10];
    1cb4:	9a 01       	movw	r18, r20
    1cb6:	ad ec       	ldi	r26, 0xCD	; 205
    1cb8:	bc ec       	ldi	r27, 0xCC	; 204
    1cba:	0e 94 36 11 	call	0x226c	; 0x226c <__umulhisi3>
    1cbe:	ac 01       	movw	r20, r24
    1cc0:	56 95       	lsr	r21
    1cc2:	47 95       	ror	r20
    1cc4:	56 95       	lsr	r21
    1cc6:	47 95       	ror	r20
    1cc8:	56 95       	lsr	r21
    1cca:	47 95       	ror	r20
    1ccc:	9a 01       	movw	r18, r20
    1cce:	0e 94 36 11 	call	0x226c	; 0x226c <__umulhisi3>
    1cd2:	96 95       	lsr	r25
    1cd4:	87 95       	ror	r24
    1cd6:	96 95       	lsr	r25
    1cd8:	87 95       	ror	r24
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	9c 01       	movw	r18, r24
    1ce0:	22 0f       	add	r18, r18
    1ce2:	33 1f       	adc	r19, r19
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	82 0f       	add	r24, r18
    1cf2:	93 1f       	adc	r25, r19
    1cf4:	48 1b       	sub	r20, r24
    1cf6:	59 0b       	sbc	r21, r25
    1cf8:	fa 01       	movw	r30, r20
    1cfa:	ee 5d       	subi	r30, 0xDE	; 222
    1cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfe:	80 81       	ld	r24, Z
    1d00:	88 b9       	out	0x08, r24	; 8
			}
		}
		/* Output the digit selection (CC) bit */
		PORTD = (PORTD & ~(1 << 3)) | (seven_seg_cc << 3);
    1d02:	9b b1       	in	r25, 0x0b	; 11
    1d04:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <seven_seg_cc>
    1d08:	97 7f       	andi	r25, 0xF7	; 247
    1d0a:	88 0f       	add	r24, r24
    1d0c:	88 0f       	add	r24, r24
    1d0e:	88 0f       	add	r24, r24
    1d10:	89 2b       	or	r24, r25
    1d12:	8b b9       	out	0x0b, r24	; 11
	}
}
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	08 95       	ret

00001d1a <update_time>:

void update_time(uint32_t time) {
	previous_time = time;
    1d1a:	60 93 47 03 	sts	0x0347, r22	; 0x800347 <previous_time>
    1d1e:	70 93 48 03 	sts	0x0348, r23	; 0x800348 <previous_time+0x1>
    1d22:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <previous_time+0x2>
    1d26:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <previous_time+0x3>
    1d2a:	08 95       	ret

00001d2c <set_value>:
}

void set_value(uint16_t value) {
	// Set the value (first two digits) on the display
	display_value = value;
    1d2c:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <display_value+0x1>
    1d30:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <display_value>
    1d34:	08 95       	ret

00001d36 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1d36:	94 b1       	in	r25, 0x04	; 4
    1d38:	90 6b       	ori	r25, 0xB0	; 176
    1d3a:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1d3c:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1d3e:	90 e5       	ldi	r25, 0x50	; 80
    1d40:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1d42:	88 30       	cpi	r24, 0x08	; 8
    1d44:	21 f0       	breq	.+8      	; 0x1d4e <spi_setup_master+0x18>
    1d46:	80 32       	cpi	r24, 0x20	; 32
    1d48:	11 f0       	breq	.+4      	; 0x1d4e <spi_setup_master+0x18>
    1d4a:	82 30       	cpi	r24, 0x02	; 2
    1d4c:	19 f4       	brne	.+6      	; 0x1d54 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1d4e:	91 e0       	ldi	r25, 0x01	; 1
    1d50:	9d bd       	out	0x2d, r25	; 45
			break;
    1d52:	01 c0       	rjmp	.+2      	; 0x1d56 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1d54:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1d56:	80 32       	cpi	r24, 0x20	; 32
    1d58:	69 f0       	breq	.+26     	; 0x1d74 <spi_setup_master+0x3e>
    1d5a:	28 f4       	brcc	.+10     	; 0x1d66 <spi_setup_master+0x30>
    1d5c:	88 30       	cpi	r24, 0x08	; 8
    1d5e:	71 f0       	breq	.+28     	; 0x1d7c <spi_setup_master+0x46>
    1d60:	80 31       	cpi	r24, 0x10	; 16
    1d62:	61 f0       	breq	.+24     	; 0x1d7c <spi_setup_master+0x46>
    1d64:	0e c0       	rjmp	.+28     	; 0x1d82 <spi_setup_master+0x4c>
    1d66:	80 34       	cpi	r24, 0x40	; 64
    1d68:	29 f0       	breq	.+10     	; 0x1d74 <spi_setup_master+0x3e>
    1d6a:	80 38       	cpi	r24, 0x80	; 128
    1d6c:	51 f4       	brne	.+20     	; 0x1d82 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1d6e:	8c b5       	in	r24, 0x2c	; 44
    1d70:	81 60       	ori	r24, 0x01	; 1
    1d72:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1d74:	8c b5       	in	r24, 0x2c	; 44
    1d76:	82 60       	ori	r24, 0x02	; 2
    1d78:	8c bd       	out	0x2c, r24	; 44
			break;
    1d7a:	03 c0       	rjmp	.+6      	; 0x1d82 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1d7c:	8c b5       	in	r24, 0x2c	; 44
    1d7e:	81 60       	ori	r24, 0x01	; 1
    1d80:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1d82:	2c 98       	cbi	0x05, 4	; 5
    1d84:	08 95       	ret

00001d86 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1d86:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1d88:	0d b4       	in	r0, 0x2d	; 45
    1d8a:	07 fe       	sbrs	r0, 7
    1d8c:	fd cf       	rjmp	.-6      	; 0x1d88 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1d8e:	8e b5       	in	r24, 0x2e	; 46
    1d90:	08 95       	ret

00001d92 <move_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    1d92:	9f 93       	push	r25
    1d94:	8f 93       	push	r24
    1d96:	7f 93       	push	r23
    1d98:	6f 93       	push	r22
    1d9a:	85 e1       	ldi	r24, 0x15	; 21
    1d9c:	92 e0       	ldi	r25, 0x02	; 2
    1d9e:	9f 93       	push	r25
    1da0:	8f 93       	push	r24
    1da2:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	08 95       	ret

00001db4 <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    1db4:	80 e1       	ldi	r24, 0x10	; 16
    1db6:	92 e0       	ldi	r25, 0x02	; 2
    1db8:	9f 93       	push	r25
    1dba:	8f 93       	push	r24
    1dbc:	0e 94 39 12 	call	0x2472	; 0x2472 <printf_P>
}
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	08 95       	ret

00001dc6 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    1dc6:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <clockTicks>
    1dca:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <clockTicks+0x1>
    1dce:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <clockTicks+0x2>
    1dd2:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <clockTicks+0x3>
	// Enable clockTicks to count.
	stopwatch_timing = 1;
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <stopwatch_timing>
	
	/* Clear the timer */
	TCNT0 = 0;
    1ddc:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1dde:	8c e7       	ldi	r24, 0x7C	; 124
    1de0:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    1dea:	ee e6       	ldi	r30, 0x6E	; 110
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	82 60       	ori	r24, 0x02	; 2
    1df2:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    1df4:	85 b3       	in	r24, 0x15	; 21
    1df6:	82 70       	andi	r24, 0x02	; 2
    1df8:	85 bb       	out	0x15, r24	; 21
    1dfa:	08 95       	ret

00001dfc <toggle_timer>:


// Turn the timer on/off. Whilst interrupts will still flag
// Nothing will happen.
void toggle_timer(void) {
	stopwatch_timing = 1 - stopwatch_timing;
    1dfc:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <stopwatch_timing>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	89 1b       	sub	r24, r25
    1e04:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <stopwatch_timing>
    1e08:	08 95       	ret

00001e0a <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    1e0a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1e0c:	f8 94       	cli
	returnValue = clockTicks;
    1e0e:	60 91 f2 01 	lds	r22, 0x01F2	; 0x8001f2 <clockTicks>
    1e12:	70 91 f3 01 	lds	r23, 0x01F3	; 0x8001f3 <clockTicks+0x1>
    1e16:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <clockTicks+0x2>
    1e1a:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <clockTicks+0x3>
	if(interruptsOn) {
    1e1e:	22 23       	and	r18, r18
    1e20:	0c f4       	brge	.+2      	; 0x1e24 <get_current_time+0x1a>
		sei();
    1e22:	78 94       	sei
	}
	return returnValue;
}
    1e24:	08 95       	ret

00001e26 <set_clock_ticks>:

void set_clock_ticks(uint32_t value) {
	clockTicks = value;
    1e26:	60 93 f2 01 	sts	0x01F2, r22	; 0x8001f2 <clockTicks>
    1e2a:	70 93 f3 01 	sts	0x01F3, r23	; 0x8001f3 <clockTicks+0x1>
    1e2e:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <clockTicks+0x2>
    1e32:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <clockTicks+0x3>
    1e36:	08 95       	ret

00001e38 <__vector_16>:
}

ISR(TIMER0_COMPA_vect) {
    1e38:	1f 92       	push	r1
    1e3a:	0f 92       	push	r0
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	0f 92       	push	r0
    1e40:	11 24       	eor	r1, r1
    1e42:	8f 93       	push	r24
    1e44:	9f 93       	push	r25
    1e46:	af 93       	push	r26
    1e48:	bf 93       	push	r27
	/* Increment our clock tick count */
	if (stopwatch_timing) {
    1e4a:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <stopwatch_timing>
    1e4e:	88 23       	and	r24, r24
    1e50:	99 f0       	breq	.+38     	; 0x1e78 <__vector_16+0x40>
		clockTicks++;
    1e52:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <clockTicks>
    1e56:	90 91 f3 01 	lds	r25, 0x01F3	; 0x8001f3 <clockTicks+0x1>
    1e5a:	a0 91 f4 01 	lds	r26, 0x01F4	; 0x8001f4 <clockTicks+0x2>
    1e5e:	b0 91 f5 01 	lds	r27, 0x01F5	; 0x8001f5 <clockTicks+0x3>
    1e62:	01 96       	adiw	r24, 0x01	; 1
    1e64:	a1 1d       	adc	r26, r1
    1e66:	b1 1d       	adc	r27, r1
    1e68:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <clockTicks>
    1e6c:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <clockTicks+0x1>
    1e70:	a0 93 f4 01 	sts	0x01F4, r26	; 0x8001f4 <clockTicks+0x2>
    1e74:	b0 93 f5 01 	sts	0x01F5, r27	; 0x8001f5 <clockTicks+0x3>
	}
}
    1e78:	bf 91       	pop	r27
    1e7a:	af 91       	pop	r26
    1e7c:	9f 91       	pop	r25
    1e7e:	8f 91       	pop	r24
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	0f 90       	pop	r0
    1e86:	1f 90       	pop	r1
    1e88:	18 95       	reti

00001e8a <__divsf3>:
    1e8a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__divsf3x>
    1e8e:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__fp_round>
    1e92:	0e 94 33 10 	call	0x2066	; 0x2066 <__fp_pscB>
    1e96:	58 f0       	brcs	.+22     	; 0x1eae <__divsf3+0x24>
    1e98:	0e 94 2c 10 	call	0x2058	; 0x2058 <__fp_pscA>
    1e9c:	40 f0       	brcs	.+16     	; 0x1eae <__divsf3+0x24>
    1e9e:	29 f4       	brne	.+10     	; 0x1eaa <__divsf3+0x20>
    1ea0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea2:	29 f0       	breq	.+10     	; 0x1eae <__divsf3+0x24>
    1ea4:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__fp_inf>
    1ea8:	51 11       	cpse	r21, r1
    1eaa:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__fp_szero>
    1eae:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__fp_nan>

00001eb2 <__divsf3x>:
    1eb2:	0e 94 4b 10 	call	0x2096	; 0x2096 <__fp_split3>
    1eb6:	68 f3       	brcs	.-38     	; 0x1e92 <__divsf3+0x8>

00001eb8 <__divsf3_pse>:
    1eb8:	99 23       	and	r25, r25
    1eba:	b1 f3       	breq	.-20     	; 0x1ea8 <__divsf3+0x1e>
    1ebc:	55 23       	and	r21, r21
    1ebe:	91 f3       	breq	.-28     	; 0x1ea4 <__divsf3+0x1a>
    1ec0:	95 1b       	sub	r25, r21
    1ec2:	55 0b       	sbc	r21, r21
    1ec4:	bb 27       	eor	r27, r27
    1ec6:	aa 27       	eor	r26, r26
    1ec8:	62 17       	cp	r22, r18
    1eca:	73 07       	cpc	r23, r19
    1ecc:	84 07       	cpc	r24, r20
    1ece:	38 f0       	brcs	.+14     	; 0x1ede <__divsf3_pse+0x26>
    1ed0:	9f 5f       	subi	r25, 0xFF	; 255
    1ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	44 1f       	adc	r20, r20
    1eda:	aa 1f       	adc	r26, r26
    1edc:	a9 f3       	breq	.-22     	; 0x1ec8 <__divsf3_pse+0x10>
    1ede:	35 d0       	rcall	.+106    	; 0x1f4a <__divsf3_pse+0x92>
    1ee0:	0e 2e       	mov	r0, r30
    1ee2:	3a f0       	brmi	.+14     	; 0x1ef2 <__divsf3_pse+0x3a>
    1ee4:	e0 e8       	ldi	r30, 0x80	; 128
    1ee6:	32 d0       	rcall	.+100    	; 0x1f4c <__divsf3_pse+0x94>
    1ee8:	91 50       	subi	r25, 0x01	; 1
    1eea:	50 40       	sbci	r21, 0x00	; 0
    1eec:	e6 95       	lsr	r30
    1eee:	00 1c       	adc	r0, r0
    1ef0:	ca f7       	brpl	.-14     	; 0x1ee4 <__divsf3_pse+0x2c>
    1ef2:	2b d0       	rcall	.+86     	; 0x1f4a <__divsf3_pse+0x92>
    1ef4:	fe 2f       	mov	r31, r30
    1ef6:	29 d0       	rcall	.+82     	; 0x1f4a <__divsf3_pse+0x92>
    1ef8:	66 0f       	add	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	88 1f       	adc	r24, r24
    1efe:	bb 1f       	adc	r27, r27
    1f00:	26 17       	cp	r18, r22
    1f02:	37 07       	cpc	r19, r23
    1f04:	48 07       	cpc	r20, r24
    1f06:	ab 07       	cpc	r26, r27
    1f08:	b0 e8       	ldi	r27, 0x80	; 128
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <__divsf3_pse+0x56>
    1f0c:	bb 0b       	sbc	r27, r27
    1f0e:	80 2d       	mov	r24, r0
    1f10:	bf 01       	movw	r22, r30
    1f12:	ff 27       	eor	r31, r31
    1f14:	93 58       	subi	r25, 0x83	; 131
    1f16:	5f 4f       	sbci	r21, 0xFF	; 255
    1f18:	3a f0       	brmi	.+14     	; 0x1f28 <__divsf3_pse+0x70>
    1f1a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f1c:	51 05       	cpc	r21, r1
    1f1e:	78 f0       	brcs	.+30     	; 0x1f3e <__divsf3_pse+0x86>
    1f20:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__fp_inf>
    1f24:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__fp_szero>
    1f28:	5f 3f       	cpi	r21, 0xFF	; 255
    1f2a:	e4 f3       	brlt	.-8      	; 0x1f24 <__divsf3_pse+0x6c>
    1f2c:	98 3e       	cpi	r25, 0xE8	; 232
    1f2e:	d4 f3       	brlt	.-12     	; 0x1f24 <__divsf3_pse+0x6c>
    1f30:	86 95       	lsr	r24
    1f32:	77 95       	ror	r23
    1f34:	67 95       	ror	r22
    1f36:	b7 95       	ror	r27
    1f38:	f7 95       	ror	r31
    1f3a:	9f 5f       	subi	r25, 0xFF	; 255
    1f3c:	c9 f7       	brne	.-14     	; 0x1f30 <__divsf3_pse+0x78>
    1f3e:	88 0f       	add	r24, r24
    1f40:	91 1d       	adc	r25, r1
    1f42:	96 95       	lsr	r25
    1f44:	87 95       	ror	r24
    1f46:	97 f9       	bld	r25, 7
    1f48:	08 95       	ret
    1f4a:	e1 e0       	ldi	r30, 0x01	; 1
    1f4c:	66 0f       	add	r22, r22
    1f4e:	77 1f       	adc	r23, r23
    1f50:	88 1f       	adc	r24, r24
    1f52:	bb 1f       	adc	r27, r27
    1f54:	62 17       	cp	r22, r18
    1f56:	73 07       	cpc	r23, r19
    1f58:	84 07       	cpc	r24, r20
    1f5a:	ba 07       	cpc	r27, r26
    1f5c:	20 f0       	brcs	.+8      	; 0x1f66 <__divsf3_pse+0xae>
    1f5e:	62 1b       	sub	r22, r18
    1f60:	73 0b       	sbc	r23, r19
    1f62:	84 0b       	sbc	r24, r20
    1f64:	ba 0b       	sbc	r27, r26
    1f66:	ee 1f       	adc	r30, r30
    1f68:	88 f7       	brcc	.-30     	; 0x1f4c <__divsf3_pse+0x94>
    1f6a:	e0 95       	com	r30
    1f6c:	08 95       	ret

00001f6e <__fixunssfsi>:
    1f6e:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__fp_splitA>
    1f72:	88 f0       	brcs	.+34     	; 0x1f96 <__fixunssfsi+0x28>
    1f74:	9f 57       	subi	r25, 0x7F	; 127
    1f76:	98 f0       	brcs	.+38     	; 0x1f9e <__fixunssfsi+0x30>
    1f78:	b9 2f       	mov	r27, r25
    1f7a:	99 27       	eor	r25, r25
    1f7c:	b7 51       	subi	r27, 0x17	; 23
    1f7e:	b0 f0       	brcs	.+44     	; 0x1fac <__fixunssfsi+0x3e>
    1f80:	e1 f0       	breq	.+56     	; 0x1fba <__fixunssfsi+0x4c>
    1f82:	66 0f       	add	r22, r22
    1f84:	77 1f       	adc	r23, r23
    1f86:	88 1f       	adc	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	1a f0       	brmi	.+6      	; 0x1f92 <__fixunssfsi+0x24>
    1f8c:	ba 95       	dec	r27
    1f8e:	c9 f7       	brne	.-14     	; 0x1f82 <__fixunssfsi+0x14>
    1f90:	14 c0       	rjmp	.+40     	; 0x1fba <__fixunssfsi+0x4c>
    1f92:	b1 30       	cpi	r27, 0x01	; 1
    1f94:	91 f0       	breq	.+36     	; 0x1fba <__fixunssfsi+0x4c>
    1f96:	0e 94 6d 10 	call	0x20da	; 0x20da <__fp_zero>
    1f9a:	b1 e0       	ldi	r27, 0x01	; 1
    1f9c:	08 95       	ret
    1f9e:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__fp_zero>
    1fa2:	67 2f       	mov	r22, r23
    1fa4:	78 2f       	mov	r23, r24
    1fa6:	88 27       	eor	r24, r24
    1fa8:	b8 5f       	subi	r27, 0xF8	; 248
    1faa:	39 f0       	breq	.+14     	; 0x1fba <__fixunssfsi+0x4c>
    1fac:	b9 3f       	cpi	r27, 0xF9	; 249
    1fae:	cc f3       	brlt	.-14     	; 0x1fa2 <__fixunssfsi+0x34>
    1fb0:	86 95       	lsr	r24
    1fb2:	77 95       	ror	r23
    1fb4:	67 95       	ror	r22
    1fb6:	b3 95       	inc	r27
    1fb8:	d9 f7       	brne	.-10     	; 0x1fb0 <__fixunssfsi+0x42>
    1fba:	3e f4       	brtc	.+14     	; 0x1fca <__fixunssfsi+0x5c>
    1fbc:	90 95       	com	r25
    1fbe:	80 95       	com	r24
    1fc0:	70 95       	com	r23
    1fc2:	61 95       	neg	r22
    1fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fca:	08 95       	ret

00001fcc <__floatunsisf>:
    1fcc:	e8 94       	clt
    1fce:	09 c0       	rjmp	.+18     	; 0x1fe2 <__floatsisf+0x12>

00001fd0 <__floatsisf>:
    1fd0:	97 fb       	bst	r25, 7
    1fd2:	3e f4       	brtc	.+14     	; 0x1fe2 <__floatsisf+0x12>
    1fd4:	90 95       	com	r25
    1fd6:	80 95       	com	r24
    1fd8:	70 95       	com	r23
    1fda:	61 95       	neg	r22
    1fdc:	7f 4f       	sbci	r23, 0xFF	; 255
    1fde:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe2:	99 23       	and	r25, r25
    1fe4:	a9 f0       	breq	.+42     	; 0x2010 <__floatsisf+0x40>
    1fe6:	f9 2f       	mov	r31, r25
    1fe8:	96 e9       	ldi	r25, 0x96	; 150
    1fea:	bb 27       	eor	r27, r27
    1fec:	93 95       	inc	r25
    1fee:	f6 95       	lsr	r31
    1ff0:	87 95       	ror	r24
    1ff2:	77 95       	ror	r23
    1ff4:	67 95       	ror	r22
    1ff6:	b7 95       	ror	r27
    1ff8:	f1 11       	cpse	r31, r1
    1ffa:	f8 cf       	rjmp	.-16     	; 0x1fec <__floatsisf+0x1c>
    1ffc:	fa f4       	brpl	.+62     	; 0x203c <__floatsisf+0x6c>
    1ffe:	bb 0f       	add	r27, r27
    2000:	11 f4       	brne	.+4      	; 0x2006 <__floatsisf+0x36>
    2002:	60 ff       	sbrs	r22, 0
    2004:	1b c0       	rjmp	.+54     	; 0x203c <__floatsisf+0x6c>
    2006:	6f 5f       	subi	r22, 0xFF	; 255
    2008:	7f 4f       	sbci	r23, 0xFF	; 255
    200a:	8f 4f       	sbci	r24, 0xFF	; 255
    200c:	9f 4f       	sbci	r25, 0xFF	; 255
    200e:	16 c0       	rjmp	.+44     	; 0x203c <__floatsisf+0x6c>
    2010:	88 23       	and	r24, r24
    2012:	11 f0       	breq	.+4      	; 0x2018 <__floatsisf+0x48>
    2014:	96 e9       	ldi	r25, 0x96	; 150
    2016:	11 c0       	rjmp	.+34     	; 0x203a <__floatsisf+0x6a>
    2018:	77 23       	and	r23, r23
    201a:	21 f0       	breq	.+8      	; 0x2024 <__floatsisf+0x54>
    201c:	9e e8       	ldi	r25, 0x8E	; 142
    201e:	87 2f       	mov	r24, r23
    2020:	76 2f       	mov	r23, r22
    2022:	05 c0       	rjmp	.+10     	; 0x202e <__floatsisf+0x5e>
    2024:	66 23       	and	r22, r22
    2026:	71 f0       	breq	.+28     	; 0x2044 <__floatsisf+0x74>
    2028:	96 e8       	ldi	r25, 0x86	; 134
    202a:	86 2f       	mov	r24, r22
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	2a f0       	brmi	.+10     	; 0x203c <__floatsisf+0x6c>
    2032:	9a 95       	dec	r25
    2034:	66 0f       	add	r22, r22
    2036:	77 1f       	adc	r23, r23
    2038:	88 1f       	adc	r24, r24
    203a:	da f7       	brpl	.-10     	; 0x2032 <__floatsisf+0x62>
    203c:	88 0f       	add	r24, r24
    203e:	96 95       	lsr	r25
    2040:	87 95       	ror	r24
    2042:	97 f9       	bld	r25, 7
    2044:	08 95       	ret

00002046 <__fp_inf>:
    2046:	97 f9       	bld	r25, 7
    2048:	9f 67       	ori	r25, 0x7F	; 127
    204a:	80 e8       	ldi	r24, 0x80	; 128
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	08 95       	ret

00002052 <__fp_nan>:
    2052:	9f ef       	ldi	r25, 0xFF	; 255
    2054:	80 ec       	ldi	r24, 0xC0	; 192
    2056:	08 95       	ret

00002058 <__fp_pscA>:
    2058:	00 24       	eor	r0, r0
    205a:	0a 94       	dec	r0
    205c:	16 16       	cp	r1, r22
    205e:	17 06       	cpc	r1, r23
    2060:	18 06       	cpc	r1, r24
    2062:	09 06       	cpc	r0, r25
    2064:	08 95       	ret

00002066 <__fp_pscB>:
    2066:	00 24       	eor	r0, r0
    2068:	0a 94       	dec	r0
    206a:	12 16       	cp	r1, r18
    206c:	13 06       	cpc	r1, r19
    206e:	14 06       	cpc	r1, r20
    2070:	05 06       	cpc	r0, r21
    2072:	08 95       	ret

00002074 <__fp_round>:
    2074:	09 2e       	mov	r0, r25
    2076:	03 94       	inc	r0
    2078:	00 0c       	add	r0, r0
    207a:	11 f4       	brne	.+4      	; 0x2080 <__fp_round+0xc>
    207c:	88 23       	and	r24, r24
    207e:	52 f0       	brmi	.+20     	; 0x2094 <__fp_round+0x20>
    2080:	bb 0f       	add	r27, r27
    2082:	40 f4       	brcc	.+16     	; 0x2094 <__fp_round+0x20>
    2084:	bf 2b       	or	r27, r31
    2086:	11 f4       	brne	.+4      	; 0x208c <__fp_round+0x18>
    2088:	60 ff       	sbrs	r22, 0
    208a:	04 c0       	rjmp	.+8      	; 0x2094 <__fp_round+0x20>
    208c:	6f 5f       	subi	r22, 0xFF	; 255
    208e:	7f 4f       	sbci	r23, 0xFF	; 255
    2090:	8f 4f       	sbci	r24, 0xFF	; 255
    2092:	9f 4f       	sbci	r25, 0xFF	; 255
    2094:	08 95       	ret

00002096 <__fp_split3>:
    2096:	57 fd       	sbrc	r21, 7
    2098:	90 58       	subi	r25, 0x80	; 128
    209a:	44 0f       	add	r20, r20
    209c:	55 1f       	adc	r21, r21
    209e:	59 f0       	breq	.+22     	; 0x20b6 <__fp_splitA+0x10>
    20a0:	5f 3f       	cpi	r21, 0xFF	; 255
    20a2:	71 f0       	breq	.+28     	; 0x20c0 <__fp_splitA+0x1a>
    20a4:	47 95       	ror	r20

000020a6 <__fp_splitA>:
    20a6:	88 0f       	add	r24, r24
    20a8:	97 fb       	bst	r25, 7
    20aa:	99 1f       	adc	r25, r25
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <__fp_splitA+0x20>
    20ae:	9f 3f       	cpi	r25, 0xFF	; 255
    20b0:	79 f0       	breq	.+30     	; 0x20d0 <__fp_splitA+0x2a>
    20b2:	87 95       	ror	r24
    20b4:	08 95       	ret
    20b6:	12 16       	cp	r1, r18
    20b8:	13 06       	cpc	r1, r19
    20ba:	14 06       	cpc	r1, r20
    20bc:	55 1f       	adc	r21, r21
    20be:	f2 cf       	rjmp	.-28     	; 0x20a4 <__fp_split3+0xe>
    20c0:	46 95       	lsr	r20
    20c2:	f1 df       	rcall	.-30     	; 0x20a6 <__fp_splitA>
    20c4:	08 c0       	rjmp	.+16     	; 0x20d6 <__fp_splitA+0x30>
    20c6:	16 16       	cp	r1, r22
    20c8:	17 06       	cpc	r1, r23
    20ca:	18 06       	cpc	r1, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	f1 cf       	rjmp	.-30     	; 0x20b2 <__fp_splitA+0xc>
    20d0:	86 95       	lsr	r24
    20d2:	71 05       	cpc	r23, r1
    20d4:	61 05       	cpc	r22, r1
    20d6:	08 94       	sec
    20d8:	08 95       	ret

000020da <__fp_zero>:
    20da:	e8 94       	clt

000020dc <__fp_szero>:
    20dc:	bb 27       	eor	r27, r27
    20de:	66 27       	eor	r22, r22
    20e0:	77 27       	eor	r23, r23
    20e2:	cb 01       	movw	r24, r22
    20e4:	97 f9       	bld	r25, 7
    20e6:	08 95       	ret

000020e8 <__mulsf3>:
    20e8:	0e 94 87 10 	call	0x210e	; 0x210e <__mulsf3x>
    20ec:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__fp_round>
    20f0:	0e 94 2c 10 	call	0x2058	; 0x2058 <__fp_pscA>
    20f4:	38 f0       	brcs	.+14     	; 0x2104 <__mulsf3+0x1c>
    20f6:	0e 94 33 10 	call	0x2066	; 0x2066 <__fp_pscB>
    20fa:	20 f0       	brcs	.+8      	; 0x2104 <__mulsf3+0x1c>
    20fc:	95 23       	and	r25, r21
    20fe:	11 f0       	breq	.+4      	; 0x2104 <__mulsf3+0x1c>
    2100:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__fp_inf>
    2104:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__fp_nan>
    2108:	11 24       	eor	r1, r1
    210a:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__fp_szero>

0000210e <__mulsf3x>:
    210e:	0e 94 4b 10 	call	0x2096	; 0x2096 <__fp_split3>
    2112:	70 f3       	brcs	.-36     	; 0x20f0 <__mulsf3+0x8>

00002114 <__mulsf3_pse>:
    2114:	95 9f       	mul	r25, r21
    2116:	c1 f3       	breq	.-16     	; 0x2108 <__mulsf3+0x20>
    2118:	95 0f       	add	r25, r21
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	55 1f       	adc	r21, r21
    211e:	62 9f       	mul	r22, r18
    2120:	f0 01       	movw	r30, r0
    2122:	72 9f       	mul	r23, r18
    2124:	bb 27       	eor	r27, r27
    2126:	f0 0d       	add	r31, r0
    2128:	b1 1d       	adc	r27, r1
    212a:	63 9f       	mul	r22, r19
    212c:	aa 27       	eor	r26, r26
    212e:	f0 0d       	add	r31, r0
    2130:	b1 1d       	adc	r27, r1
    2132:	aa 1f       	adc	r26, r26
    2134:	64 9f       	mul	r22, r20
    2136:	66 27       	eor	r22, r22
    2138:	b0 0d       	add	r27, r0
    213a:	a1 1d       	adc	r26, r1
    213c:	66 1f       	adc	r22, r22
    213e:	82 9f       	mul	r24, r18
    2140:	22 27       	eor	r18, r18
    2142:	b0 0d       	add	r27, r0
    2144:	a1 1d       	adc	r26, r1
    2146:	62 1f       	adc	r22, r18
    2148:	73 9f       	mul	r23, r19
    214a:	b0 0d       	add	r27, r0
    214c:	a1 1d       	adc	r26, r1
    214e:	62 1f       	adc	r22, r18
    2150:	83 9f       	mul	r24, r19
    2152:	a0 0d       	add	r26, r0
    2154:	61 1d       	adc	r22, r1
    2156:	22 1f       	adc	r18, r18
    2158:	74 9f       	mul	r23, r20
    215a:	33 27       	eor	r19, r19
    215c:	a0 0d       	add	r26, r0
    215e:	61 1d       	adc	r22, r1
    2160:	23 1f       	adc	r18, r19
    2162:	84 9f       	mul	r24, r20
    2164:	60 0d       	add	r22, r0
    2166:	21 1d       	adc	r18, r1
    2168:	82 2f       	mov	r24, r18
    216a:	76 2f       	mov	r23, r22
    216c:	6a 2f       	mov	r22, r26
    216e:	11 24       	eor	r1, r1
    2170:	9f 57       	subi	r25, 0x7F	; 127
    2172:	50 40       	sbci	r21, 0x00	; 0
    2174:	9a f0       	brmi	.+38     	; 0x219c <__mulsf3_pse+0x88>
    2176:	f1 f0       	breq	.+60     	; 0x21b4 <__mulsf3_pse+0xa0>
    2178:	88 23       	and	r24, r24
    217a:	4a f0       	brmi	.+18     	; 0x218e <__mulsf3_pse+0x7a>
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	bb 1f       	adc	r27, r27
    2182:	66 1f       	adc	r22, r22
    2184:	77 1f       	adc	r23, r23
    2186:	88 1f       	adc	r24, r24
    2188:	91 50       	subi	r25, 0x01	; 1
    218a:	50 40       	sbci	r21, 0x00	; 0
    218c:	a9 f7       	brne	.-22     	; 0x2178 <__mulsf3_pse+0x64>
    218e:	9e 3f       	cpi	r25, 0xFE	; 254
    2190:	51 05       	cpc	r21, r1
    2192:	80 f0       	brcs	.+32     	; 0x21b4 <__mulsf3_pse+0xa0>
    2194:	0c 94 23 10 	jmp	0x2046	; 0x2046 <__fp_inf>
    2198:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__fp_szero>
    219c:	5f 3f       	cpi	r21, 0xFF	; 255
    219e:	e4 f3       	brlt	.-8      	; 0x2198 <__mulsf3_pse+0x84>
    21a0:	98 3e       	cpi	r25, 0xE8	; 232
    21a2:	d4 f3       	brlt	.-12     	; 0x2198 <__mulsf3_pse+0x84>
    21a4:	86 95       	lsr	r24
    21a6:	77 95       	ror	r23
    21a8:	67 95       	ror	r22
    21aa:	b7 95       	ror	r27
    21ac:	f7 95       	ror	r31
    21ae:	e7 95       	ror	r30
    21b0:	9f 5f       	subi	r25, 0xFF	; 255
    21b2:	c1 f7       	brne	.-16     	; 0x21a4 <__mulsf3_pse+0x90>
    21b4:	fe 2b       	or	r31, r30
    21b6:	88 0f       	add	r24, r24
    21b8:	91 1d       	adc	r25, r1
    21ba:	96 95       	lsr	r25
    21bc:	87 95       	ror	r24
    21be:	97 f9       	bld	r25, 7
    21c0:	08 95       	ret

000021c2 <__divmodhi4>:
    21c2:	97 fb       	bst	r25, 7
    21c4:	07 2e       	mov	r0, r23
    21c6:	16 f4       	brtc	.+4      	; 0x21cc <__divmodhi4+0xa>
    21c8:	00 94       	com	r0
    21ca:	07 d0       	rcall	.+14     	; 0x21da <__divmodhi4_neg1>
    21cc:	77 fd       	sbrc	r23, 7
    21ce:	09 d0       	rcall	.+18     	; 0x21e2 <__divmodhi4_neg2>
    21d0:	0e 94 45 11 	call	0x228a	; 0x228a <__udivmodhi4>
    21d4:	07 fc       	sbrc	r0, 7
    21d6:	05 d0       	rcall	.+10     	; 0x21e2 <__divmodhi4_neg2>
    21d8:	3e f4       	brtc	.+14     	; 0x21e8 <__divmodhi4_exit>

000021da <__divmodhi4_neg1>:
    21da:	90 95       	com	r25
    21dc:	81 95       	neg	r24
    21de:	9f 4f       	sbci	r25, 0xFF	; 255
    21e0:	08 95       	ret

000021e2 <__divmodhi4_neg2>:
    21e2:	70 95       	com	r23
    21e4:	61 95       	neg	r22
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255

000021e8 <__divmodhi4_exit>:
    21e8:	08 95       	ret

000021ea <__udivmodsi4>:
    21ea:	a1 e2       	ldi	r26, 0x21	; 33
    21ec:	1a 2e       	mov	r1, r26
    21ee:	aa 1b       	sub	r26, r26
    21f0:	bb 1b       	sub	r27, r27
    21f2:	fd 01       	movw	r30, r26
    21f4:	0d c0       	rjmp	.+26     	; 0x2210 <__udivmodsi4_ep>

000021f6 <__udivmodsi4_loop>:
    21f6:	aa 1f       	adc	r26, r26
    21f8:	bb 1f       	adc	r27, r27
    21fa:	ee 1f       	adc	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	a2 17       	cp	r26, r18
    2200:	b3 07       	cpc	r27, r19
    2202:	e4 07       	cpc	r30, r20
    2204:	f5 07       	cpc	r31, r21
    2206:	20 f0       	brcs	.+8      	; 0x2210 <__udivmodsi4_ep>
    2208:	a2 1b       	sub	r26, r18
    220a:	b3 0b       	sbc	r27, r19
    220c:	e4 0b       	sbc	r30, r20
    220e:	f5 0b       	sbc	r31, r21

00002210 <__udivmodsi4_ep>:
    2210:	66 1f       	adc	r22, r22
    2212:	77 1f       	adc	r23, r23
    2214:	88 1f       	adc	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	1a 94       	dec	r1
    221a:	69 f7       	brne	.-38     	; 0x21f6 <__udivmodsi4_loop>
    221c:	60 95       	com	r22
    221e:	70 95       	com	r23
    2220:	80 95       	com	r24
    2222:	90 95       	com	r25
    2224:	9b 01       	movw	r18, r22
    2226:	ac 01       	movw	r20, r24
    2228:	bd 01       	movw	r22, r26
    222a:	cf 01       	movw	r24, r30
    222c:	08 95       	ret

0000222e <__divmodsi4>:
    222e:	05 2e       	mov	r0, r21
    2230:	97 fb       	bst	r25, 7
    2232:	1e f4       	brtc	.+6      	; 0x223a <__divmodsi4+0xc>
    2234:	00 94       	com	r0
    2236:	0e 94 2e 11 	call	0x225c	; 0x225c <__negsi2>
    223a:	57 fd       	sbrc	r21, 7
    223c:	07 d0       	rcall	.+14     	; 0x224c <__divmodsi4_neg2>
    223e:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__udivmodsi4>
    2242:	07 fc       	sbrc	r0, 7
    2244:	03 d0       	rcall	.+6      	; 0x224c <__divmodsi4_neg2>
    2246:	4e f4       	brtc	.+18     	; 0x225a <__divmodsi4_exit>
    2248:	0c 94 2e 11 	jmp	0x225c	; 0x225c <__negsi2>

0000224c <__divmodsi4_neg2>:
    224c:	50 95       	com	r21
    224e:	40 95       	com	r20
    2250:	30 95       	com	r19
    2252:	21 95       	neg	r18
    2254:	3f 4f       	sbci	r19, 0xFF	; 255
    2256:	4f 4f       	sbci	r20, 0xFF	; 255
    2258:	5f 4f       	sbci	r21, 0xFF	; 255

0000225a <__divmodsi4_exit>:
    225a:	08 95       	ret

0000225c <__negsi2>:
    225c:	90 95       	com	r25
    225e:	80 95       	com	r24
    2260:	70 95       	com	r23
    2262:	61 95       	neg	r22
    2264:	7f 4f       	sbci	r23, 0xFF	; 255
    2266:	8f 4f       	sbci	r24, 0xFF	; 255
    2268:	9f 4f       	sbci	r25, 0xFF	; 255
    226a:	08 95       	ret

0000226c <__umulhisi3>:
    226c:	a2 9f       	mul	r26, r18
    226e:	b0 01       	movw	r22, r0
    2270:	b3 9f       	mul	r27, r19
    2272:	c0 01       	movw	r24, r0
    2274:	a3 9f       	mul	r26, r19
    2276:	70 0d       	add	r23, r0
    2278:	81 1d       	adc	r24, r1
    227a:	11 24       	eor	r1, r1
    227c:	91 1d       	adc	r25, r1
    227e:	b2 9f       	mul	r27, r18
    2280:	70 0d       	add	r23, r0
    2282:	81 1d       	adc	r24, r1
    2284:	11 24       	eor	r1, r1
    2286:	91 1d       	adc	r25, r1
    2288:	08 95       	ret

0000228a <__udivmodhi4>:
    228a:	aa 1b       	sub	r26, r26
    228c:	bb 1b       	sub	r27, r27
    228e:	51 e1       	ldi	r21, 0x11	; 17
    2290:	07 c0       	rjmp	.+14     	; 0x22a0 <__udivmodhi4_ep>

00002292 <__udivmodhi4_loop>:
    2292:	aa 1f       	adc	r26, r26
    2294:	bb 1f       	adc	r27, r27
    2296:	a6 17       	cp	r26, r22
    2298:	b7 07       	cpc	r27, r23
    229a:	10 f0       	brcs	.+4      	; 0x22a0 <__udivmodhi4_ep>
    229c:	a6 1b       	sub	r26, r22
    229e:	b7 0b       	sbc	r27, r23

000022a0 <__udivmodhi4_ep>:
    22a0:	88 1f       	adc	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	5a 95       	dec	r21
    22a6:	a9 f7       	brne	.-22     	; 0x2292 <__udivmodhi4_loop>
    22a8:	80 95       	com	r24
    22aa:	90 95       	com	r25
    22ac:	bc 01       	movw	r22, r24
    22ae:	cd 01       	movw	r24, r26
    22b0:	08 95       	ret

000022b2 <random_r>:
    22b2:	8f 92       	push	r8
    22b4:	9f 92       	push	r9
    22b6:	af 92       	push	r10
    22b8:	bf 92       	push	r11
    22ba:	cf 92       	push	r12
    22bc:	df 92       	push	r13
    22be:	ef 92       	push	r14
    22c0:	ff 92       	push	r15
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	ec 01       	movw	r28, r24
    22c8:	68 81       	ld	r22, Y
    22ca:	79 81       	ldd	r23, Y+1	; 0x01
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	61 15       	cp	r22, r1
    22d2:	71 05       	cpc	r23, r1
    22d4:	81 05       	cpc	r24, r1
    22d6:	91 05       	cpc	r25, r1
    22d8:	21 f4       	brne	.+8      	; 0x22e2 <random_r+0x30>
    22da:	64 e2       	ldi	r22, 0x24	; 36
    22dc:	79 ed       	ldi	r23, 0xD9	; 217
    22de:	8b e5       	ldi	r24, 0x5B	; 91
    22e0:	97 e0       	ldi	r25, 0x07	; 7
    22e2:	2d e1       	ldi	r18, 0x1D	; 29
    22e4:	33 ef       	ldi	r19, 0xF3	; 243
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	50 e0       	ldi	r21, 0x00	; 0
    22ea:	0e 94 17 11 	call	0x222e	; 0x222e <__divmodsi4>
    22ee:	49 01       	movw	r8, r18
    22f0:	5a 01       	movw	r10, r20
    22f2:	9b 01       	movw	r18, r22
    22f4:	ac 01       	movw	r20, r24
    22f6:	a7 ea       	ldi	r26, 0xA7	; 167
    22f8:	b1 e4       	ldi	r27, 0x41	; 65
    22fa:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__muluhisi3>
    22fe:	6b 01       	movw	r12, r22
    2300:	7c 01       	movw	r14, r24
    2302:	ac ee       	ldi	r26, 0xEC	; 236
    2304:	b4 ef       	ldi	r27, 0xF4	; 244
    2306:	a5 01       	movw	r20, r10
    2308:	94 01       	movw	r18, r8
    230a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__mulohisi3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8c 0d       	add	r24, r12
    2314:	9d 1d       	adc	r25, r13
    2316:	ae 1d       	adc	r26, r14
    2318:	bf 1d       	adc	r27, r15
    231a:	b7 ff       	sbrs	r27, 7
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <random_r+0x72>
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	a1 09       	sbc	r26, r1
    2322:	b0 48       	sbci	r27, 0x80	; 128
    2324:	88 83       	st	Y, r24
    2326:	99 83       	std	Y+1, r25	; 0x01
    2328:	aa 83       	std	Y+2, r26	; 0x02
    232a:	bb 83       	std	Y+3, r27	; 0x03
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	9f 77       	andi	r25, 0x7F	; 127
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	ff 90       	pop	r15
    2338:	ef 90       	pop	r14
    233a:	df 90       	pop	r13
    233c:	cf 90       	pop	r12
    233e:	bf 90       	pop	r11
    2340:	af 90       	pop	r10
    2342:	9f 90       	pop	r9
    2344:	8f 90       	pop	r8
    2346:	08 95       	ret

00002348 <random>:
    2348:	8f 92       	push	r8
    234a:	9f 92       	push	r9
    234c:	af 92       	push	r10
    234e:	bf 92       	push	r11
    2350:	cf 92       	push	r12
    2352:	df 92       	push	r13
    2354:	ef 92       	push	r14
    2356:	ff 92       	push	r15
    2358:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    235c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    2360:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    2364:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    2368:	61 15       	cp	r22, r1
    236a:	71 05       	cpc	r23, r1
    236c:	81 05       	cpc	r24, r1
    236e:	91 05       	cpc	r25, r1
    2370:	21 f4       	brne	.+8      	; 0x237a <random+0x32>
    2372:	64 e2       	ldi	r22, 0x24	; 36
    2374:	79 ed       	ldi	r23, 0xD9	; 217
    2376:	8b e5       	ldi	r24, 0x5B	; 91
    2378:	97 e0       	ldi	r25, 0x07	; 7
    237a:	2d e1       	ldi	r18, 0x1D	; 29
    237c:	33 ef       	ldi	r19, 0xF3	; 243
    237e:	41 e0       	ldi	r20, 0x01	; 1
    2380:	50 e0       	ldi	r21, 0x00	; 0
    2382:	0e 94 17 11 	call	0x222e	; 0x222e <__divmodsi4>
    2386:	49 01       	movw	r8, r18
    2388:	5a 01       	movw	r10, r20
    238a:	9b 01       	movw	r18, r22
    238c:	ac 01       	movw	r20, r24
    238e:	a7 ea       	ldi	r26, 0xA7	; 167
    2390:	b1 e4       	ldi	r27, 0x41	; 65
    2392:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__muluhisi3>
    2396:	6b 01       	movw	r12, r22
    2398:	7c 01       	movw	r14, r24
    239a:	ac ee       	ldi	r26, 0xEC	; 236
    239c:	b4 ef       	ldi	r27, 0xF4	; 244
    239e:	a5 01       	movw	r20, r10
    23a0:	94 01       	movw	r18, r8
    23a2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__mulohisi3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8c 0d       	add	r24, r12
    23ac:	9d 1d       	adc	r25, r13
    23ae:	ae 1d       	adc	r26, r14
    23b0:	bf 1d       	adc	r27, r15
    23b2:	b7 ff       	sbrs	r27, 7
    23b4:	03 c0       	rjmp	.+6      	; 0x23bc <random+0x74>
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	a1 09       	sbc	r26, r1
    23ba:	b0 48       	sbci	r27, 0x80	; 128
    23bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    23c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    23c4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    23c8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	9f 77       	andi	r25, 0x7F	; 127
    23d2:	ff 90       	pop	r15
    23d4:	ef 90       	pop	r14
    23d6:	df 90       	pop	r13
    23d8:	cf 90       	pop	r12
    23da:	bf 90       	pop	r11
    23dc:	af 90       	pop	r10
    23de:	9f 90       	pop	r9
    23e0:	8f 90       	pop	r8
    23e2:	08 95       	ret

000023e4 <srandom>:
    23e4:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    23e8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    23ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    23f0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    23f4:	08 95       	ret

000023f6 <fgetc>:
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	ec 01       	movw	r28, r24
    23fc:	2b 81       	ldd	r18, Y+3	; 0x03
    23fe:	20 ff       	sbrs	r18, 0
    2400:	33 c0       	rjmp	.+102    	; 0x2468 <fgetc+0x72>
    2402:	26 ff       	sbrs	r18, 6
    2404:	0a c0       	rjmp	.+20     	; 0x241a <fgetc+0x24>
    2406:	2f 7b       	andi	r18, 0xBF	; 191
    2408:	2b 83       	std	Y+3, r18	; 0x03
    240a:	8e 81       	ldd	r24, Y+6	; 0x06
    240c:	9f 81       	ldd	r25, Y+7	; 0x07
    240e:	01 96       	adiw	r24, 0x01	; 1
    2410:	9f 83       	std	Y+7, r25	; 0x07
    2412:	8e 83       	std	Y+6, r24	; 0x06
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	29 c0       	rjmp	.+82     	; 0x246c <fgetc+0x76>
    241a:	22 ff       	sbrs	r18, 2
    241c:	0f c0       	rjmp	.+30     	; 0x243c <fgetc+0x46>
    241e:	e8 81       	ld	r30, Y
    2420:	f9 81       	ldd	r31, Y+1	; 0x01
    2422:	80 81       	ld	r24, Z
    2424:	08 2e       	mov	r0, r24
    2426:	00 0c       	add	r0, r0
    2428:	99 0b       	sbc	r25, r25
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	19 f4       	brne	.+6      	; 0x2434 <fgetc+0x3e>
    242e:	20 62       	ori	r18, 0x20	; 32
    2430:	2b 83       	std	Y+3, r18	; 0x03
    2432:	1a c0       	rjmp	.+52     	; 0x2468 <fgetc+0x72>
    2434:	31 96       	adiw	r30, 0x01	; 1
    2436:	f9 83       	std	Y+1, r31	; 0x01
    2438:	e8 83       	st	Y, r30
    243a:	0e c0       	rjmp	.+28     	; 0x2458 <fgetc+0x62>
    243c:	ea 85       	ldd	r30, Y+10	; 0x0a
    243e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2440:	09 95       	icall
    2442:	97 ff       	sbrs	r25, 7
    2444:	09 c0       	rjmp	.+18     	; 0x2458 <fgetc+0x62>
    2446:	2b 81       	ldd	r18, Y+3	; 0x03
    2448:	01 96       	adiw	r24, 0x01	; 1
    244a:	11 f0       	breq	.+4      	; 0x2450 <fgetc+0x5a>
    244c:	80 e2       	ldi	r24, 0x20	; 32
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <fgetc+0x5c>
    2450:	80 e1       	ldi	r24, 0x10	; 16
    2452:	82 2b       	or	r24, r18
    2454:	8b 83       	std	Y+3, r24	; 0x03
    2456:	08 c0       	rjmp	.+16     	; 0x2468 <fgetc+0x72>
    2458:	2e 81       	ldd	r18, Y+6	; 0x06
    245a:	3f 81       	ldd	r19, Y+7	; 0x07
    245c:	2f 5f       	subi	r18, 0xFF	; 255
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	3f 83       	std	Y+7, r19	; 0x07
    2462:	2e 83       	std	Y+6, r18	; 0x06
    2464:	99 27       	eor	r25, r25
    2466:	02 c0       	rjmp	.+4      	; 0x246c <fgetc+0x76>
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	9f ef       	ldi	r25, 0xFF	; 255
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	08 95       	ret

00002472 <printf_P>:
    2472:	a0 e0       	ldi	r26, 0x00	; 0
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	ef e3       	ldi	r30, 0x3F	; 63
    2478:	f2 e1       	ldi	r31, 0x12	; 18
    247a:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__prologue_saves__+0x1c>
    247e:	ae 01       	movw	r20, r28
    2480:	49 5f       	subi	r20, 0xF9	; 249
    2482:	5f 4f       	sbci	r21, 0xFF	; 255
    2484:	da 01       	movw	r26, r20
    2486:	6d 91       	ld	r22, X+
    2488:	7d 91       	ld	r23, X+
    248a:	ad 01       	movw	r20, r26
    248c:	0f e4       	ldi	r16, 0x4F	; 79
    248e:	13 e0       	ldi	r17, 0x03	; 3
    2490:	f8 01       	movw	r30, r16
    2492:	82 81       	ldd	r24, Z+2	; 0x02
    2494:	93 81       	ldd	r25, Z+3	; 0x03
    2496:	dc 01       	movw	r26, r24
    2498:	13 96       	adiw	r26, 0x03	; 3
    249a:	2c 91       	ld	r18, X
    249c:	13 97       	sbiw	r26, 0x03	; 3
    249e:	28 60       	ori	r18, 0x08	; 8
    24a0:	13 96       	adiw	r26, 0x03	; 3
    24a2:	2c 93       	st	X, r18
    24a4:	0e 94 5f 12 	call	0x24be	; 0x24be <vfprintf>
    24a8:	d8 01       	movw	r26, r16
    24aa:	12 96       	adiw	r26, 0x02	; 2
    24ac:	ed 91       	ld	r30, X+
    24ae:	fc 91       	ld	r31, X
    24b0:	13 97       	sbiw	r26, 0x03	; 3
    24b2:	23 81       	ldd	r18, Z+3	; 0x03
    24b4:	27 7f       	andi	r18, 0xF7	; 247
    24b6:	23 83       	std	Z+3, r18	; 0x03
    24b8:	e4 e0       	ldi	r30, 0x04	; 4
    24ba:	0c 94 2d 15 	jmp	0x2a5a	; 0x2a5a <__epilogue_restores__+0x1c>

000024be <vfprintf>:
    24be:	ab e0       	ldi	r26, 0x0B	; 11
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e5 e6       	ldi	r30, 0x65	; 101
    24c4:	f2 e1       	ldi	r31, 0x12	; 18
    24c6:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__>
    24ca:	6c 01       	movw	r12, r24
    24cc:	7b 01       	movw	r14, r22
    24ce:	8a 01       	movw	r16, r20
    24d0:	fc 01       	movw	r30, r24
    24d2:	17 82       	std	Z+7, r1	; 0x07
    24d4:	16 82       	std	Z+6, r1	; 0x06
    24d6:	83 81       	ldd	r24, Z+3	; 0x03
    24d8:	81 ff       	sbrs	r24, 1
    24da:	cc c1       	rjmp	.+920    	; 0x2874 <vfprintf+0x3b6>
    24dc:	ce 01       	movw	r24, r28
    24de:	01 96       	adiw	r24, 0x01	; 1
    24e0:	3c 01       	movw	r6, r24
    24e2:	f6 01       	movw	r30, r12
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	f7 01       	movw	r30, r14
    24e8:	93 fd       	sbrc	r25, 3
    24ea:	85 91       	lpm	r24, Z+
    24ec:	93 ff       	sbrs	r25, 3
    24ee:	81 91       	ld	r24, Z+
    24f0:	7f 01       	movw	r14, r30
    24f2:	88 23       	and	r24, r24
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <vfprintf+0x3a>
    24f6:	ba c1       	rjmp	.+884    	; 0x286c <vfprintf+0x3ae>
    24f8:	85 32       	cpi	r24, 0x25	; 37
    24fa:	39 f4       	brne	.+14     	; 0x250a <vfprintf+0x4c>
    24fc:	93 fd       	sbrc	r25, 3
    24fe:	85 91       	lpm	r24, Z+
    2500:	93 ff       	sbrs	r25, 3
    2502:	81 91       	ld	r24, Z+
    2504:	7f 01       	movw	r14, r30
    2506:	85 32       	cpi	r24, 0x25	; 37
    2508:	29 f4       	brne	.+10     	; 0x2514 <vfprintf+0x56>
    250a:	b6 01       	movw	r22, r12
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 56 14 	call	0x28ac	; 0x28ac <fputc>
    2512:	e7 cf       	rjmp	.-50     	; 0x24e2 <vfprintf+0x24>
    2514:	91 2c       	mov	r9, r1
    2516:	21 2c       	mov	r2, r1
    2518:	31 2c       	mov	r3, r1
    251a:	ff e1       	ldi	r31, 0x1F	; 31
    251c:	f3 15       	cp	r31, r3
    251e:	d8 f0       	brcs	.+54     	; 0x2556 <vfprintf+0x98>
    2520:	8b 32       	cpi	r24, 0x2B	; 43
    2522:	79 f0       	breq	.+30     	; 0x2542 <vfprintf+0x84>
    2524:	38 f4       	brcc	.+14     	; 0x2534 <vfprintf+0x76>
    2526:	80 32       	cpi	r24, 0x20	; 32
    2528:	79 f0       	breq	.+30     	; 0x2548 <vfprintf+0x8a>
    252a:	83 32       	cpi	r24, 0x23	; 35
    252c:	a1 f4       	brne	.+40     	; 0x2556 <vfprintf+0x98>
    252e:	23 2d       	mov	r18, r3
    2530:	20 61       	ori	r18, 0x10	; 16
    2532:	1d c0       	rjmp	.+58     	; 0x256e <vfprintf+0xb0>
    2534:	8d 32       	cpi	r24, 0x2D	; 45
    2536:	61 f0       	breq	.+24     	; 0x2550 <vfprintf+0x92>
    2538:	80 33       	cpi	r24, 0x30	; 48
    253a:	69 f4       	brne	.+26     	; 0x2556 <vfprintf+0x98>
    253c:	23 2d       	mov	r18, r3
    253e:	21 60       	ori	r18, 0x01	; 1
    2540:	16 c0       	rjmp	.+44     	; 0x256e <vfprintf+0xb0>
    2542:	83 2d       	mov	r24, r3
    2544:	82 60       	ori	r24, 0x02	; 2
    2546:	38 2e       	mov	r3, r24
    2548:	e3 2d       	mov	r30, r3
    254a:	e4 60       	ori	r30, 0x04	; 4
    254c:	3e 2e       	mov	r3, r30
    254e:	2a c0       	rjmp	.+84     	; 0x25a4 <vfprintf+0xe6>
    2550:	f3 2d       	mov	r31, r3
    2552:	f8 60       	ori	r31, 0x08	; 8
    2554:	1d c0       	rjmp	.+58     	; 0x2590 <vfprintf+0xd2>
    2556:	37 fc       	sbrc	r3, 7
    2558:	2d c0       	rjmp	.+90     	; 0x25b4 <vfprintf+0xf6>
    255a:	20 ed       	ldi	r18, 0xD0	; 208
    255c:	28 0f       	add	r18, r24
    255e:	2a 30       	cpi	r18, 0x0A	; 10
    2560:	40 f0       	brcs	.+16     	; 0x2572 <vfprintf+0xb4>
    2562:	8e 32       	cpi	r24, 0x2E	; 46
    2564:	b9 f4       	brne	.+46     	; 0x2594 <vfprintf+0xd6>
    2566:	36 fc       	sbrc	r3, 6
    2568:	81 c1       	rjmp	.+770    	; 0x286c <vfprintf+0x3ae>
    256a:	23 2d       	mov	r18, r3
    256c:	20 64       	ori	r18, 0x40	; 64
    256e:	32 2e       	mov	r3, r18
    2570:	19 c0       	rjmp	.+50     	; 0x25a4 <vfprintf+0xe6>
    2572:	36 fe       	sbrs	r3, 6
    2574:	06 c0       	rjmp	.+12     	; 0x2582 <vfprintf+0xc4>
    2576:	8a e0       	ldi	r24, 0x0A	; 10
    2578:	98 9e       	mul	r9, r24
    257a:	20 0d       	add	r18, r0
    257c:	11 24       	eor	r1, r1
    257e:	92 2e       	mov	r9, r18
    2580:	11 c0       	rjmp	.+34     	; 0x25a4 <vfprintf+0xe6>
    2582:	ea e0       	ldi	r30, 0x0A	; 10
    2584:	2e 9e       	mul	r2, r30
    2586:	20 0d       	add	r18, r0
    2588:	11 24       	eor	r1, r1
    258a:	22 2e       	mov	r2, r18
    258c:	f3 2d       	mov	r31, r3
    258e:	f0 62       	ori	r31, 0x20	; 32
    2590:	3f 2e       	mov	r3, r31
    2592:	08 c0       	rjmp	.+16     	; 0x25a4 <vfprintf+0xe6>
    2594:	8c 36       	cpi	r24, 0x6C	; 108
    2596:	21 f4       	brne	.+8      	; 0x25a0 <vfprintf+0xe2>
    2598:	83 2d       	mov	r24, r3
    259a:	80 68       	ori	r24, 0x80	; 128
    259c:	38 2e       	mov	r3, r24
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <vfprintf+0xe6>
    25a0:	88 36       	cpi	r24, 0x68	; 104
    25a2:	41 f4       	brne	.+16     	; 0x25b4 <vfprintf+0xf6>
    25a4:	f7 01       	movw	r30, r14
    25a6:	93 fd       	sbrc	r25, 3
    25a8:	85 91       	lpm	r24, Z+
    25aa:	93 ff       	sbrs	r25, 3
    25ac:	81 91       	ld	r24, Z+
    25ae:	7f 01       	movw	r14, r30
    25b0:	81 11       	cpse	r24, r1
    25b2:	b3 cf       	rjmp	.-154    	; 0x251a <vfprintf+0x5c>
    25b4:	98 2f       	mov	r25, r24
    25b6:	9f 7d       	andi	r25, 0xDF	; 223
    25b8:	95 54       	subi	r25, 0x45	; 69
    25ba:	93 30       	cpi	r25, 0x03	; 3
    25bc:	28 f4       	brcc	.+10     	; 0x25c8 <vfprintf+0x10a>
    25be:	0c 5f       	subi	r16, 0xFC	; 252
    25c0:	1f 4f       	sbci	r17, 0xFF	; 255
    25c2:	9f e3       	ldi	r25, 0x3F	; 63
    25c4:	99 83       	std	Y+1, r25	; 0x01
    25c6:	0d c0       	rjmp	.+26     	; 0x25e2 <vfprintf+0x124>
    25c8:	83 36       	cpi	r24, 0x63	; 99
    25ca:	31 f0       	breq	.+12     	; 0x25d8 <vfprintf+0x11a>
    25cc:	83 37       	cpi	r24, 0x73	; 115
    25ce:	71 f0       	breq	.+28     	; 0x25ec <vfprintf+0x12e>
    25d0:	83 35       	cpi	r24, 0x53	; 83
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <vfprintf+0x118>
    25d4:	59 c0       	rjmp	.+178    	; 0x2688 <vfprintf+0x1ca>
    25d6:	21 c0       	rjmp	.+66     	; 0x261a <vfprintf+0x15c>
    25d8:	f8 01       	movw	r30, r16
    25da:	80 81       	ld	r24, Z
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	0e 5f       	subi	r16, 0xFE	; 254
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	88 24       	eor	r8, r8
    25e4:	83 94       	inc	r8
    25e6:	91 2c       	mov	r9, r1
    25e8:	53 01       	movw	r10, r6
    25ea:	13 c0       	rjmp	.+38     	; 0x2612 <vfprintf+0x154>
    25ec:	28 01       	movw	r4, r16
    25ee:	f2 e0       	ldi	r31, 0x02	; 2
    25f0:	4f 0e       	add	r4, r31
    25f2:	51 1c       	adc	r5, r1
    25f4:	f8 01       	movw	r30, r16
    25f6:	a0 80       	ld	r10, Z
    25f8:	b1 80       	ldd	r11, Z+1	; 0x01
    25fa:	36 fe       	sbrs	r3, 6
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <vfprintf+0x146>
    25fe:	69 2d       	mov	r22, r9
    2600:	70 e0       	ldi	r23, 0x00	; 0
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <vfprintf+0x14a>
    2604:	6f ef       	ldi	r22, 0xFF	; 255
    2606:	7f ef       	ldi	r23, 0xFF	; 255
    2608:	c5 01       	movw	r24, r10
    260a:	0e 94 4b 14 	call	0x2896	; 0x2896 <strnlen>
    260e:	4c 01       	movw	r8, r24
    2610:	82 01       	movw	r16, r4
    2612:	f3 2d       	mov	r31, r3
    2614:	ff 77       	andi	r31, 0x7F	; 127
    2616:	3f 2e       	mov	r3, r31
    2618:	16 c0       	rjmp	.+44     	; 0x2646 <vfprintf+0x188>
    261a:	28 01       	movw	r4, r16
    261c:	22 e0       	ldi	r18, 0x02	; 2
    261e:	42 0e       	add	r4, r18
    2620:	51 1c       	adc	r5, r1
    2622:	f8 01       	movw	r30, r16
    2624:	a0 80       	ld	r10, Z
    2626:	b1 80       	ldd	r11, Z+1	; 0x01
    2628:	36 fe       	sbrs	r3, 6
    262a:	03 c0       	rjmp	.+6      	; 0x2632 <vfprintf+0x174>
    262c:	69 2d       	mov	r22, r9
    262e:	70 e0       	ldi	r23, 0x00	; 0
    2630:	02 c0       	rjmp	.+4      	; 0x2636 <vfprintf+0x178>
    2632:	6f ef       	ldi	r22, 0xFF	; 255
    2634:	7f ef       	ldi	r23, 0xFF	; 255
    2636:	c5 01       	movw	r24, r10
    2638:	0e 94 40 14 	call	0x2880	; 0x2880 <strnlen_P>
    263c:	4c 01       	movw	r8, r24
    263e:	f3 2d       	mov	r31, r3
    2640:	f0 68       	ori	r31, 0x80	; 128
    2642:	3f 2e       	mov	r3, r31
    2644:	82 01       	movw	r16, r4
    2646:	33 fc       	sbrc	r3, 3
    2648:	1b c0       	rjmp	.+54     	; 0x2680 <vfprintf+0x1c2>
    264a:	82 2d       	mov	r24, r2
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	88 16       	cp	r8, r24
    2650:	99 06       	cpc	r9, r25
    2652:	b0 f4       	brcc	.+44     	; 0x2680 <vfprintf+0x1c2>
    2654:	b6 01       	movw	r22, r12
    2656:	80 e2       	ldi	r24, 0x20	; 32
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	0e 94 56 14 	call	0x28ac	; 0x28ac <fputc>
    265e:	2a 94       	dec	r2
    2660:	f4 cf       	rjmp	.-24     	; 0x264a <vfprintf+0x18c>
    2662:	f5 01       	movw	r30, r10
    2664:	37 fc       	sbrc	r3, 7
    2666:	85 91       	lpm	r24, Z+
    2668:	37 fe       	sbrs	r3, 7
    266a:	81 91       	ld	r24, Z+
    266c:	5f 01       	movw	r10, r30
    266e:	b6 01       	movw	r22, r12
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	0e 94 56 14 	call	0x28ac	; 0x28ac <fputc>
    2676:	21 10       	cpse	r2, r1
    2678:	2a 94       	dec	r2
    267a:	21 e0       	ldi	r18, 0x01	; 1
    267c:	82 1a       	sub	r8, r18
    267e:	91 08       	sbc	r9, r1
    2680:	81 14       	cp	r8, r1
    2682:	91 04       	cpc	r9, r1
    2684:	71 f7       	brne	.-36     	; 0x2662 <vfprintf+0x1a4>
    2686:	e8 c0       	rjmp	.+464    	; 0x2858 <vfprintf+0x39a>
    2688:	84 36       	cpi	r24, 0x64	; 100
    268a:	11 f0       	breq	.+4      	; 0x2690 <vfprintf+0x1d2>
    268c:	89 36       	cpi	r24, 0x69	; 105
    268e:	41 f5       	brne	.+80     	; 0x26e0 <vfprintf+0x222>
    2690:	f8 01       	movw	r30, r16
    2692:	37 fe       	sbrs	r3, 7
    2694:	07 c0       	rjmp	.+14     	; 0x26a4 <vfprintf+0x1e6>
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	0c 5f       	subi	r16, 0xFC	; 252
    26a0:	1f 4f       	sbci	r17, 0xFF	; 255
    26a2:	08 c0       	rjmp	.+16     	; 0x26b4 <vfprintf+0x1f6>
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	07 2e       	mov	r0, r23
    26aa:	00 0c       	add	r0, r0
    26ac:	88 0b       	sbc	r24, r24
    26ae:	99 0b       	sbc	r25, r25
    26b0:	0e 5f       	subi	r16, 0xFE	; 254
    26b2:	1f 4f       	sbci	r17, 0xFF	; 255
    26b4:	f3 2d       	mov	r31, r3
    26b6:	ff 76       	andi	r31, 0x6F	; 111
    26b8:	3f 2e       	mov	r3, r31
    26ba:	97 ff       	sbrs	r25, 7
    26bc:	09 c0       	rjmp	.+18     	; 0x26d0 <vfprintf+0x212>
    26be:	90 95       	com	r25
    26c0:	80 95       	com	r24
    26c2:	70 95       	com	r23
    26c4:	61 95       	neg	r22
    26c6:	7f 4f       	sbci	r23, 0xFF	; 255
    26c8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ca:	9f 4f       	sbci	r25, 0xFF	; 255
    26cc:	f0 68       	ori	r31, 0x80	; 128
    26ce:	3f 2e       	mov	r3, r31
    26d0:	2a e0       	ldi	r18, 0x0A	; 10
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	a3 01       	movw	r20, r6
    26d6:	0e 94 92 14 	call	0x2924	; 0x2924 <__ultoa_invert>
    26da:	88 2e       	mov	r8, r24
    26dc:	86 18       	sub	r8, r6
    26de:	45 c0       	rjmp	.+138    	; 0x276a <vfprintf+0x2ac>
    26e0:	85 37       	cpi	r24, 0x75	; 117
    26e2:	31 f4       	brne	.+12     	; 0x26f0 <vfprintf+0x232>
    26e4:	23 2d       	mov	r18, r3
    26e6:	2f 7e       	andi	r18, 0xEF	; 239
    26e8:	b2 2e       	mov	r11, r18
    26ea:	2a e0       	ldi	r18, 0x0A	; 10
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	25 c0       	rjmp	.+74     	; 0x273a <vfprintf+0x27c>
    26f0:	93 2d       	mov	r25, r3
    26f2:	99 7f       	andi	r25, 0xF9	; 249
    26f4:	b9 2e       	mov	r11, r25
    26f6:	8f 36       	cpi	r24, 0x6F	; 111
    26f8:	c1 f0       	breq	.+48     	; 0x272a <vfprintf+0x26c>
    26fa:	18 f4       	brcc	.+6      	; 0x2702 <vfprintf+0x244>
    26fc:	88 35       	cpi	r24, 0x58	; 88
    26fe:	79 f0       	breq	.+30     	; 0x271e <vfprintf+0x260>
    2700:	b5 c0       	rjmp	.+362    	; 0x286c <vfprintf+0x3ae>
    2702:	80 37       	cpi	r24, 0x70	; 112
    2704:	19 f0       	breq	.+6      	; 0x270c <vfprintf+0x24e>
    2706:	88 37       	cpi	r24, 0x78	; 120
    2708:	21 f0       	breq	.+8      	; 0x2712 <vfprintf+0x254>
    270a:	b0 c0       	rjmp	.+352    	; 0x286c <vfprintf+0x3ae>
    270c:	e9 2f       	mov	r30, r25
    270e:	e0 61       	ori	r30, 0x10	; 16
    2710:	be 2e       	mov	r11, r30
    2712:	b4 fe       	sbrs	r11, 4
    2714:	0d c0       	rjmp	.+26     	; 0x2730 <vfprintf+0x272>
    2716:	fb 2d       	mov	r31, r11
    2718:	f4 60       	ori	r31, 0x04	; 4
    271a:	bf 2e       	mov	r11, r31
    271c:	09 c0       	rjmp	.+18     	; 0x2730 <vfprintf+0x272>
    271e:	34 fe       	sbrs	r3, 4
    2720:	0a c0       	rjmp	.+20     	; 0x2736 <vfprintf+0x278>
    2722:	29 2f       	mov	r18, r25
    2724:	26 60       	ori	r18, 0x06	; 6
    2726:	b2 2e       	mov	r11, r18
    2728:	06 c0       	rjmp	.+12     	; 0x2736 <vfprintf+0x278>
    272a:	28 e0       	ldi	r18, 0x08	; 8
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	05 c0       	rjmp	.+10     	; 0x273a <vfprintf+0x27c>
    2730:	20 e1       	ldi	r18, 0x10	; 16
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	02 c0       	rjmp	.+4      	; 0x273a <vfprintf+0x27c>
    2736:	20 e1       	ldi	r18, 0x10	; 16
    2738:	32 e0       	ldi	r19, 0x02	; 2
    273a:	f8 01       	movw	r30, r16
    273c:	b7 fe       	sbrs	r11, 7
    273e:	07 c0       	rjmp	.+14     	; 0x274e <vfprintf+0x290>
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	0c 5f       	subi	r16, 0xFC	; 252
    274a:	1f 4f       	sbci	r17, 0xFF	; 255
    274c:	06 c0       	rjmp	.+12     	; 0x275a <vfprintf+0x29c>
    274e:	60 81       	ld	r22, Z
    2750:	71 81       	ldd	r23, Z+1	; 0x01
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	0e 5f       	subi	r16, 0xFE	; 254
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	a3 01       	movw	r20, r6
    275c:	0e 94 92 14 	call	0x2924	; 0x2924 <__ultoa_invert>
    2760:	88 2e       	mov	r8, r24
    2762:	86 18       	sub	r8, r6
    2764:	fb 2d       	mov	r31, r11
    2766:	ff 77       	andi	r31, 0x7F	; 127
    2768:	3f 2e       	mov	r3, r31
    276a:	36 fe       	sbrs	r3, 6
    276c:	0d c0       	rjmp	.+26     	; 0x2788 <vfprintf+0x2ca>
    276e:	23 2d       	mov	r18, r3
    2770:	2e 7f       	andi	r18, 0xFE	; 254
    2772:	a2 2e       	mov	r10, r18
    2774:	89 14       	cp	r8, r9
    2776:	58 f4       	brcc	.+22     	; 0x278e <vfprintf+0x2d0>
    2778:	34 fe       	sbrs	r3, 4
    277a:	0b c0       	rjmp	.+22     	; 0x2792 <vfprintf+0x2d4>
    277c:	32 fc       	sbrc	r3, 2
    277e:	09 c0       	rjmp	.+18     	; 0x2792 <vfprintf+0x2d4>
    2780:	83 2d       	mov	r24, r3
    2782:	8e 7e       	andi	r24, 0xEE	; 238
    2784:	a8 2e       	mov	r10, r24
    2786:	05 c0       	rjmp	.+10     	; 0x2792 <vfprintf+0x2d4>
    2788:	b8 2c       	mov	r11, r8
    278a:	a3 2c       	mov	r10, r3
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <vfprintf+0x2d6>
    278e:	b8 2c       	mov	r11, r8
    2790:	01 c0       	rjmp	.+2      	; 0x2794 <vfprintf+0x2d6>
    2792:	b9 2c       	mov	r11, r9
    2794:	a4 fe       	sbrs	r10, 4
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <vfprintf+0x2f8>
    2798:	fe 01       	movw	r30, r28
    279a:	e8 0d       	add	r30, r8
    279c:	f1 1d       	adc	r31, r1
    279e:	80 81       	ld	r24, Z
    27a0:	80 33       	cpi	r24, 0x30	; 48
    27a2:	21 f4       	brne	.+8      	; 0x27ac <vfprintf+0x2ee>
    27a4:	9a 2d       	mov	r25, r10
    27a6:	99 7e       	andi	r25, 0xE9	; 233
    27a8:	a9 2e       	mov	r10, r25
    27aa:	09 c0       	rjmp	.+18     	; 0x27be <vfprintf+0x300>
    27ac:	a2 fe       	sbrs	r10, 2
    27ae:	06 c0       	rjmp	.+12     	; 0x27bc <vfprintf+0x2fe>
    27b0:	b3 94       	inc	r11
    27b2:	b3 94       	inc	r11
    27b4:	04 c0       	rjmp	.+8      	; 0x27be <vfprintf+0x300>
    27b6:	8a 2d       	mov	r24, r10
    27b8:	86 78       	andi	r24, 0x86	; 134
    27ba:	09 f0       	breq	.+2      	; 0x27be <vfprintf+0x300>
    27bc:	b3 94       	inc	r11
    27be:	a3 fc       	sbrc	r10, 3
    27c0:	11 c0       	rjmp	.+34     	; 0x27e4 <vfprintf+0x326>
    27c2:	a0 fe       	sbrs	r10, 0
    27c4:	06 c0       	rjmp	.+12     	; 0x27d2 <vfprintf+0x314>
    27c6:	b2 14       	cp	r11, r2
    27c8:	88 f4       	brcc	.+34     	; 0x27ec <vfprintf+0x32e>
    27ca:	28 0c       	add	r2, r8
    27cc:	92 2c       	mov	r9, r2
    27ce:	9b 18       	sub	r9, r11
    27d0:	0e c0       	rjmp	.+28     	; 0x27ee <vfprintf+0x330>
    27d2:	b2 14       	cp	r11, r2
    27d4:	60 f4       	brcc	.+24     	; 0x27ee <vfprintf+0x330>
    27d6:	b6 01       	movw	r22, r12
    27d8:	80 e2       	ldi	r24, 0x20	; 32
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	0e 94 56 14 	call	0x28ac	; 0x28ac <fputc>
    27e0:	b3 94       	inc	r11
    27e2:	f7 cf       	rjmp	.-18     	; 0x27d2 <vfprintf+0x314>
    27e4:	b2 14       	cp	r11, r2
    27e6:	18 f4       	brcc	.+6      	; 0x27ee <vfprintf+0x330>
    27e8:	2b 18       	sub	r2, r11
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <vfprintf+0x332>
    27ec:	98 2c       	mov	r9, r8
    27ee:	21 2c       	mov	r2, r1
    27f0:	a4 fe       	sbrs	r10, 4
    27f2:	10 c0       	rjmp	.+32     	; 0x2814 <vfprintf+0x356>
    27f4:	b6 01       	movw	r22, r12
    27f6:	80 e3       	ldi	r24, 0x30	; 48
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	0e 94 56 14 	call	0x28ac	; 0x28ac <fputc>
    27fe:	a2 fe       	sbrs	r10, 2
    2800:	17 c0       	rjmp	.+46     	; 0x2830 <vfprintf+0x372>
    2802:	a1 fc       	sbrc	r10, 1
    2804:	03 c0       	rjmp	.+6      	; 0x280c <vfprintf+0x34e>
    2806:	88 e7       	ldi	r24, 0x78	; 120
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <vfprintf+0x352>
    280c:	88 e5       	ldi	r24, 0x58	; 88
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	b6 01       	movw	r22, r12
    2812:	0c c0       	rjmp	.+24     	; 0x282c <vfprintf+0x36e>
    2814:	8a 2d       	mov	r24, r10
    2816:	86 78       	andi	r24, 0x86	; 134
    2818:	59 f0       	breq	.+22     	; 0x2830 <vfprintf+0x372>
    281a:	a1 fe       	sbrs	r10, 1
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <vfprintf+0x364>
    281e:	8b e2       	ldi	r24, 0x2B	; 43
    2820:	01 c0       	rjmp	.+2      	; 0x2824 <vfprintf+0x366>
    2822:	80 e2       	ldi	r24, 0x20	; 32
    2824:	a7 fc       	sbrc	r10, 7
    2826:	8d e2       	ldi	r24, 0x2D	; 45
    2828:	b6 01       	movw	r22, r12
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 56 14 	call	0x28ac	; 0x28ac <fputc>
    2830:	89 14       	cp	r8, r9
    2832:	38 f4       	brcc	.+14     	; 0x2842 <vfprintf+0x384>
    2834:	b6 01       	movw	r22, r12
    2836:	80 e3       	ldi	r24, 0x30	; 48
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	0e 94 56 14 	call	0x28ac	; 0x28ac <fputc>
    283e:	9a 94       	dec	r9
    2840:	f7 cf       	rjmp	.-18     	; 0x2830 <vfprintf+0x372>
    2842:	8a 94       	dec	r8
    2844:	f3 01       	movw	r30, r6
    2846:	e8 0d       	add	r30, r8
    2848:	f1 1d       	adc	r31, r1
    284a:	80 81       	ld	r24, Z
    284c:	b6 01       	movw	r22, r12
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	0e 94 56 14 	call	0x28ac	; 0x28ac <fputc>
    2854:	81 10       	cpse	r8, r1
    2856:	f5 cf       	rjmp	.-22     	; 0x2842 <vfprintf+0x384>
    2858:	22 20       	and	r2, r2
    285a:	09 f4       	brne	.+2      	; 0x285e <vfprintf+0x3a0>
    285c:	42 ce       	rjmp	.-892    	; 0x24e2 <vfprintf+0x24>
    285e:	b6 01       	movw	r22, r12
    2860:	80 e2       	ldi	r24, 0x20	; 32
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 56 14 	call	0x28ac	; 0x28ac <fputc>
    2868:	2a 94       	dec	r2
    286a:	f6 cf       	rjmp	.-20     	; 0x2858 <vfprintf+0x39a>
    286c:	f6 01       	movw	r30, r12
    286e:	86 81       	ldd	r24, Z+6	; 0x06
    2870:	97 81       	ldd	r25, Z+7	; 0x07
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <vfprintf+0x3ba>
    2874:	8f ef       	ldi	r24, 0xFF	; 255
    2876:	9f ef       	ldi	r25, 0xFF	; 255
    2878:	2b 96       	adiw	r28, 0x0b	; 11
    287a:	e2 e1       	ldi	r30, 0x12	; 18
    287c:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__>

00002880 <strnlen_P>:
    2880:	fc 01       	movw	r30, r24
    2882:	05 90       	lpm	r0, Z+
    2884:	61 50       	subi	r22, 0x01	; 1
    2886:	70 40       	sbci	r23, 0x00	; 0
    2888:	01 10       	cpse	r0, r1
    288a:	d8 f7       	brcc	.-10     	; 0x2882 <strnlen_P+0x2>
    288c:	80 95       	com	r24
    288e:	90 95       	com	r25
    2890:	8e 0f       	add	r24, r30
    2892:	9f 1f       	adc	r25, r31
    2894:	08 95       	ret

00002896 <strnlen>:
    2896:	fc 01       	movw	r30, r24
    2898:	61 50       	subi	r22, 0x01	; 1
    289a:	70 40       	sbci	r23, 0x00	; 0
    289c:	01 90       	ld	r0, Z+
    289e:	01 10       	cpse	r0, r1
    28a0:	d8 f7       	brcc	.-10     	; 0x2898 <strnlen+0x2>
    28a2:	80 95       	com	r24
    28a4:	90 95       	com	r25
    28a6:	8e 0f       	add	r24, r30
    28a8:	9f 1f       	adc	r25, r31
    28aa:	08 95       	ret

000028ac <fputc>:
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	fb 01       	movw	r30, r22
    28b6:	23 81       	ldd	r18, Z+3	; 0x03
    28b8:	21 fd       	sbrc	r18, 1
    28ba:	03 c0       	rjmp	.+6      	; 0x28c2 <fputc+0x16>
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	9f ef       	ldi	r25, 0xFF	; 255
    28c0:	2c c0       	rjmp	.+88     	; 0x291a <fputc+0x6e>
    28c2:	22 ff       	sbrs	r18, 2
    28c4:	16 c0       	rjmp	.+44     	; 0x28f2 <fputc+0x46>
    28c6:	46 81       	ldd	r20, Z+6	; 0x06
    28c8:	57 81       	ldd	r21, Z+7	; 0x07
    28ca:	24 81       	ldd	r18, Z+4	; 0x04
    28cc:	35 81       	ldd	r19, Z+5	; 0x05
    28ce:	42 17       	cp	r20, r18
    28d0:	53 07       	cpc	r21, r19
    28d2:	44 f4       	brge	.+16     	; 0x28e4 <fputc+0x38>
    28d4:	a0 81       	ld	r26, Z
    28d6:	b1 81       	ldd	r27, Z+1	; 0x01
    28d8:	9d 01       	movw	r18, r26
    28da:	2f 5f       	subi	r18, 0xFF	; 255
    28dc:	3f 4f       	sbci	r19, 0xFF	; 255
    28de:	31 83       	std	Z+1, r19	; 0x01
    28e0:	20 83       	st	Z, r18
    28e2:	8c 93       	st	X, r24
    28e4:	26 81       	ldd	r18, Z+6	; 0x06
    28e6:	37 81       	ldd	r19, Z+7	; 0x07
    28e8:	2f 5f       	subi	r18, 0xFF	; 255
    28ea:	3f 4f       	sbci	r19, 0xFF	; 255
    28ec:	37 83       	std	Z+7, r19	; 0x07
    28ee:	26 83       	std	Z+6, r18	; 0x06
    28f0:	14 c0       	rjmp	.+40     	; 0x291a <fputc+0x6e>
    28f2:	8b 01       	movw	r16, r22
    28f4:	ec 01       	movw	r28, r24
    28f6:	fb 01       	movw	r30, r22
    28f8:	00 84       	ldd	r0, Z+8	; 0x08
    28fa:	f1 85       	ldd	r31, Z+9	; 0x09
    28fc:	e0 2d       	mov	r30, r0
    28fe:	09 95       	icall
    2900:	89 2b       	or	r24, r25
    2902:	e1 f6       	brne	.-72     	; 0x28bc <fputc+0x10>
    2904:	d8 01       	movw	r26, r16
    2906:	16 96       	adiw	r26, 0x06	; 6
    2908:	8d 91       	ld	r24, X+
    290a:	9c 91       	ld	r25, X
    290c:	17 97       	sbiw	r26, 0x07	; 7
    290e:	01 96       	adiw	r24, 0x01	; 1
    2910:	17 96       	adiw	r26, 0x07	; 7
    2912:	9c 93       	st	X, r25
    2914:	8e 93       	st	-X, r24
    2916:	16 97       	sbiw	r26, 0x06	; 6
    2918:	ce 01       	movw	r24, r28
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	08 95       	ret

00002924 <__ultoa_invert>:
    2924:	fa 01       	movw	r30, r20
    2926:	aa 27       	eor	r26, r26
    2928:	28 30       	cpi	r18, 0x08	; 8
    292a:	51 f1       	breq	.+84     	; 0x2980 <__ultoa_invert+0x5c>
    292c:	20 31       	cpi	r18, 0x10	; 16
    292e:	81 f1       	breq	.+96     	; 0x2990 <__ultoa_invert+0x6c>
    2930:	e8 94       	clt
    2932:	6f 93       	push	r22
    2934:	6e 7f       	andi	r22, 0xFE	; 254
    2936:	6e 5f       	subi	r22, 0xFE	; 254
    2938:	7f 4f       	sbci	r23, 0xFF	; 255
    293a:	8f 4f       	sbci	r24, 0xFF	; 255
    293c:	9f 4f       	sbci	r25, 0xFF	; 255
    293e:	af 4f       	sbci	r26, 0xFF	; 255
    2940:	b1 e0       	ldi	r27, 0x01	; 1
    2942:	3e d0       	rcall	.+124    	; 0x29c0 <__ultoa_invert+0x9c>
    2944:	b4 e0       	ldi	r27, 0x04	; 4
    2946:	3c d0       	rcall	.+120    	; 0x29c0 <__ultoa_invert+0x9c>
    2948:	67 0f       	add	r22, r23
    294a:	78 1f       	adc	r23, r24
    294c:	89 1f       	adc	r24, r25
    294e:	9a 1f       	adc	r25, r26
    2950:	a1 1d       	adc	r26, r1
    2952:	68 0f       	add	r22, r24
    2954:	79 1f       	adc	r23, r25
    2956:	8a 1f       	adc	r24, r26
    2958:	91 1d       	adc	r25, r1
    295a:	a1 1d       	adc	r26, r1
    295c:	6a 0f       	add	r22, r26
    295e:	71 1d       	adc	r23, r1
    2960:	81 1d       	adc	r24, r1
    2962:	91 1d       	adc	r25, r1
    2964:	a1 1d       	adc	r26, r1
    2966:	20 d0       	rcall	.+64     	; 0x29a8 <__ultoa_invert+0x84>
    2968:	09 f4       	brne	.+2      	; 0x296c <__ultoa_invert+0x48>
    296a:	68 94       	set
    296c:	3f 91       	pop	r19
    296e:	2a e0       	ldi	r18, 0x0A	; 10
    2970:	26 9f       	mul	r18, r22
    2972:	11 24       	eor	r1, r1
    2974:	30 19       	sub	r19, r0
    2976:	30 5d       	subi	r19, 0xD0	; 208
    2978:	31 93       	st	Z+, r19
    297a:	de f6       	brtc	.-74     	; 0x2932 <__ultoa_invert+0xe>
    297c:	cf 01       	movw	r24, r30
    297e:	08 95       	ret
    2980:	46 2f       	mov	r20, r22
    2982:	47 70       	andi	r20, 0x07	; 7
    2984:	40 5d       	subi	r20, 0xD0	; 208
    2986:	41 93       	st	Z+, r20
    2988:	b3 e0       	ldi	r27, 0x03	; 3
    298a:	0f d0       	rcall	.+30     	; 0x29aa <__ultoa_invert+0x86>
    298c:	c9 f7       	brne	.-14     	; 0x2980 <__ultoa_invert+0x5c>
    298e:	f6 cf       	rjmp	.-20     	; 0x297c <__ultoa_invert+0x58>
    2990:	46 2f       	mov	r20, r22
    2992:	4f 70       	andi	r20, 0x0F	; 15
    2994:	40 5d       	subi	r20, 0xD0	; 208
    2996:	4a 33       	cpi	r20, 0x3A	; 58
    2998:	18 f0       	brcs	.+6      	; 0x29a0 <__ultoa_invert+0x7c>
    299a:	49 5d       	subi	r20, 0xD9	; 217
    299c:	31 fd       	sbrc	r19, 1
    299e:	40 52       	subi	r20, 0x20	; 32
    29a0:	41 93       	st	Z+, r20
    29a2:	02 d0       	rcall	.+4      	; 0x29a8 <__ultoa_invert+0x84>
    29a4:	a9 f7       	brne	.-22     	; 0x2990 <__ultoa_invert+0x6c>
    29a6:	ea cf       	rjmp	.-44     	; 0x297c <__ultoa_invert+0x58>
    29a8:	b4 e0       	ldi	r27, 0x04	; 4
    29aa:	a6 95       	lsr	r26
    29ac:	97 95       	ror	r25
    29ae:	87 95       	ror	r24
    29b0:	77 95       	ror	r23
    29b2:	67 95       	ror	r22
    29b4:	ba 95       	dec	r27
    29b6:	c9 f7       	brne	.-14     	; 0x29aa <__ultoa_invert+0x86>
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	61 05       	cpc	r22, r1
    29bc:	71 05       	cpc	r23, r1
    29be:	08 95       	ret
    29c0:	9b 01       	movw	r18, r22
    29c2:	ac 01       	movw	r20, r24
    29c4:	0a 2e       	mov	r0, r26
    29c6:	06 94       	lsr	r0
    29c8:	57 95       	ror	r21
    29ca:	47 95       	ror	r20
    29cc:	37 95       	ror	r19
    29ce:	27 95       	ror	r18
    29d0:	ba 95       	dec	r27
    29d2:	c9 f7       	brne	.-14     	; 0x29c6 <__ultoa_invert+0xa2>
    29d4:	62 0f       	add	r22, r18
    29d6:	73 1f       	adc	r23, r19
    29d8:	84 1f       	adc	r24, r20
    29da:	95 1f       	adc	r25, r21
    29dc:	a0 1d       	adc	r26, r0
    29de:	08 95       	ret

000029e0 <__muluhisi3>:
    29e0:	0e 94 36 11 	call	0x226c	; 0x226c <__umulhisi3>
    29e4:	a5 9f       	mul	r26, r21
    29e6:	90 0d       	add	r25, r0
    29e8:	b4 9f       	mul	r27, r20
    29ea:	90 0d       	add	r25, r0
    29ec:	a4 9f       	mul	r26, r20
    29ee:	80 0d       	add	r24, r0
    29f0:	91 1d       	adc	r25, r1
    29f2:	11 24       	eor	r1, r1
    29f4:	08 95       	ret

000029f6 <__mulshisi3>:
    29f6:	b7 ff       	sbrs	r27, 7
    29f8:	0c 94 f0 14 	jmp	0x29e0	; 0x29e0 <__muluhisi3>

000029fc <__mulohisi3>:
    29fc:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <__muluhisi3>
    2a00:	82 1b       	sub	r24, r18
    2a02:	93 0b       	sbc	r25, r19
    2a04:	08 95       	ret

00002a06 <__prologue_saves__>:
    2a06:	2f 92       	push	r2
    2a08:	3f 92       	push	r3
    2a0a:	4f 92       	push	r4
    2a0c:	5f 92       	push	r5
    2a0e:	6f 92       	push	r6
    2a10:	7f 92       	push	r7
    2a12:	8f 92       	push	r8
    2a14:	9f 92       	push	r9
    2a16:	af 92       	push	r10
    2a18:	bf 92       	push	r11
    2a1a:	cf 92       	push	r12
    2a1c:	df 92       	push	r13
    2a1e:	ef 92       	push	r14
    2a20:	ff 92       	push	r15
    2a22:	0f 93       	push	r16
    2a24:	1f 93       	push	r17
    2a26:	cf 93       	push	r28
    2a28:	df 93       	push	r29
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	ca 1b       	sub	r28, r26
    2a30:	db 0b       	sbc	r29, r27
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	09 94       	ijmp

00002a3e <__epilogue_restores__>:
    2a3e:	2a 88       	ldd	r2, Y+18	; 0x12
    2a40:	39 88       	ldd	r3, Y+17	; 0x11
    2a42:	48 88       	ldd	r4, Y+16	; 0x10
    2a44:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a46:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a48:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a50:	b9 84       	ldd	r11, Y+9	; 0x09
    2a52:	c8 84       	ldd	r12, Y+8	; 0x08
    2a54:	df 80       	ldd	r13, Y+7	; 0x07
    2a56:	ee 80       	ldd	r14, Y+6	; 0x06
    2a58:	fd 80       	ldd	r15, Y+5	; 0x05
    2a5a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a5c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a5e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a60:	b9 81       	ldd	r27, Y+1	; 0x01
    2a62:	ce 0f       	add	r28, r30
    2a64:	d1 1d       	adc	r29, r1
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	de bf       	out	0x3e, r29	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	cd bf       	out	0x3d, r28	; 61
    2a70:	ed 01       	movw	r28, r26
    2a72:	08 95       	ret

00002a74 <_exit>:
    2a74:	f8 94       	cli

00002a76 <__stop_program>:
    2a76:	ff cf       	rjmp	.-2      	; 0x2a76 <__stop_program>
