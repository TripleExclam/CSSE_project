
CSSE_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00002098  0000212c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002098  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015c  00800150  00800150  0000217c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000388  00000000  00000000  00002218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035d8  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014b7  00000000  00000000  00005b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dd5  00000000  00000000  0000702f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a50  00000000  00000000  00008e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000100b  00000000  00000000  00009854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026fd  00000000  00000000  0000a85f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__ctors_end>
       4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
       8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
       c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      10:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      14:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_5>
      18:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      1c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      20:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      24:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      28:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      2c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      30:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      34:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      38:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      3c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      40:	0c 94 f0 0b 	jmp	0x17e0	; 0x17e0 <__vector_16>
      44:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      48:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      4c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      50:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__vector_20>
      54:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__vector_21>
      58:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      5c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      60:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      64:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      68:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      6c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      70:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      74:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
      78:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	59 6f       	ori	r21, 0xF9	; 249
      7e:	75 20       	and	r7, r5
      80:	68 61       	ori	r22, 0x18	; 24
      82:	76 65       	ori	r23, 0x56	; 86
      84:	20 25       	eor	r18, r0
      86:	6c 75       	andi	r22, 0x5C	; 92
      88:	20 6c       	ori	r18, 0xC0	; 192
      8a:	69 76       	andi	r22, 0x69	; 105
      8c:	65 73       	andi	r22, 0x35	; 53
      8e:	20 72       	andi	r18, 0x20	; 32
      90:	65 6d       	ori	r22, 0xD5	; 213
      92:	61 69       	ori	r22, 0x91	; 145
      94:	6e 69       	ori	r22, 0x9E	; 158
      96:	6e 67       	ori	r22, 0x7E	; 126
      98:	2e 00       	.word	0x002e	; ????

0000009a <__c.2392>:
      9a:	53 63 6f 72 65 3a 20 25 6c 75 00                    Score: %lu.

000000a5 <__c.2304>:
      a5:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      b5:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000c3 <__c.2302>:
      c3:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000cd <__c.2282>:
      cd:	59 6f 75 20 68 61 76 65 20 25 6c 75 20 6c 69 76     You have %lu liv
      dd:	65 73 20 72 65 6d 61 69 6e 69 6e 67 2e 00           es remaining..

000000eb <__c.2276>:
      eb:	53 63 6f 72 65 3a 20 25 6c 75 00                    Score: %lu.

000000f6 <__c.2274>:
      f6:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

00000100 <__c.2265>:
     100:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
     110:	6f 6a 65 63 74 20 62 79 20 4d 61 74 74 68 65 77     oject by Matthew
     120:	20 42 75 72 74 6f 6e 00                              Burton.

00000128 <__c.2263>:
     128:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

00000132 <numbers>:
     132:	9d 01 9a 01 96 01 92 01 8e 01 8a 01 86 01 82 01     ................
     142:	7e 01 7a 01                                         ~.z.

00000146 <letters>:
     146:	0c 02 08 02 04 02 00 02 fc 01 f8 01 f4 01 f0 01     ................
     156:	ed 01 e9 01 e5 01 e1 01 dc 01 d8 01 d4 01 d0 01     ................
     166:	cb 01 c7 01 c3 01 be 01 ba 01 b5 01 b0 01 ab 01     ................
     176:	a6 01 a1 01                                         ....

0000017a <cols_9>:
     17a:	64 92 92 7d                                         d..}

0000017e <cols_8>:
     17e:	6c 92 92 6d                                         l..m

00000182 <cols_7>:
     182:	80 9e a0 c1                                         ....

00000186 <cols_6>:
     186:	7c 92 92 4d                                         |..M

0000018a <cols_5>:
     18a:	e4 a2 a2 9d                                         ....

0000018e <cols_4>:
     18e:	18 28 48 ff                                         .(H.

00000192 <cols_3>:
     192:	44 92 92 6d                                         D..m

00000196 <cols_2>:
     196:	46 8a 92 63                                         F..c

0000019a <cols_1>:
     19a:	42 fe 03                                            B..

0000019d <cols_0>:
     19d:	7c 92 a2 7d                                         |..}

000001a1 <cols_Z>:
     1a1:	86 8a 92 a2 c3                                      .....

000001a6 <cols_Y>:
     1a6:	e0 10 0e 10 e1                                      .....

000001ab <cols_X>:
     1ab:	c6 28 10 28 c7                                      .(.(.

000001b0 <cols_W>:
     1b0:	fc 02 1c 02 fd                                      .....

000001b5 <cols_V>:
     1b5:	f8 04 02 04 f9                                      .....

000001ba <cols_U>:
     1ba:	fc 02 02 fd                                         ....

000001be <cols_T>:
     1be:	80 80 fe 80 81                                      .....

000001c3 <cols_S>:
     1c3:	64 92 92 4d                                         d..M

000001c7 <cols_R>:
     1c7:	fe 90 98 67                                         ...g

000001cb <cols_Q>:
     1cb:	7c 82 8a 7c 03                                      |..|.

000001d0 <cols_P>:
     1d0:	fe 90 90 61                                         ...a

000001d4 <cols_O>:
     1d4:	7c 82 82 7d                                         |..}

000001d8 <cols_N>:
     1d8:	fe 20 10 ff                                         . ..

000001dc <cols_M>:
     1dc:	fe 40 30 40 ff                                      .@0@.

000001e1 <cols_L>:
     1e1:	fe 02 02 03                                         ....

000001e5 <cols_K>:
     1e5:	fe 10 28 c7                                         ..(.

000001e9 <cols_J>:
     1e9:	04 02 02 fd                                         ....

000001ed <cols_I>:
     1ed:	82 fe 83                                            ...

000001f0 <cols_H>:
     1f0:	fe 10 10 ff                                         ....

000001f4 <cols_G>:
     1f4:	7c 82 92 5d                                         |..]

000001f8 <cols_F>:
     1f8:	fe 90 90 81                                         ....

000001fc <cols_E>:
     1fc:	fe 92 92 83                                         ....

00000200 <cols_D>:
     200:	fe 82 82 7d                                         ...}

00000204 <cols_C>:
     204:	7c 82 82 45                                         |..E

00000208 <cols_B>:
     208:	fe 92 92 6d                                         ...m

0000020c <cols_A>:
     20c:	7e 90 90 7f                                         ~...

00000210 <__c.2040>:
     210:	1b 5b 32 4a 00                                      .[2J.

00000215 <__c.2025>:
     215:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

0000021e <__ctors_end>:
     21e:	11 24       	eor	r1, r1
     220:	1f be       	out	0x3f, r1	; 63
     222:	cf ef       	ldi	r28, 0xFF	; 255
     224:	d8 e0       	ldi	r29, 0x08	; 8
     226:	de bf       	out	0x3e, r29	; 62
     228:	cd bf       	out	0x3d, r28	; 61

0000022a <__do_copy_data>:
     22a:	11 e0       	ldi	r17, 0x01	; 1
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b1 e0       	ldi	r27, 0x01	; 1
     230:	e8 e9       	ldi	r30, 0x98	; 152
     232:	f0 e2       	ldi	r31, 0x20	; 32
     234:	02 c0       	rjmp	.+4      	; 0x23a <__do_copy_data+0x10>
     236:	05 90       	lpm	r0, Z+
     238:	0d 92       	st	X+, r0
     23a:	a0 35       	cpi	r26, 0x50	; 80
     23c:	b1 07       	cpc	r27, r17
     23e:	d9 f7       	brne	.-10     	; 0x236 <__do_copy_data+0xc>

00000240 <__do_clear_bss>:
     240:	22 e0       	ldi	r18, 0x02	; 2
     242:	a0 e5       	ldi	r26, 0x50	; 80
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	01 c0       	rjmp	.+2      	; 0x24a <.do_clear_bss_start>

00000248 <.do_clear_bss_loop>:
     248:	1d 92       	st	X+, r1

0000024a <.do_clear_bss_start>:
     24a:	ac 3a       	cpi	r26, 0xAC	; 172
     24c:	b2 07       	cpc	r27, r18
     24e:	e1 f7       	brne	.-8      	; 0x248 <.do_clear_bss_loop>
     250:	0e 94 78 08 	call	0x10f0	; 0x10f0 <main>
     254:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <_exit>

00000258 <__bad_interrupt>:
     258:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025c <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     25c:	e8 e6       	ldi	r30, 0x68	; 104
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	82 60       	ori	r24, 0x02	; 2
     264:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     266:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     268:	ec e6       	ldi	r30, 0x6C	; 108
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     272:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <__data_end>
     276:	08 95       	ret

00000278 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     278:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     27c:	18 16       	cp	r1, r24
     27e:	3c f5       	brge	.+78     	; 0x2ce <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     280:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     284:	6f b7       	in	r22, 0x3f	; 63
		cli();
     286:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     288:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__data_end>
     28c:	92 30       	cpi	r25, 0x02	; 2
     28e:	b4 f0       	brlt	.+44     	; 0x2bc <button_pushed+0x44>
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     296:	f9 01       	movw	r30, r18
     298:	ef 5a       	subi	r30, 0xAF	; 175
     29a:	fe 4f       	sbci	r31, 0xFE	; 254
     29c:	40 81       	ld	r20, Z
     29e:	f9 01       	movw	r30, r18
     2a0:	e0 5b       	subi	r30, 0xB0	; 176
     2a2:	fe 4f       	sbci	r31, 0xFE	; 254
     2a4:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2a6:	9f 5f       	subi	r25, 0xFF	; 255
     2a8:	29 2f       	mov	r18, r25
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 91 50 01 	lds	r20, 0x0150	; 0x800150 <__data_end>
     2b0:	04 2e       	mov	r0, r20
     2b2:	00 0c       	add	r0, r0
     2b4:	55 0b       	sbc	r21, r21
     2b6:	24 17       	cp	r18, r20
     2b8:	35 07       	cpc	r19, r21
     2ba:	6c f3       	brlt	.-38     	; 0x296 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     2bc:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <__data_end>
     2c0:	91 50       	subi	r25, 0x01	; 1
     2c2:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <__data_end>
		
		if(interrupts_were_enabled) {
     2c6:	66 23       	and	r22, r22
     2c8:	1c f4       	brge	.+6      	; 0x2d0 <button_pushed+0x58>
			// Turn them back on again
			sei();
     2ca:	78 94       	sei
     2cc:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     2d0:	08 95       	ret

000002d2 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	2f 93       	push	r18
     2de:	3f 93       	push	r19
     2e0:	4f 93       	push	r20
     2e2:	5f 93       	push	r21
     2e4:	6f 93       	push	r22
     2e6:	7f 93       	push	r23
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	ef 93       	push	r30
     2ee:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2f0:	43 b1       	in	r20, 0x03	; 3
     2f2:	4f 70       	andi	r20, 0x0F	; 15
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     2f8:	64 2f       	mov	r22, r20
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <__data_end>
     300:	24 30       	cpi	r18, 0x04	; 4
     302:	04 f5       	brge	.+64     	; 0x344 <__vector_5+0x72>
     304:	9b 01       	movw	r18, r22
     306:	08 2e       	mov	r0, r24
     308:	02 c0       	rjmp	.+4      	; 0x30e <__vector_5+0x3c>
     30a:	35 95       	asr	r19
     30c:	27 95       	ror	r18
     30e:	0a 94       	dec	r0
     310:	e2 f7       	brpl	.-8      	; 0x30a <__vector_5+0x38>
     312:	20 ff       	sbrs	r18, 0
     314:	17 c0       	rjmp	.+46     	; 0x344 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     316:	20 91 55 01 	lds	r18, 0x0155	; 0x800155 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	08 2e       	mov	r0, r24
     31e:	02 c0       	rjmp	.+4      	; 0x324 <__vector_5+0x52>
     320:	35 95       	asr	r19
     322:	27 95       	ror	r18
     324:	0a 94       	dec	r0
     326:	e2 f7       	brpl	.-8      	; 0x320 <__vector_5+0x4e>
     328:	20 fd       	sbrc	r18, 0
     32a:	0c c0       	rjmp	.+24     	; 0x344 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     32c:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <__data_end>
     330:	21 e0       	ldi	r18, 0x01	; 1
     332:	2e 0f       	add	r18, r30
     334:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <__data_end>
     338:	0e 2e       	mov	r0, r30
     33a:	00 0c       	add	r0, r0
     33c:	ff 0b       	sbc	r31, r31
     33e:	ef 5a       	subi	r30, 0xAF	; 175
     340:	fe 4f       	sbci	r31, 0xFE	; 254
     342:	80 83       	st	Z, r24
     344:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     346:	84 30       	cpi	r24, 0x04	; 4
     348:	91 05       	cpc	r25, r1
     34a:	c1 f6       	brne	.-80     	; 0x2fc <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     34c:	40 93 55 01 	sts	0x0155, r20	; 0x800155 <last_button_state>
     350:	ff 91       	pop	r31
     352:	ef 91       	pop	r30
     354:	9f 91       	pop	r25
     356:	8f 91       	pop	r24
     358:	7f 91       	pop	r23
     35a:	6f 91       	pop	r22
     35c:	5f 91       	pop	r21
     35e:	4f 91       	pop	r20
     360:	3f 91       	pop	r19
     362:	2f 91       	pop	r18
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <asteroid_at>:
// Check whether there is an asteroid at a given position.
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     36e:	20 e1       	ldi	r18, 0x10	; 16
     370:	82 9f       	mul	r24, r18
     372:	c0 01       	movw	r24, r0
     374:	11 24       	eor	r1, r1
     376:	6f 70       	andi	r22, 0x0F	; 15
     378:	86 2b       	or	r24, r22
	for(i=0; i < numAsteroids; i++) {
     37a:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <numAsteroids>
     37e:	04 2e       	mov	r0, r20
     380:	00 0c       	add	r0, r0
     382:	55 0b       	sbc	r21, r21
     384:	14 16       	cp	r1, r20
     386:	15 06       	cpc	r1, r21
     388:	c4 f4       	brge	.+48     	; 0x3ba <asteroid_at+0x4c>
		if(asteroids[i] == positionToCheck) {
     38a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <asteroids>
     38e:	89 17       	cp	r24, r25
     390:	49 f0       	breq	.+18     	; 0x3a4 <asteroid_at+0x36>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0a c0       	rjmp	.+20     	; 0x3aa <asteroid_at+0x3c>
     396:	f9 01       	movw	r30, r18
     398:	e3 59       	subi	r30, 0x93	; 147
     39a:	fe 4f       	sbci	r31, 0xFE	; 254
     39c:	20 81       	ld	r18, Z
     39e:	82 13       	cpse	r24, r18
     3a0:	04 c0       	rjmp	.+8      	; 0x3aa <asteroid_at+0x3c>
     3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <asteroid_at+0x38>
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     3a4:	90 e0       	ldi	r25, 0x00	; 0
		if(asteroids[i] == positionToCheck) {
			// Asteroid i is at the given position
			return i;
     3a6:	89 2f       	mov	r24, r25
     3a8:	08 95       	ret
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     3aa:	9f 5f       	subi	r25, 0xFF	; 255
     3ac:	29 2f       	mov	r18, r25
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	24 17       	cp	r18, r20
     3b2:	35 07       	cpc	r19, r21
     3b4:	84 f3       	brlt	.-32     	; 0x396 <asteroid_at+0x28>
			// Asteroid i is at the given position
			return i;
		}
	}
	// No match was found - no asteroid at the given position
	return -1;
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	08 95       	ret
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
}
     3bc:	08 95       	ret

000003be <redraw_base>:
	redraw_all_asteroids();	
	redraw_all_projectiles();
}


static void redraw_base(uint8_t colour){
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	18 2f       	mov	r17, r24
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition + 1; x++) {
     3c6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <basePosition>
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	89 0f       	add	r24, r25
     3ce:	48 2f       	mov	r20, r24
     3d0:	08 2e       	mov	r0, r24
     3d2:	00 0c       	add	r0, r0
     3d4:	55 0b       	sbc	r21, r21
     3d6:	29 2f       	mov	r18, r25
     3d8:	09 2e       	mov	r0, r25
     3da:	00 0c       	add	r0, r0
     3dc:	33 0b       	sbc	r19, r19
     3de:	2f 5f       	subi	r18, 0xFF	; 255
     3e0:	3f 4f       	sbci	r19, 0xFF	; 255
     3e2:	24 17       	cp	r18, r20
     3e4:	35 07       	cpc	r19, r21
     3e6:	e4 f0       	brlt	.+56     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3e8:	d8 e0       	ldi	r29, 0x08	; 8
     3ea:	d9 1b       	sub	r29, r25
     3ec:	c8 2f       	mov	r28, r24
		if (x >= 0 && x < FIELD_WIDTH) {
     3ee:	88 30       	cpi	r24, 0x08	; 8
     3f0:	28 f4       	brcc	.+10     	; 0x3fc <redraw_base+0x3e>
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
     3f2:	41 2f       	mov	r20, r17
     3f4:	6d 2f       	mov	r22, r29
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 0b 06 	call	0xc16	; 0xc16 <ledmatrix_update_pixel>
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	8c 0f       	add	r24, r28


static void redraw_base(uint8_t colour){
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition + 1; x++) {
     400:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <basePosition>
     404:	d1 50       	subi	r29, 0x01	; 1
     406:	48 2f       	mov	r20, r24
     408:	08 2e       	mov	r0, r24
     40a:	00 0c       	add	r0, r0
     40c:	55 0b       	sbc	r21, r21
     40e:	29 2f       	mov	r18, r25
     410:	09 2e       	mov	r0, r25
     412:	00 0c       	add	r0, r0
     414:	33 0b       	sbc	r19, r19
     416:	2f 5f       	subi	r18, 0xFF	; 255
     418:	3f 4f       	sbci	r19, 0xFF	; 255
     41a:	24 17       	cp	r18, r20
     41c:	35 07       	cpc	r19, r21
     41e:	34 f7       	brge	.-52     	; 0x3ec <redraw_base+0x2e>
		if (x >= 0 && x < FIELD_WIDTH) {
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
     420:	67 e0       	ldi	r22, 0x07	; 7
     422:	69 1b       	sub	r22, r25
     424:	41 2f       	mov	r20, r17
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 0b 06 	call	0xc16	; 0xc16 <ledmatrix_update_pixel>
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	1f 91       	pop	r17
     432:	08 95       	ret

00000434 <redraw_asteroid>:
}


static void redraw_asteroid(uint8_t asteroidNumber, uint8_t colour) {
	uint8_t asteroidPosn;
	if(asteroidNumber < numAsteroids) {
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	20 91 67 01 	lds	r18, 0x0167	; 0x800167 <numAsteroids>
     43a:	02 2e       	mov	r0, r18
     43c:	00 0c       	add	r0, r0
     43e:	33 0b       	sbc	r19, r19
     440:	82 17       	cp	r24, r18
     442:	93 07       	cpc	r25, r19
     444:	6c f4       	brge	.+26     	; 0x460 <redraw_asteroid+0x2c>
     446:	46 2f       	mov	r20, r22
		asteroidPosn = asteroids[asteroidNumber];
     448:	fc 01       	movw	r30, r24
     44a:	e3 59       	subi	r30, 0x93	; 147
     44c:	fe 4f       	sbci	r31, 0xFE	; 254
     44e:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(asteroidPosn), colour);
     450:	98 2f       	mov	r25, r24
     452:	92 95       	swap	r25
     454:	9f 70       	andi	r25, 0x0F	; 15
     456:	67 e0       	ldi	r22, 0x07	; 7
     458:	69 1b       	sub	r22, r25
     45a:	8f 70       	andi	r24, 0x0F	; 15
     45c:	0e 94 0b 06 	call	0xc16	; 0xc16 <ledmatrix_update_pixel>
     460:	08 95       	ret

00000462 <remove_asteroid>:
}

/* Remove asteroid with the given index number (from 0 to
** numAsteroids - 1).
*/
static void remove_asteroid(int8_t asteroidNumber) {
     462:	cf 93       	push	r28
	if(asteroidNumber < 0 || asteroidNumber >= numAsteroids) {
     464:	88 23       	and	r24, r24
     466:	0c f1       	brlt	.+66     	; 0x4aa <remove_asteroid+0x48>
     468:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <numAsteroids>
     46c:	89 17       	cp	r24, r25
     46e:	ec f4       	brge	.+58     	; 0x4aa <remove_asteroid+0x48>
     470:	c8 2f       	mov	r28, r24
		// Invalid index - do nothing
		return;
	}
	
	// Remove the asteroid from the display
	redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
	
	if(asteroidNumber < numAsteroids - 1) {
     478:	8c 2f       	mov	r24, r28
     47a:	cc 0f       	add	r28, r28
     47c:	99 0b       	sbc	r25, r25
     47e:	40 91 67 01 	lds	r20, 0x0167	; 0x800167 <numAsteroids>
     482:	24 2f       	mov	r18, r20
     484:	04 2e       	mov	r0, r20
     486:	00 0c       	add	r0, r0
     488:	33 0b       	sbc	r19, r19
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	31 09       	sbc	r19, r1
     48e:	82 17       	cp	r24, r18
     490:	93 07       	cpc	r25, r19
     492:	44 f4       	brge	.+16     	; 0x4a4 <remove_asteroid+0x42>
		// Asteroid is not the last one in the list
		// - move the last one in the list to this position
		asteroids[asteroidNumber] = asteroids[numAsteroids - 1];
     494:	f9 01       	movw	r30, r18
     496:	e3 59       	subi	r30, 0x93	; 147
     498:	fe 4f       	sbci	r31, 0xFE	; 254
     49a:	20 81       	ld	r18, Z
     49c:	fc 01       	movw	r30, r24
     49e:	e3 59       	subi	r30, 0x93	; 147
     4a0:	fe 4f       	sbci	r31, 0xFE	; 254
     4a2:	20 83       	st	Z, r18
	}
	// Last position in asteroids array is no longer used
	numAsteroids--;
     4a4:	41 50       	subi	r20, 0x01	; 1
     4a6:	40 93 67 01 	sts	0x0167, r20	; 0x800167 <numAsteroids>
}
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <redraw_projectile>:

static void redraw_projectile(uint8_t projectileNumber, uint8_t colour) {
	uint8_t projectilePosn;
	
	// Check projectileNumber is valid - ignore otherwise
	if(projectileNumber < numProjectiles) {
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <numProjectiles>
     4b4:	02 2e       	mov	r0, r18
     4b6:	00 0c       	add	r0, r0
     4b8:	33 0b       	sbc	r19, r19
     4ba:	82 17       	cp	r24, r18
     4bc:	93 07       	cpc	r25, r19
     4be:	6c f4       	brge	.+26     	; 0x4da <redraw_projectile+0x2c>
     4c0:	46 2f       	mov	r20, r22
		projectilePosn = projectiles[projectileNumber];
     4c2:	fc 01       	movw	r30, r24
     4c4:	e8 59       	subi	r30, 0x98	; 152
     4c6:	fe 4f       	sbci	r31, 0xFE	; 254
     4c8:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(projectilePosn), colour);
     4ca:	98 2f       	mov	r25, r24
     4cc:	92 95       	swap	r25
     4ce:	9f 70       	andi	r25, 0x0F	; 15
     4d0:	67 e0       	ldi	r22, 0x07	; 7
     4d2:	69 1b       	sub	r22, r25
     4d4:	8f 70       	andi	r24, 0x0F	; 15
     4d6:	0e 94 0b 06 	call	0xc16	; 0xc16 <ledmatrix_update_pixel>
     4da:	08 95       	ret

000004dc <remove_projectile>:
}


// Remove projectile with the given projectile number (from 0 to
// numProjectiles - 1).
static void remove_projectile(int8_t projectileNumber) {	
     4dc:	cf 93       	push	r28
	if(projectileNumber < 0 || projectileNumber >= numProjectiles) {
     4de:	88 23       	and	r24, r24
     4e0:	24 f1       	brlt	.+72     	; 0x52a <remove_projectile+0x4e>
     4e2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <numProjectiles>
     4e6:	89 17       	cp	r24, r25
     4e8:	04 f5       	brge	.+64     	; 0x52a <remove_projectile+0x4e>
     4ea:	c8 2f       	mov	r28, r24
		// Invalid index - do nothing 
		return;
	}
	
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	8c 0f       	add	r24, r28
     4f6:	28 2f       	mov	r18, r24
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <numProjectiles>
     4fe:	46 2f       	mov	r20, r22
     500:	06 2e       	mov	r0, r22
     502:	00 0c       	add	r0, r0
     504:	55 0b       	sbc	r21, r21
     506:	24 17       	cp	r18, r20
     508:	35 07       	cpc	r19, r21
     50a:	64 f4       	brge	.+24     	; 0x524 <remove_projectile+0x48>
		projectiles[i-1] = projectiles[i];
     50c:	f9 01       	movw	r30, r18
     50e:	e8 59       	subi	r30, 0x98	; 152
     510:	fe 4f       	sbci	r31, 0xFE	; 254
     512:	90 81       	ld	r25, Z
     514:	31 97       	sbiw	r30, 0x01	; 1
     516:	90 83       	st	Z, r25
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     518:	8f 5f       	subi	r24, 0xFF	; 255
     51a:	28 2f       	mov	r18, r24
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	24 17       	cp	r18, r20
     520:	35 07       	cpc	r19, r21
     522:	a4 f3       	brlt	.-24     	; 0x50c <remove_projectile+0x30>
		projectiles[i-1] = projectiles[i];
	}
	// Update projectile count - have one fewer projectiles now.
	numProjectiles--;
     524:	61 50       	subi	r22, 0x01	; 1
     526:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <numProjectiles>
}
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <redraw_hit_base>:
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
}


static void redraw_hit_base(void) {
     52e:	4f 92       	push	r4
     530:	5f 92       	push	r5
     532:	6f 92       	push	r6
     534:	7f 92       	push	r7
     536:	8f 92       	push	r8
     538:	9f 92       	push	r9
     53a:	af 92       	push	r10
     53c:	bf 92       	push	r11
     53e:	cf 92       	push	r12
     540:	df 92       	push	r13
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
	// Write a new timer function to handle this, if you don't want to use sound.
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
     546:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <get_current_time>
	uint32_t current_time = start_time;
	uint32_t flicker_time = start_time;
     54a:	4b 01       	movw	r8, r22
     54c:	5c 01       	movw	r10, r24

static void redraw_hit_base(void) {
	// Write a new timer function to handle this, if you don't want to use sound.
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
	uint32_t current_time = start_time;
     54e:	6b 01       	movw	r12, r22
     550:	7c 01       	movw	r14, r24
	uint32_t flicker_time = start_time;
	while(current_time < start_time + 2000) {
     552:	2b 01       	movw	r4, r22
     554:	3c 01       	movw	r6, r24
     556:	20 ed       	ldi	r18, 0xD0	; 208
     558:	42 0e       	add	r4, r18
     55a:	27 e0       	ldi	r18, 0x07	; 7
     55c:	52 1e       	adc	r5, r18
     55e:	61 1c       	adc	r6, r1
     560:	71 1c       	adc	r7, r1
     562:	22 c0       	rjmp	.+68     	; 0x5a8 <redraw_hit_base+0x7a>
		current_time = get_current_time();
     564:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <get_current_time>
     568:	6b 01       	movw	r12, r22
     56a:	7c 01       	movw	r14, r24
		if (current_time >= flicker_time + 500) {
     56c:	d5 01       	movw	r26, r10
     56e:	c4 01       	movw	r24, r8
     570:	8c 50       	subi	r24, 0x0C	; 12
     572:	9e 4f       	sbci	r25, 0xFE	; 254
     574:	af 4f       	sbci	r26, 0xFF	; 255
     576:	bf 4f       	sbci	r27, 0xFF	; 255
     578:	c8 16       	cp	r12, r24
     57a:	d9 06       	cpc	r13, r25
     57c:	ea 06       	cpc	r14, r26
     57e:	fb 06       	cpc	r15, r27
     580:	18 f0       	brcs	.+6      	; 0x588 <redraw_hit_base+0x5a>
			redraw_base(COLOUR_BASE);
     582:	8f ed       	ldi	r24, 0xDF	; 223
     584:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
		} 
		if (current_time >= flicker_time + 1000) {
     588:	d5 01       	movw	r26, r10
     58a:	c4 01       	movw	r24, r8
     58c:	88 51       	subi	r24, 0x18	; 24
     58e:	9c 4f       	sbci	r25, 0xFC	; 252
     590:	af 4f       	sbci	r26, 0xFF	; 255
     592:	bf 4f       	sbci	r27, 0xFF	; 255
     594:	c8 16       	cp	r12, r24
     596:	d9 06       	cpc	r13, r25
     598:	ea 06       	cpc	r14, r26
     59a:	fb 06       	cpc	r15, r27
     59c:	28 f0       	brcs	.+10     	; 0x5a8 <redraw_hit_base+0x7a>
			redraw_base(COLOUR_BLACK);
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
			flicker_time = current_time;
     5a4:	46 01       	movw	r8, r12
     5a6:	57 01       	movw	r10, r14
	// Write a new timer function to handle this, if you don't want to use sound.
	// Have the game pause and the base flicker when it is hit
	uint32_t start_time = get_current_time();
	uint32_t current_time = start_time;
	uint32_t flicker_time = start_time;
	while(current_time < start_time + 2000) {
     5a8:	c4 14       	cp	r12, r4
     5aa:	d5 04       	cpc	r13, r5
     5ac:	e6 04       	cpc	r14, r6
     5ae:	f7 04       	cpc	r15, r7
     5b0:	c8 f2       	brcs	.-78     	; 0x564 <redraw_hit_base+0x36>
		if (current_time >= flicker_time + 1000) {
			redraw_base(COLOUR_BLACK);
			flicker_time = current_time;
		}
	}
	redraw_base(COLOUR_BASE);
     5b2:	8f ed       	ldi	r24, 0xDF	; 223
     5b4:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
}
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	bf 90       	pop	r11
     5c2:	af 90       	pop	r10
     5c4:	9f 90       	pop	r9
     5c6:	8f 90       	pop	r8
     5c8:	7f 90       	pop	r7
     5ca:	6f 90       	pop	r6
     5cc:	5f 90       	pop	r5
     5ce:	4f 90       	pop	r4
     5d0:	08 95       	ret

000005d2 <handle_collision>:
	} 
}

// Remove the projectile and asteroid when they collide. Incrementing score.
// Sound effects can be handled here as well.
static void handle_collision(int8_t asteroidIndex, int8_t projectileIndex) {
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	c8 2f       	mov	r28, r24
     5da:	86 2f       	mov	r24, r22
	// Remove the collided particles.
	remove_projectile(projectileIndex);
     5dc:	0e 94 6e 02 	call	0x4dc	; 0x4dc <remove_projectile>
	remove_asteroid(asteroidIndex);
     5e0:	8c 2f       	mov	r24, r28
     5e2:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		// Generate random x position - somewhere from 0
		// to FIELD_WIDTH - 1
		x = (uint8_t)(random() % FIELD_WIDTH);
		// Generate random y position - somewhere from
		// FIELD_HEIGHT - 1 to FIELD_HEIGHT - 2
		y = (uint8_t)(FIELD_HEIGHT - 1 - (random() % 2));
     5e6:	df e0       	ldi	r29, 0x0F	; 15
	// Generate random position that does not already
	// have an asteroid.
	do {
		// Generate random x position - somewhere from 0
		// to FIELD_WIDTH - 1
		x = (uint8_t)(random() % FIELD_WIDTH);
     5e8:	0e 94 b4 0c 	call	0x1968	; 0x1968 <random>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	87 70       	andi	r24, 0x07	; 7
     5f2:	99 27       	eor	r25, r25
     5f4:	aa 27       	eor	r26, r26
     5f6:	b0 78       	andi	r27, 0x80	; 128
     5f8:	bb 23       	and	r27, r27
     5fa:	54 f4       	brge	.+20     	; 0x610 <handle_collision+0x3e>
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	a1 09       	sbc	r26, r1
     600:	b1 09       	sbc	r27, r1
     602:	88 6f       	ori	r24, 0xF8	; 248
     604:	9f 6f       	ori	r25, 0xFF	; 255
     606:	af 6f       	ori	r26, 0xFF	; 255
     608:	bf 6f       	ori	r27, 0xFF	; 255
     60a:	01 96       	adiw	r24, 0x01	; 1
     60c:	a1 1d       	adc	r26, r1
     60e:	b1 1d       	adc	r27, r1
     610:	c8 2f       	mov	r28, r24
		// Generate random y position - somewhere from
		// FIELD_HEIGHT - 1 to FIELD_HEIGHT - 2
		y = (uint8_t)(FIELD_HEIGHT - 1 - (random() % 2));
     612:	0e 94 b4 0c 	call	0x1968	; 0x1968 <random>
     616:	dc 01       	movw	r26, r24
     618:	cb 01       	movw	r24, r22
     61a:	81 70       	andi	r24, 0x01	; 1
     61c:	99 27       	eor	r25, r25
     61e:	aa 27       	eor	r26, r26
     620:	b0 78       	andi	r27, 0x80	; 128
     622:	bb 23       	and	r27, r27
     624:	54 f4       	brge	.+20     	; 0x63a <handle_collision+0x68>
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	a1 09       	sbc	r26, r1
     62a:	b1 09       	sbc	r27, r1
     62c:	8e 6f       	ori	r24, 0xFE	; 254
     62e:	9f 6f       	ori	r25, 0xFF	; 255
     630:	af 6f       	ori	r26, 0xFF	; 255
     632:	bf 6f       	ori	r27, 0xFF	; 255
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	a1 1d       	adc	r26, r1
     638:	b1 1d       	adc	r27, r1
     63a:	1d 2f       	mov	r17, r29
     63c:	18 1b       	sub	r17, r24
	} while(asteroid_at(x,y) != -1);
     63e:	61 2f       	mov	r22, r17
     640:	8c 2f       	mov	r24, r28
     642:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     646:	8f 3f       	cpi	r24, 0xFF	; 255
     648:	79 f6       	brne	.-98     	; 0x5e8 <handle_collision+0x16>
	// If we get here, we've now found an x,y location without
	// an existing asteroid - record the position
	asteroids[numAsteroids] = GAME_POSITION(x,y);
     64a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <numAsteroids>
     64e:	e8 2f       	mov	r30, r24
     650:	08 2e       	mov	r0, r24
     652:	00 0c       	add	r0, r0
     654:	ff 0b       	sbc	r31, r31
     656:	e3 59       	subi	r30, 0x93	; 147
     658:	fe 4f       	sbci	r31, 0xFE	; 254
     65a:	90 e1       	ldi	r25, 0x10	; 16
     65c:	c9 9f       	mul	r28, r25
     65e:	b0 01       	movw	r22, r0
     660:	11 24       	eor	r1, r1
     662:	1f 70       	andi	r17, 0x0F	; 15
     664:	61 2b       	or	r22, r17
     666:	60 83       	st	Z, r22
	numAsteroids++;
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	98 0f       	add	r25, r24
     66c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <numAsteroids>
	
	// Add the asteroid to the display
	redraw_asteroid(numAsteroids - 1, COLOUR_ASTEROID);
     670:	60 ef       	ldi	r22, 0xF0	; 240
     672:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
	// Remove the collided particles.
	remove_projectile(projectileIndex);
	remove_asteroid(asteroidIndex);
	add_asteroid();
	// Add one to the score
	add_to_score(1);
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 8c 08 	call	0x1118	; 0x1118 <add_to_score>
	// Output the score to the console - Potential to handle this in project.c
	move_cursor(2,4);
     67e:	64 e0       	ldi	r22, 0x04	; 4
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 a6 0b 	call	0x174c	; 0x174c <move_cursor>
	printf_P(PSTR("Score: %lu"), get_score());
     68a:	0e 94 a1 08 	call	0x1142	; 0x1142 <get_score>
     68e:	9f 93       	push	r25
     690:	8f 93       	push	r24
     692:	7f 93       	push	r23
     694:	6f 93       	push	r22
     696:	8a e9       	ldi	r24, 0x9A	; 154
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
}
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	08 95       	ret

000006b6 <initialise_game>:
 
// Initialise game field:
// (1) base starts in the centre (x=3)
// (2) no projectiles initially
// (3) the maximum number of asteroids, randomly distributed.
void initialise_game(void) {
     6b6:	4f 92       	push	r4
     6b8:	5f 92       	push	r5
     6ba:	6f 92       	push	r6
     6bc:	7f 92       	push	r7
     6be:	af 92       	push	r10
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
	uint8_t x, y, i;
	
    basePosition = 3;
     6d2:	83 e0       	ldi	r24, 0x03	; 3
     6d4:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <basePosition>
	numProjectiles = 0;
     6d8:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <numProjectiles>
	numAsteroids = 0;
     6dc:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <numAsteroids>
     6e0:	0d e6       	ldi	r16, 0x6D	; 109
     6e2:	11 e0       	ldi	r17, 0x01	; 1
     6e4:	0f 2e       	mov	r0, r31
     6e6:	f1 e8       	ldi	r31, 0x81	; 129
     6e8:	af 2e       	mov	r10, r31
     6ea:	f1 e0       	ldi	r31, 0x01	; 1
     6ec:	bf 2e       	mov	r11, r31
     6ee:	f0 2d       	mov	r31, r0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     6f0:	0f 2e       	mov	r0, r31
     6f2:	fd e0       	ldi	r31, 0x0D	; 13
     6f4:	4f 2e       	mov	r4, r31
     6f6:	51 2c       	mov	r5, r1
     6f8:	61 2c       	mov	r6, r1
     6fa:	71 2c       	mov	r7, r1
     6fc:	f0 2d       	mov	r31, r0
		// Generate random position that does not already
		// have an asteroid.
		do {
			// Generate random x position - somewhere from 0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
     6fe:	0e 94 b4 0c 	call	0x1968	; 0x1968 <random>
     702:	6b 01       	movw	r12, r22
     704:	7c 01       	movw	r14, r24
     706:	27 e0       	ldi	r18, 0x07	; 7
     708:	c2 22       	and	r12, r18
     70a:	dd 24       	eor	r13, r13
     70c:	ee 24       	eor	r14, r14
     70e:	20 e8       	ldi	r18, 0x80	; 128
     710:	f2 22       	and	r15, r18
     712:	ff 20       	and	r15, r15
     714:	84 f4       	brge	.+32     	; 0x736 <initialise_game+0x80>
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	c8 1a       	sub	r12, r24
     71a:	d1 08       	sbc	r13, r1
     71c:	e1 08       	sbc	r14, r1
     71e:	f1 08       	sbc	r15, r1
     720:	e8 ef       	ldi	r30, 0xF8	; 248
     722:	ce 2a       	or	r12, r30
     724:	dd 24       	eor	r13, r13
     726:	da 94       	dec	r13
     728:	ed 2c       	mov	r14, r13
     72a:	fe 2c       	mov	r15, r14
     72c:	ff ef       	ldi	r31, 0xFF	; 255
     72e:	cf 1a       	sub	r12, r31
     730:	df 0a       	sbc	r13, r31
     732:	ef 0a       	sbc	r14, r31
     734:	ff 0a       	sbc	r15, r31
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     736:	0e 94 b4 0c 	call	0x1968	; 0x1968 <random>
     73a:	a3 01       	movw	r20, r6
     73c:	92 01       	movw	r18, r4
     73e:	0e 94 19 0c 	call	0x1832	; 0x1832 <__divmodsi4>
     742:	c3 e0       	ldi	r28, 0x03	; 3
     744:	c6 0f       	add	r28, r22
		} while(asteroid_at(x,y) != -1);
     746:	6c 2f       	mov	r22, r28
     748:	8c 2d       	mov	r24, r12
     74a:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     74e:	8f 3f       	cpi	r24, 0xFF	; 255
     750:	b1 f6       	brne	.-84     	; 0x6fe <initialise_game+0x48>
		// If we get here, we've now found an x,y location without
		// an existing asteroid - record the position
		asteroids[i] = GAME_POSITION(x,y);
     752:	20 e1       	ldi	r18, 0x10	; 16
     754:	c2 9e       	mul	r12, r18
     756:	b0 01       	movw	r22, r0
     758:	11 24       	eor	r1, r1
     75a:	cf 70       	andi	r28, 0x0F	; 15
     75c:	c6 2b       	or	r28, r22
     75e:	f8 01       	movw	r30, r16
     760:	c1 93       	st	Z+, r28
     762:	8f 01       	movw	r16, r30
		numAsteroids++;
     764:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <numAsteroids>
     768:	8f 5f       	subi	r24, 0xFF	; 255
     76a:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <numAsteroids>
	
    basePosition = 3;
	numProjectiles = 0;
	numAsteroids = 0;

	for(i=0; i < MAX_ASTEROIDS ; i++) {
     76e:	ea 15       	cp	r30, r10
     770:	fb 05       	cpc	r31, r11
     772:	29 f6       	brne	.-118    	; 0x6fe <initialise_game+0x48>

// Redraw the whole display - base, asteroids and projectiles.
// We assume all of the data structures have been appropriately populated
static void redraw_whole_display(void) {
	// clear the display
	ledmatrix_clear();
     774:	0e 94 55 06 	call	0xcaa	; 0xcaa <ledmatrix_clear>
	
	// Redraw each of the elements
	redraw_base(COLOUR_BASE);
     778:	8f ed       	ldi	r24, 0xDF	; 223
     77a:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
}


static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     77e:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <numAsteroids>
     782:	18 16       	cp	r1, r24
     784:	84 f4       	brge	.+32     	; 0x7a6 <initialise_game+0xf0>
     786:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_asteroid(i, COLOUR_ASTEROID);
     788:	60 ef       	ldi	r22, 0xF0	; 240
     78a:	8c 2f       	mov	r24, r28
     78c:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
}


static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     790:	cf 5f       	subi	r28, 0xFF	; 255
     792:	2c 2f       	mov	r18, r28
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <numAsteroids>
     79a:	08 2e       	mov	r0, r24
     79c:	00 0c       	add	r0, r0
     79e:	99 0b       	sbc	r25, r25
     7a0:	28 17       	cp	r18, r24
     7a2:	39 07       	cpc	r19, r25
     7a4:	8c f3       	brlt	.-30     	; 0x788 <initialise_game+0xd2>
}


static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     7a6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <numProjectiles>
     7aa:	18 16       	cp	r1, r24
     7ac:	84 f4       	brge	.+32     	; 0x7ce <initialise_game+0x118>
     7ae:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_projectile(i, COLOUR_PROJECTILE);
     7b0:	6f e0       	ldi	r22, 0x0F	; 15
     7b2:	8c 2f       	mov	r24, r28
     7b4:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
}


static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     7b8:	cf 5f       	subi	r28, 0xFF	; 255
     7ba:	2c 2f       	mov	r18, r28
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <numProjectiles>
     7c2:	08 2e       	mov	r0, r24
     7c4:	00 0c       	add	r0, r0
     7c6:	99 0b       	sbc	r25, r25
     7c8:	28 17       	cp	r18, r24
     7ca:	39 07       	cpc	r19, r25
     7cc:	8c f3       	brlt	.-30     	; 0x7b0 <initialise_game+0xfa>
		asteroids[i] = GAME_POSITION(x,y);
		numAsteroids++;
	}
	
	redraw_whole_display();
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	df 90       	pop	r13
     7dc:	cf 90       	pop	r12
     7de:	bf 90       	pop	r11
     7e0:	af 90       	pop	r10
     7e2:	7f 90       	pop	r7
     7e4:	6f 90       	pop	r6
     7e6:	5f 90       	pop	r5
     7e8:	4f 90       	pop	r4
     7ea:	08 95       	ret

000007ec <fire_projectile>:
// Fire projectile - add it immediately above the base
// station, provided there is not already a projectile
// there. We are also limited in the number of projectiles
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
     7ec:	cf 93       	push	r28
	uint8_t newProjectileNumber;
	uint8_t asteroidLocation;
	if(numProjectiles < MAX_PROJECTILES && 
     7ee:	c0 91 6c 01 	lds	r28, 0x016C	; 0x80016c <numProjectiles>
     7f2:	c4 30       	cpi	r28, 0x04	; 4
     7f4:	0c f0       	brlt	.+2      	; 0x7f8 <fire_projectile+0xc>
     7f6:	43 c0       	rjmp	.+134    	; 0x87e <fire_projectile+0x92>
			projectile_at(basePosition, 2) == -1) {
     7f8:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <basePosition>
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     7fc:	90 e1       	ldi	r25, 0x10	; 16
     7fe:	89 9f       	mul	r24, r25
     800:	90 01       	movw	r18, r0
     802:	11 24       	eor	r1, r1
     804:	42 2f       	mov	r20, r18
     806:	42 60       	ori	r20, 0x02	; 2
	for(i=0; i < numProjectiles; i++) {
     808:	6c 2f       	mov	r22, r28
     80a:	0c 2e       	mov	r0, r28
     80c:	00 0c       	add	r0, r0
     80e:	77 0b       	sbc	r23, r23
     810:	16 16       	cp	r1, r22
     812:	17 06       	cpc	r1, r23
     814:	b4 f4       	brge	.+44     	; 0x842 <fire_projectile+0x56>
		if(projectiles[i] == positionToCheck) {
     816:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <projectiles>
     81a:	94 17       	cp	r25, r20
     81c:	91 f1       	breq	.+100    	; 0x882 <fire_projectile+0x96>
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0a c0       	rjmp	.+20     	; 0x836 <fire_projectile+0x4a>
     822:	f9 01       	movw	r30, r18
     824:	e8 59       	subi	r30, 0x98	; 152
     826:	fe 4f       	sbci	r31, 0xFE	; 254
     828:	20 81       	ld	r18, Z
     82a:	42 13       	cpse	r20, r18
     82c:	04 c0       	rjmp	.+8      	; 0x836 <fire_projectile+0x4a>
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
	uint8_t newProjectileNumber;
	uint8_t asteroidLocation;
	if(numProjectiles < MAX_PROJECTILES && 
     82e:	9f 3f       	cpi	r25, 0xFF	; 255
     830:	41 f0       	breq	.+16     	; 0x842 <fire_projectile+0x56>
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		}
		return 1;
	} else {
		return 0;
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	27 c0       	rjmp	.+78     	; 0x884 <fire_projectile+0x98>
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     836:	9f 5f       	subi	r25, 0xFF	; 255
     838:	29 2f       	mov	r18, r25
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	26 17       	cp	r18, r22
     83e:	37 07       	cpc	r19, r23
     840:	84 f3       	brlt	.-32     	; 0x822 <fire_projectile+0x36>
	uint8_t asteroidLocation;
	if(numProjectiles < MAX_PROJECTILES && 
			projectile_at(basePosition, 2) == -1) {
		// Have space to add projectile - add it at the x position of
		// the base, in row 2(y=2)
		newProjectileNumber = numProjectiles++;
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	9c 0f       	add	r25, r28
     846:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <numProjectiles>
		projectiles[newProjectileNumber] = GAME_POSITION(basePosition, 2);
     84a:	ec 2f       	mov	r30, r28
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	e8 59       	subi	r30, 0x98	; 152
     850:	fe 4f       	sbci	r31, 0xFE	; 254
     852:	90 e1       	ldi	r25, 0x10	; 16
     854:	89 02       	muls	r24, r25
     856:	90 01       	movw	r18, r0
     858:	11 24       	eor	r1, r1
     85a:	22 60       	ori	r18, 0x02	; 2
     85c:	20 83       	st	Z, r18
		asteroidLocation = asteroid_at(basePosition, 2);
     85e:	62 e0       	ldi	r22, 0x02	; 2
     860:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
		// Check if the projectile immediately hits an asteroid.
		if (asteroid_at(basePosition, 2) != -1) {
     864:	8f 3f       	cpi	r24, 0xFF	; 255
     866:	29 f0       	breq	.+10     	; 0x872 <fire_projectile+0x86>
			handle_collision(asteroidLocation, newProjectileNumber);
     868:	6c 2f       	mov	r22, r28
     86a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <handle_collision>
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		}
		return 1;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	09 c0       	rjmp	.+18     	; 0x884 <fire_projectile+0x98>
		asteroidLocation = asteroid_at(basePosition, 2);
		// Check if the projectile immediately hits an asteroid.
		if (asteroid_at(basePosition, 2) != -1) {
			handle_collision(asteroidLocation, newProjectileNumber);
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
     872:	6f e0       	ldi	r22, 0x0F	; 15
     874:	8c 2f       	mov	r24, r28
     876:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
		}
		return 1;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	03 c0       	rjmp	.+6      	; 0x884 <fire_projectile+0x98>
	} else {
		return 0;
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	01 c0       	rjmp	.+2      	; 0x884 <fire_projectile+0x98>
     882:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <advance_projectiles>:
}


// Move projectiles up by one position, and remove those that 
// have gone off the top or that hit an asteroid.
void advance_projectiles(void) {
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
	uint8_t x, y;
	int8_t projectileNumber;
	int8_t asteroid_location;

	projectileNumber = 0;
     892:	10 e0       	ldi	r17, 0x00	; 0
	while(projectileNumber < numProjectiles) {
     894:	31 c0       	rjmp	.+98     	; 0x8f8 <advance_projectiles+0x70>
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     896:	e1 2e       	mov	r14, r17
     898:	01 2e       	mov	r0, r17
     89a:	00 0c       	add	r0, r0
     89c:	ff 08       	sbc	r15, r15
     89e:	f7 01       	movw	r30, r14
     8a0:	e8 59       	subi	r30, 0x98	; 152
     8a2:	fe 4f       	sbci	r31, 0xFE	; 254
     8a4:	80 81       	ld	r24, Z
		y = GET_Y_POSITION(projectiles[projectileNumber]);
     8a6:	c8 2f       	mov	r28, r24
     8a8:	cf 70       	andi	r28, 0x0F	; 15
		
		// Work out the new position (but don't update the projectile 
		// location yet - we only do that if we know the move is valid)
		y = y+1;
     8aa:	cf 5f       	subi	r28, 0xFF	; 255
		
		// Check if new position would be off the top of the display
		if(y == FIELD_HEIGHT) {
     8ac:	c0 31       	cpi	r28, 0x10	; 16
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <advance_projectiles+0x30>
			// Yes - remove the projectile. (Note that we haven't updated
			// the position of the projectile itself - so the projectile 
			// will be removed from its old location.)
			remove_projectile(projectileNumber);
     8b0:	81 2f       	mov	r24, r17
     8b2:	0e 94 6e 02 	call	0x4dc	; 0x4dc <remove_projectile>
     8b6:	20 c0       	rjmp	.+64     	; 0x8f8 <advance_projectiles+0x70>
	int8_t asteroid_location;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     8b8:	d8 2f       	mov	r29, r24
     8ba:	d2 95       	swap	r29
     8bc:	df 70       	andi	r29, 0x0F	; 15
		} else {
			// Projectile is not going off the top of the display
			// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
			// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
			// AND THE ASTEROID.
			asteroid_location = asteroid_at(x, y);
     8be:	6c 2f       	mov	r22, r28
     8c0:	8d 2f       	mov	r24, r29
     8c2:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
			if (asteroid_location != -1) {
     8c6:	8f 3f       	cpi	r24, 0xFF	; 255
     8c8:	21 f0       	breq	.+8      	; 0x8d2 <advance_projectiles+0x4a>
				handle_collision(asteroid_location, projectileNumber);
     8ca:	61 2f       	mov	r22, r17
     8cc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <handle_collision>
     8d0:	13 c0       	rjmp	.+38     	; 0x8f8 <advance_projectiles+0x70>
			} else {	
				// Remove the projectile from the display 
				redraw_projectile(projectileNumber, COLOUR_BLACK);
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	81 2f       	mov	r24, r17
     8d6:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
			
				// Update the projectile's position
				projectiles[projectileNumber] = GAME_POSITION(x,y);
     8da:	f7 01       	movw	r30, r14
     8dc:	e8 59       	subi	r30, 0x98	; 152
     8de:	fe 4f       	sbci	r31, 0xFE	; 254
     8e0:	20 e1       	ldi	r18, 0x10	; 16
     8e2:	d2 9f       	mul	r29, r18
     8e4:	c0 01       	movw	r24, r0
     8e6:	11 24       	eor	r1, r1
     8e8:	cf 70       	andi	r28, 0x0F	; 15
     8ea:	c8 2b       	or	r28, r24
     8ec:	c0 83       	st	Z, r28
			
				// Redraw the projectile
				redraw_projectile(projectileNumber, COLOUR_PROJECTILE);
     8ee:	6f e0       	ldi	r22, 0x0F	; 15
     8f0:	81 2f       	mov	r24, r17
     8f2:	0e 94 57 02 	call	0x4ae	; 0x4ae <redraw_projectile>
			
				// Move on to the next projectile (we don't do this if a projectile
				// is removed since projectiles will be shuffled in the list and the
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
     8f6:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t x, y;
	int8_t projectileNumber;
	int8_t asteroid_location;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
     8f8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <numProjectiles>
     8fc:	18 17       	cp	r17, r24
     8fe:	5c f2       	brlt	.-106    	; 0x896 <advance_projectiles+0xe>
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
			}
		}			
	}
}
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	08 95       	ret

0000090c <is_game_over>:


// Returns 1 if the game is over, 0 otherwise.
int8_t is_game_over(void) {
	return (get_lives() == 0);
     90c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <get_lives>
     910:	21 e0       	ldi	r18, 0x01	; 1
     912:	67 2b       	or	r22, r23
     914:	68 2b       	or	r22, r24
     916:	69 2b       	or	r22, r25
     918:	09 f0       	breq	.+2      	; 0x91c <is_game_over+0x10>
     91a:	20 e0       	ldi	r18, 0x00	; 0
}
     91c:	82 2f       	mov	r24, r18
     91e:	08 95       	ret

00000920 <subtract_life>:


/******** INTERNAL FUNCTIONS ****************/

// Change the state of game over
void subtract_life() {
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
	if (get_lives() != 0) {
     92e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <get_lives>
     932:	67 2b       	or	r22, r23
     934:	68 2b       	or	r22, r24
     936:	69 2b       	or	r22, r25
     938:	21 f0       	breq	.+8      	; 0x942 <subtract_life+0x22>
		add_to_lives(-1);
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	9f ef       	ldi	r25, 0xFF	; 255
     93e:	0e 94 66 06 	call	0xccc	; 0xccc <add_to_lives>
	}
	// Reset the last seven bits.
	PORTC &= 1;
     942:	88 b1       	in	r24, 0x08	; 8
     944:	81 70       	andi	r24, 0x01	; 1
     946:	88 b9       	out	0x08, r24	; 8
	for (int8_t i = 0; i < get_lives(); i++) {
     948:	c0 e0       	ldi	r28, 0x00	; 0
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (4 + i));
     94a:	01 e0       	ldi	r16, 0x01	; 1
     94c:	10 e0       	ldi	r17, 0x00	; 0
	if (get_lives() != 0) {
		add_to_lives(-1);
	}
	// Reset the last seven bits.
	PORTC &= 1;
	for (int8_t i = 0; i < get_lives(); i++) {
     94e:	0d c0       	rjmp	.+26     	; 0x96a <subtract_life+0x4a>
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (4 + i));
     950:	28 b1       	in	r18, 0x08	; 8
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	8c 0f       	add	r24, r28
     956:	a8 01       	movw	r20, r16
     958:	02 c0       	rjmp	.+4      	; 0x95e <subtract_life+0x3e>
     95a:	44 0f       	add	r20, r20
     95c:	55 1f       	adc	r21, r21
     95e:	8a 95       	dec	r24
     960:	e2 f7       	brpl	.-8      	; 0x95a <subtract_life+0x3a>
     962:	ca 01       	movw	r24, r20
     964:	82 2b       	or	r24, r18
     966:	88 b9       	out	0x08, r24	; 8
     968:	cf 5f       	subi	r28, 0xFF	; 255
	if (get_lives() != 0) {
		add_to_lives(-1);
	}
	// Reset the last seven bits.
	PORTC &= 1;
	for (int8_t i = 0; i < get_lives(); i++) {
     96a:	0e 94 7f 06 	call	0xcfe	; 0xcfe <get_lives>
     96e:	cc 2e       	mov	r12, r28
     970:	0c 2e       	mov	r0, r28
     972:	00 0c       	add	r0, r0
     974:	dd 08       	sbc	r13, r13
     976:	ee 08       	sbc	r14, r14
     978:	ff 08       	sbc	r15, r15
     97a:	c6 16       	cp	r12, r22
     97c:	d7 06       	cpc	r13, r23
     97e:	e8 06       	cpc	r14, r24
     980:	f9 06       	cpc	r15, r25
     982:	30 f3       	brcs	.-52     	; 0x950 <subtract_life+0x30>
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (4 + i));
	}
	move_cursor(2, 6);
     984:	66 e0       	ldi	r22, 0x06	; 6
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	82 e0       	ldi	r24, 0x02	; 2
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 a6 0b 	call	0x174c	; 0x174c <move_cursor>
	printf_P(PSTR("You have %lu lives remaining."), get_lives());
     990:	0e 94 7f 06 	call	0xcfe	; 0xcfe <get_lives>
     994:	9f 93       	push	r25
     996:	8f 93       	push	r24
     998:	7f 93       	push	r23
     99a:	6f 93       	push	r22
     99c:	8c e7       	ldi	r24, 0x7C	; 124
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
}
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	df 90       	pop	r13
     9c0:	cf 90       	pop	r12
     9c2:	08 95       	ret

000009c4 <move_base>:
// The direction argument has the value MOVE_LEFT or
// MOVE_RIGHT. The move succeeds if the base isn't all 
// the way to one side, e.g., not permitted to move
// left if basePosition is already 0.
// Returns 1 if move successful, 0 otherwise.
int8_t move_base(int8_t direction) {	
     9c4:	cf 93       	push	r28
     9c6:	c8 2f       	mov	r28, r24
	// (and eventually wrap around - e.g. subtracting 1 from
	// basePosition 256 times will eventually bring it back to
	// same value.
	
	// We erase the base from its current position first
	redraw_base(COLOUR_BLACK);
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
	
	if (direction == MOVE_LEFT) {
     9ce:	c1 11       	cpse	r28, r1
     9d0:	08 c0       	rjmp	.+16     	; 0x9e2 <move_base+0x1e>
		// Check if the user wants to move left
		if (basePosition != 0) {
     9d2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <basePosition>
     9d6:	88 23       	and	r24, r24
     9d8:	59 f0       	breq	.+22     	; 0x9f0 <move_base+0x2c>
			// Check bounds -> move left.
			basePosition--;
     9da:	81 50       	subi	r24, 0x01	; 1
     9dc:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <basePosition>
     9e0:	07 c0       	rjmp	.+14     	; 0x9f0 <move_base+0x2c>
		}
	} else if (basePosition != 7){
     9e2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <basePosition>
     9e6:	87 30       	cpi	r24, 0x07	; 7
     9e8:	19 f0       	breq	.+6      	; 0x9f0 <move_base+0x2c>
		// Assume right press, check bounds -> move right.
		basePosition++;
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <basePosition>
	}
	
	// Check if the base is being moved into an asteroid. 
	// We don't need to check the middle as it is impossible to reach.
	if (asteroid_at(basePosition, 1) != -1 ||  asteroid_at(basePosition - 1, 0) != -1 
     9f0:	c0 91 81 01 	lds	r28, 0x0181	; 0x800181 <basePosition>
     9f4:	61 e0       	ldi	r22, 0x01	; 1
     9f6:	8c 2f       	mov	r24, r28
     9f8:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     9fc:	8f 3f       	cpi	r24, 0xFF	; 255
     9fe:	69 f4       	brne	.+26     	; 0xa1a <move_base+0x56>
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	8c 0f       	add	r24, r28
     a04:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     a08:	8f 3f       	cpi	r24, 0xFF	; 255
     a0a:	39 f4       	brne	.+14     	; 0xa1a <move_base+0x56>
	|| asteroid_at(basePosition + 1, 0) != -1) {
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	8c 0f       	add	r24, r28
     a12:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     a16:	8f 3f       	cpi	r24, 0xFF	; 255
     a18:	e1 f0       	breq	.+56     	; 0xa52 <move_base+0x8e>
		subtract_life();
     a1a:	0e 94 90 04 	call	0x920	; 0x920 <subtract_life>
		remove_asteroid(asteroid_at(basePosition + 1, 1));
     a1e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <basePosition>
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     a2a:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		remove_asteroid(asteroid_at(basePosition - 1, 0));
     a2e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <basePosition>
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	81 50       	subi	r24, 0x01	; 1
     a36:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     a3a:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		remove_asteroid(asteroid_at(basePosition + 1, 0));
     a3e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <basePosition>
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	8f 5f       	subi	r24, 0xFF	; 255
     a46:	0e 94 b7 01 	call	0x36e	; 0x36e <asteroid_at>
     a4a:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
		redraw_hit_base();
     a4e:	0e 94 97 02 	call	0x52e	; 0x52e <redraw_hit_base>
	}
	
	// Redraw the base
	redraw_base(COLOUR_BASE);
     a52:	8f ed       	ldi	r24, 0xDF	; 223
     a54:	0e 94 df 01 	call	0x3be	; 0x3be <redraw_base>
	
	return 1;
}
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	cf 91       	pop	r28
     a5c:	08 95       	ret

00000a5e <advance_asteroids>:
}


// Move asteroids down by one position, and remove those that
// have gone off the bottom or that hit a projectile.
void advance_asteroids(void) {
     a5e:	8f 92       	push	r8
     a60:	9f 92       	push	r9
     a62:	bf 92       	push	r11
     a64:	df 92       	push	r13
     a66:	ef 92       	push	r14
     a68:	ff 92       	push	r15
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
		uint8_t x, y;
		int8_t asteroidNumber;
		int8_t projectile_location;

		asteroidNumber = 0;
     a70:	b1 2c       	mov	r11, r1
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
		if(projectiles[i] == positionToCheck) {
     a72:	0f 2e       	mov	r0, r31
     a74:	f8 e6       	ldi	r31, 0x68	; 104
     a76:	8f 2e       	mov	r8, r31
     a78:	f1 e0       	ldi	r31, 0x01	; 1
     a7a:	9f 2e       	mov	r9, r31
     a7c:	f0 2d       	mov	r31, r0
		uint8_t x, y;
		int8_t asteroidNumber;
		int8_t projectile_location;

		asteroidNumber = 0;
		while(asteroidNumber < numAsteroids) {
     a7e:	60 c0       	rjmp	.+192    	; 0xb40 <advance_asteroids+0xe2>
			// Get the current position of the asteroid
			x = GET_X_POSITION(asteroids[asteroidNumber]);
     a80:	eb 2c       	mov	r14, r11
     a82:	0b 2c       	mov	r0, r11
     a84:	00 0c       	add	r0, r0
     a86:	ff 08       	sbc	r15, r15
     a88:	f7 01       	movw	r30, r14
     a8a:	e3 59       	subi	r30, 0x93	; 147
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	c0 81       	ld	r28, Z
			y = GET_Y_POSITION(asteroids[asteroidNumber]);
     a90:	8c 2f       	mov	r24, r28
     a92:	8f 70       	andi	r24, 0x0F	; 15
			
			// Work out the new position (but don't update the asteroid
			// location yet - we only do that if we know the move is valid)
			y = y - 1;
     a94:	1f ef       	ldi	r17, 0xFF	; 255
     a96:	18 0f       	add	r17, r24
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     a98:	c2 95       	swap	r28
     a9a:	cf 70       	andi	r28, 0x0F	; 15
     a9c:	d0 e0       	ldi	r29, 0x00	; 0
     a9e:	ce 01       	movw	r24, r28
     aa0:	82 95       	swap	r24
     aa2:	92 95       	swap	r25
     aa4:	90 7f       	andi	r25, 0xF0	; 240
     aa6:	98 27       	eor	r25, r24
     aa8:	80 7f       	andi	r24, 0xF0	; 240
     aaa:	98 27       	eor	r25, r24
     aac:	91 2f       	mov	r25, r17
     aae:	9f 70       	andi	r25, 0x0F	; 15
     ab0:	d9 2e       	mov	r13, r25
     ab2:	d8 2a       	or	r13, r24
	for(i=0; i < numProjectiles; i++) {
     ab4:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <numProjectiles>
     ab8:	02 2e       	mov	r0, r18
     aba:	00 0c       	add	r0, r0
     abc:	33 0b       	sbc	r19, r19
     abe:	12 16       	cp	r1, r18
     ac0:	13 06       	cpc	r1, r19
     ac2:	dc f4       	brge	.+54     	; 0xafa <advance_asteroids+0x9c>
		if(projectiles[i] == positionToCheck) {
     ac4:	f4 01       	movw	r30, r8
     ac6:	80 81       	ld	r24, Z
     ac8:	8d 15       	cp	r24, r13
     aca:	91 f0       	breq	.+36     	; 0xaf0 <advance_asteroids+0x92>
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <advance_asteroids+0x84>
     ad0:	fc 01       	movw	r30, r24
     ad2:	e8 59       	subi	r30, 0x98	; 152
     ad4:	fe 4f       	sbci	r31, 0xFE	; 254
     ad6:	80 81       	ld	r24, Z
     ad8:	d8 12       	cpse	r13, r24
     ada:	03 c0       	rjmp	.+6      	; 0xae2 <advance_asteroids+0x84>
				// Asteroid is not going off the bottom of the display
				// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
				// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
				// AND THE ASTEROID.
				projectile_location = projectile_at(x, y);
				if (projectile_location != -1) {
     adc:	6f 3f       	cpi	r22, 0xFF	; 255
     ade:	49 f4       	brne	.+18     	; 0xaf2 <advance_asteroids+0x94>
     ae0:	0c c0       	rjmp	.+24     	; 0xafa <advance_asteroids+0x9c>
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     ae2:	6f 5f       	subi	r22, 0xFF	; 255
     ae4:	86 2f       	mov	r24, r22
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	82 17       	cp	r24, r18
     aea:	93 07       	cpc	r25, r19
     aec:	8c f3       	brlt	.-30     	; 0xad0 <advance_asteroids+0x72>
     aee:	05 c0       	rjmp	.+10     	; 0xafa <advance_asteroids+0x9c>
		if(projectiles[i] == positionToCheck) {
			// Projectile i is at the given position
			return i;
     af0:	60 e0       	ldi	r22, 0x00	; 0
				// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
				// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
				// AND THE ASTEROID.
				projectile_location = projectile_at(x, y);
				if (projectile_location != -1) {
					handle_collision(asteroidNumber, projectile_location);
     af2:	8b 2d       	mov	r24, r11
     af4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <handle_collision>
     af8:	0d c0       	rjmp	.+26     	; 0xb14 <advance_asteroids+0xb6>
				} else {
					// Remove the asteroid from the display
					redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	8b 2d       	mov	r24, r11
     afe:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
					
					// Update the asteroid's position
					asteroids[asteroidNumber] = GAME_POSITION(x,y);
     b02:	f7 01       	movw	r30, r14
     b04:	e3 59       	subi	r30, 0x93	; 147
     b06:	fe 4f       	sbci	r31, 0xFE	; 254
     b08:	d0 82       	st	Z, r13
					
					// Redraw the asteroid
					redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     b0a:	60 ef       	ldi	r22, 0xF0	; 240
     b0c:	8b 2d       	mov	r24, r11
     b0e:	0e 94 1a 02 	call	0x434	; 0x434 <redraw_asteroid>
					
					// Move on to the next asteroid
					asteroidNumber++;
     b12:	b3 94       	inc	r11
}


// Check whether the base is at a given location.
static int8_t base_at(uint8_t x, uint8_t y) {
	if (y > 1) {
     b14:	12 30       	cpi	r17, 0x02	; 2
     b16:	a0 f4       	brcc	.+40     	; 0xb40 <advance_asteroids+0xe2>
		// This is too high for the base.
		return 0;
	}
	
	if (x == basePosition) {
     b18:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <basePosition>
     b1c:	08 2e       	mov	r0, r24
     b1e:	00 0c       	add	r0, r0
     b20:	99 0b       	sbc	r25, r25
     b22:	c8 17       	cp	r28, r24
     b24:	d9 07       	cpc	r29, r25
     b26:	91 f0       	breq	.+36     	; 0xb4c <advance_asteroids+0xee>
		// This can occur for both y = 1 and y = 0.
		return 1;
	} else if (y == 0) {
     b28:	11 11       	cpse	r17, r1
     b2a:	0a c0       	rjmp	.+20     	; 0xb40 <advance_asteroids+0xe2>
		// Check the sides of the base.
		if (x == basePosition -1 || x == basePosition + 1) {
     b2c:	9c 01       	movw	r18, r24
     b2e:	21 50       	subi	r18, 0x01	; 1
     b30:	31 09       	sbc	r19, r1
     b32:	c2 17       	cp	r28, r18
     b34:	d3 07       	cpc	r29, r19
     b36:	51 f0       	breq	.+20     	; 0xb4c <advance_asteroids+0xee>
     b38:	01 96       	adiw	r24, 0x01	; 1
     b3a:	c8 17       	cp	r28, r24
     b3c:	d9 07       	cpc	r29, r25
     b3e:	31 f0       	breq	.+12     	; 0xb4c <advance_asteroids+0xee>
		uint8_t x, y;
		int8_t asteroidNumber;
		int8_t projectile_location;

		asteroidNumber = 0;
		while(asteroidNumber < numAsteroids) {
     b40:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <numAsteroids>
     b44:	b8 16       	cp	r11, r24
     b46:	0c f4       	brge	.+2      	; 0xb4a <advance_asteroids+0xec>
     b48:	9b cf       	rjmp	.-202    	; 0xa80 <advance_asteroids+0x22>
     b4a:	08 c0       	rjmp	.+16     	; 0xb5c <advance_asteroids+0xfe>
					// Move on to the next asteroid
					asteroidNumber++;
				}
				// If the asteroid collides with the base, handle the event.
				if (base_at(x, y)) {
					subtract_life();
     b4c:	0e 94 90 04 	call	0x920	; 0x920 <subtract_life>
					remove_asteroid(asteroidNumber);
     b50:	8b 2d       	mov	r24, r11
     b52:	0e 94 31 02 	call	0x462	; 0x462 <remove_asteroid>
					redraw_hit_base();
     b56:	0e 94 97 02 	call	0x52e	; 0x52e <redraw_hit_base>
     b5a:	f2 cf       	rjmp	.-28     	; 0xb40 <advance_asteroids+0xe2>
				}
			}
		}
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	ff 90       	pop	r15
     b64:	ef 90       	pop	r14
     b66:	df 90       	pop	r13
     b68:	bf 90       	pop	r11
     b6a:	9f 90       	pop	r9
     b6c:	8f 90       	pop	r8
     b6e:	08 95       	ret

00000b70 <game_over_animation>:
	// Update projectile count - have one fewer projectiles now.
	numProjectiles--;
}


void game_over_animation(uint32_t current_time) {
     b70:	cf 92       	push	r12
     b72:	df 92       	push	r13
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	6b 01       	movw	r12, r22
     b7a:	7c 01       	movw	r14, r24
	static uint32_t previous_time;
	static uint8_t animation_number;
	if (current_time > previous_time + 100 && animation_number <= 16) {
     b7c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <previous_time.2386>
     b80:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <previous_time.2386+0x1>
     b84:	a0 91 59 01 	lds	r26, 0x0159	; 0x800159 <previous_time.2386+0x2>
     b88:	b0 91 5a 01 	lds	r27, 0x015A	; 0x80015a <previous_time.2386+0x3>
     b8c:	8c 59       	subi	r24, 0x9C	; 156
     b8e:	9f 4f       	sbci	r25, 0xFF	; 255
     b90:	af 4f       	sbci	r26, 0xFF	; 255
     b92:	bf 4f       	sbci	r27, 0xFF	; 255
     b94:	8c 15       	cp	r24, r12
     b96:	9d 05       	cpc	r25, r13
     b98:	ae 05       	cpc	r26, r14
     b9a:	bf 05       	cpc	r27, r15
     b9c:	78 f5       	brcc	.+94     	; 0xbfc <game_over_animation+0x8c>
     b9e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <animation_number.2387>
     ba2:	81 31       	cpi	r24, 0x11	; 17
     ba4:	40 f5       	brcc	.+80     	; 0xbf6 <game_over_animation+0x86>
		ledmatrix_shift_display_right();
     ba6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <ledmatrix_shift_display_right>
		previous_time = current_time;
     baa:	c0 92 57 01 	sts	0x0157, r12	; 0x800157 <previous_time.2386>
     bae:	d0 92 58 01 	sts	0x0158, r13	; 0x800158 <previous_time.2386+0x1>
     bb2:	e0 92 59 01 	sts	0x0159, r14	; 0x800159 <previous_time.2386+0x2>
     bb6:	f0 92 5a 01 	sts	0x015A, r15	; 0x80015a <previous_time.2386+0x3>
		animation_number++;
     bba:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <animation_number.2387>
     bbe:	8f 5f       	subi	r24, 0xFF	; 255
     bc0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <animation_number.2387>
     bc4:	1f c0       	rjmp	.+62     	; 0xc04 <game_over_animation+0x94>
	} else if (animation_number == 16) {
		set_scrolling_display_text("GAME OVER NERD", COLOUR_GREEN);
     bc6:	60 ef       	ldi	r22, 0xF0	; 240
     bc8:	8d e1       	ldi	r24, 0x1D	; 29
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 aa 08 	call	0x1154	; 0x1154 <set_scrolling_display_text>
		animation_number++;
     bd0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <animation_number.2387>
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <animation_number.2387>
     bda:	14 c0       	rjmp	.+40     	; 0xc04 <game_over_animation+0x94>
	} else if (current_time > previous_time + 100 && scroll_display()) {
     bdc:	0e 94 b9 08 	call	0x1172	; 0x1172 <scroll_display>
     be0:	88 23       	and	r24, r24
     be2:	81 f0       	breq	.+32     	; 0xc04 <game_over_animation+0x94>
		previous_time = current_time;
     be4:	c0 92 57 01 	sts	0x0157, r12	; 0x800157 <previous_time.2386>
     be8:	d0 92 58 01 	sts	0x0158, r13	; 0x800158 <previous_time.2386+0x1>
     bec:	e0 92 59 01 	sts	0x0159, r14	; 0x800159 <previous_time.2386+0x2>
     bf0:	f0 92 5a 01 	sts	0x015A, r15	; 0x80015a <previous_time.2386+0x3>
	} 
}
     bf4:	07 c0       	rjmp	.+14     	; 0xc04 <game_over_animation+0x94>
	static uint8_t animation_number;
	if (current_time > previous_time + 100 && animation_number <= 16) {
		ledmatrix_shift_display_right();
		previous_time = current_time;
		animation_number++;
	} else if (animation_number == 16) {
     bf6:	80 31       	cpi	r24, 0x10	; 16
     bf8:	89 f7       	brne	.-30     	; 0xbdc <game_over_animation+0x6c>
     bfa:	e5 cf       	rjmp	.-54     	; 0xbc6 <game_over_animation+0x56>
     bfc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <animation_number.2387>
     c00:	80 31       	cpi	r24, 0x10	; 16
     c02:	09 f3       	breq	.-62     	; 0xbc6 <game_over_animation+0x56>
		set_scrolling_display_text("GAME OVER NERD", COLOUR_GREEN);
		animation_number++;
	} else if (current_time > previous_time + 100 && scroll_display()) {
		previous_time = current_time;
	} 
}
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	08 95       	ret

00000c0e <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     c0e:	80 e8       	ldi	r24, 0x80	; 128
     c10:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <spi_setup_master>
     c14:	08 95       	ret

00000c16 <ledmatrix_update_pixel>:
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	80 31       	cpi	r24, 0x10	; 16
     c1e:	b0 f4       	brcc	.+44     	; 0xc4c <ledmatrix_update_pixel+0x36>
     c20:	68 30       	cpi	r22, 0x08	; 8
     c22:	a0 f4       	brcc	.+40     	; 0xc4c <ledmatrix_update_pixel+0x36>
     c24:	14 2f       	mov	r17, r20
     c26:	c6 2f       	mov	r28, r22
     c28:	d8 2f       	mov	r29, r24
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     c30:	6c 2f       	mov	r22, r28
     c32:	67 70       	andi	r22, 0x07	; 7
     c34:	80 e1       	ldi	r24, 0x10	; 16
     c36:	68 9f       	mul	r22, r24
     c38:	90 01       	movw	r18, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	8d 2f       	mov	r24, r29
     c3e:	8f 70       	andi	r24, 0x0F	; 15
     c40:	82 2b       	or	r24, r18
     c42:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     c46:	81 2f       	mov	r24, r17
     c48:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	08 95       	ret

00000c54 <ledmatrix_update_column>:
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	80 31       	cpi	r24, 0x10	; 16
     c5e:	90 f4       	brcc	.+36     	; 0xc84 <ledmatrix_update_column+0x30>
     c60:	8b 01       	movw	r16, r22
     c62:	c8 2f       	mov	r28, r24
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     c6a:	8c 2f       	mov	r24, r28
     c6c:	8f 70       	andi	r24, 0x0F	; 15
     c6e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     c72:	e8 01       	movw	r28, r16
     c74:	08 5f       	subi	r16, 0xF8	; 248
     c76:	1f 4f       	sbci	r17, 0xFF	; 255
     c78:	89 91       	ld	r24, Y+
     c7a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     c7e:	c0 17       	cp	r28, r16
     c80:	d1 07       	cpc	r29, r17
     c82:	d1 f7       	brne	.-12     	; 0xc78 <ledmatrix_update_column+0x24>
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	08 95       	ret

00000c8e <ledmatrix_shift_display_left>:
     c8e:	84 e0       	ldi	r24, 0x04	; 4
     c90:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     c9a:	08 95       	ret

00000c9c <ledmatrix_shift_display_right>:
     c9c:	84 e0       	ldi	r24, 0x04	; 4
     c9e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     ca8:	08 95       	ret

00000caa <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     caa:	8f e0       	ldi	r24, 0x0F	; 15
     cac:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_send_byte>
     cb0:	08 95       	ret

00000cb2 <init_lives>:
#include "lives.h"

uint32_t lives;

void init_lives(void) {
	lives = 4;
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <lives>
     cbe:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <lives+0x1>
     cc2:	a0 93 84 01 	sts	0x0184, r26	; 0x800184 <lives+0x2>
     cc6:	b0 93 85 01 	sts	0x0185, r27	; 0x800185 <lives+0x3>
     cca:	08 95       	ret

00000ccc <add_to_lives>:
}

void add_to_lives(int16_t value) {
	lives += value;
     ccc:	09 2e       	mov	r0, r25
     cce:	00 0c       	add	r0, r0
     cd0:	aa 0b       	sbc	r26, r26
     cd2:	bb 0b       	sbc	r27, r27
     cd4:	40 91 82 01 	lds	r20, 0x0182	; 0x800182 <lives>
     cd8:	50 91 83 01 	lds	r21, 0x0183	; 0x800183 <lives+0x1>
     cdc:	60 91 84 01 	lds	r22, 0x0184	; 0x800184 <lives+0x2>
     ce0:	70 91 85 01 	lds	r23, 0x0185	; 0x800185 <lives+0x3>
     ce4:	84 0f       	add	r24, r20
     ce6:	95 1f       	adc	r25, r21
     ce8:	a6 1f       	adc	r26, r22
     cea:	b7 1f       	adc	r27, r23
     cec:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <lives>
     cf0:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <lives+0x1>
     cf4:	a0 93 84 01 	sts	0x0184, r26	; 0x800184 <lives+0x2>
     cf8:	b0 93 85 01 	sts	0x0185, r27	; 0x800185 <lives+0x3>
     cfc:	08 95       	ret

00000cfe <get_lives>:
}

uint32_t get_lives(void) {
	return lives;
     cfe:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <lives>
     d02:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <lives+0x1>
     d06:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <lives+0x2>
     d0a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <lives+0x3>
}
     d0e:	08 95       	ret

00000d10 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     d10:	0e 94 07 06 	call	0xc0e	; 0xc0e <ledmatrix_setup>
	init_button_interrupts();
     d14:	0e 94 2e 01 	call	0x25c	; 0x25c <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	7b e4       	ldi	r23, 0x4B	; 75
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <init_serial_stdio>
	
	init_timer0();
     d26:	0e 94 c0 0b 	call	0x1780	; 0x1780 <init_timer0>
	
	// Initialise the seven_seg display, 
	// with PORT A and PORT C pin 0 as outputs.
	// Initialise PORT C to output the number of lives
	init_display();
     d2a:	0e 94 c9 0a 	call	0x1592	; 0x1592 <init_display>
	
	// Turn on global interrupts
	sei();
     d2e:	78 94       	sei
     d30:	08 95       	ret

00000d32 <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     d32:	0e 94 b7 0b 	call	0x176e	; 0x176e <clear_terminal>
	move_cursor(10,10);
     d36:	6a e0       	ldi	r22, 0x0A	; 10
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	8a e0       	ldi	r24, 0x0A	; 10
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 a6 0b 	call	0x174c	; 0x174c <move_cursor>
	printf_P(PSTR("Asteroids"));
     d42:	88 e2       	ldi	r24, 0x28	; 40
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
	move_cursor(10,12);
     d4e:	6c e0       	ldi	r22, 0x0C	; 12
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	8a e0       	ldi	r24, 0x0A	; 10
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 a6 0b 	call	0x174c	; 0x174c <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Matthew Burton"));
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	9f 93       	push	r25
     d60:	8f 93       	push	r24
     d62:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     d66:	0e 94 55 06 	call	0xcaa	; 0xcaa <ledmatrix_clear>
     d6a:	0f 90       	pop	r0
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("ASTEROIDS MATTHEW BURTON S45293867", COLOUR_GREEN);
     d72:	60 ef       	ldi	r22, 0xF0	; 240
     d74:	8c e2       	ldi	r24, 0x2C	; 44
     d76:	91 e0       	ldi	r25, 0x01	; 1
     d78:	0e 94 aa 08 	call	0x1154	; 0x1154 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     d7c:	0d c0       	rjmp	.+26     	; 0xd98 <splash_screen+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d7e:	2f e3       	ldi	r18, 0x3F	; 63
     d80:	8d e0       	ldi	r24, 0x0D	; 13
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	21 50       	subi	r18, 0x01	; 1
     d86:	80 40       	sbci	r24, 0x00	; 0
     d88:	90 40       	sbci	r25, 0x00	; 0
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <splash_screen+0x52>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <splash_screen+0x5c>
     d8e:	00 00       	nop
			_delay_ms(125);
			if(button_pushed() != NO_BUTTON_PUSHED) {
     d90:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
     d94:	8f 3f       	cpi	r24, 0xFF	; 255
     d96:	29 f4       	brne	.+10     	; 0xda2 <splash_screen+0x70>
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("ASTEROIDS MATTHEW BURTON S45293867", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     d98:	0e 94 b9 08 	call	0x1172	; 0x1172 <scroll_display>
     d9c:	81 11       	cpse	r24, r1
     d9e:	ef cf       	rjmp	.-34     	; 0xd7e <splash_screen+0x4c>
     da0:	e8 cf       	rjmp	.-48     	; 0xd72 <splash_screen+0x40>
     da2:	08 95       	ret

00000da4 <new_game>:
			}
		}
	}
}

void new_game(void) {
     da4:	cf 92       	push	r12
     da6:	df 92       	push	r13
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
	// Initialise the game and display
	initialise_game();
     db2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <initialise_game>
	
	// Clear the serial terminal
	clear_terminal();
     db6:	0e 94 b7 0b 	call	0x176e	; 0x176e <clear_terminal>
	move_cursor(2,2);
     dba:	62 e0       	ldi	r22, 0x02	; 2
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 a6 0b 	call	0x174c	; 0x174c <move_cursor>
	printf_P(PSTR("Asteroids"));
     dc6:	86 ef       	ldi	r24, 0xF6	; 246
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	9f 93       	push	r25
     dcc:	8f 93       	push	r24
     dce:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
	
	// Initialise the score
	init_score();
     dd2:	0e 94 83 08 	call	0x1106	; 0x1106 <init_score>
	move_cursor(2,4);
     dd6:	64 e0       	ldi	r22, 0x04	; 4
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	82 e0       	ldi	r24, 0x02	; 2
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 a6 0b 	call	0x174c	; 0x174c <move_cursor>
	printf_P(PSTR("Score: %lu"), get_score());
     de2:	0e 94 a1 08 	call	0x1142	; 0x1142 <get_score>
     de6:	9f 93       	push	r25
     de8:	8f 93       	push	r24
     dea:	7f 93       	push	r23
     dec:	6f 93       	push	r22
     dee:	8b ee       	ldi	r24, 0xEB	; 235
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9f 93       	push	r25
     df4:	8f 93       	push	r24
     df6:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
	
	// Initialise lives.
	init_lives();
     dfa:	0e 94 59 06 	call	0xcb2	; 0xcb2 <init_lives>
	PORTC &= 1;
     dfe:	88 b1       	in	r24, 0x08	; 8
     e00:	81 70       	andi	r24, 0x01	; 1
     e02:	88 b9       	out	0x08, r24	; 8
	for (int8_t i = 0; i < get_lives(); i++) {
     e04:	4d b7       	in	r20, 0x3d	; 61
     e06:	5e b7       	in	r21, 0x3e	; 62
     e08:	48 5f       	subi	r20, 0xF8	; 248
     e0a:	5f 4f       	sbci	r21, 0xFF	; 255
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	5e bf       	out	0x3e, r21	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	4d bf       	out	0x3d, r20	; 61
     e16:	c0 e0       	ldi	r28, 0x00	; 0
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (4 + i));
     e18:	01 e0       	ldi	r16, 0x01	; 1
     e1a:	10 e0       	ldi	r17, 0x00	; 0
	printf_P(PSTR("Score: %lu"), get_score());
	
	// Initialise lives.
	init_lives();
	PORTC &= 1;
	for (int8_t i = 0; i < get_lives(); i++) {
     e1c:	0d c0       	rjmp	.+26     	; 0xe38 <new_game+0x94>
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (4 + i));
     e1e:	28 b1       	in	r18, 0x08	; 8
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	8c 0f       	add	r24, r28
     e24:	a8 01       	movw	r20, r16
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <new_game+0x88>
     e28:	44 0f       	add	r20, r20
     e2a:	55 1f       	adc	r21, r21
     e2c:	8a 95       	dec	r24
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <new_game+0x84>
     e30:	ca 01       	movw	r24, r20
     e32:	82 2b       	or	r24, r18
     e34:	88 b9       	out	0x08, r24	; 8
     e36:	cf 5f       	subi	r28, 0xFF	; 255
	printf_P(PSTR("Score: %lu"), get_score());
	
	// Initialise lives.
	init_lives();
	PORTC &= 1;
	for (int8_t i = 0; i < get_lives(); i++) {
     e38:	0e 94 7f 06 	call	0xcfe	; 0xcfe <get_lives>
     e3c:	cc 2e       	mov	r12, r28
     e3e:	0c 2e       	mov	r0, r28
     e40:	00 0c       	add	r0, r0
     e42:	dd 08       	sbc	r13, r13
     e44:	ee 08       	sbc	r14, r14
     e46:	ff 08       	sbc	r15, r15
     e48:	c6 16       	cp	r12, r22
     e4a:	d7 06       	cpc	r13, r23
     e4c:	e8 06       	cpc	r14, r24
     e4e:	f9 06       	cpc	r15, r25
     e50:	30 f3       	brcs	.-52     	; 0xe1e <new_game+0x7a>
		// Set the last four bits to the number of live -> 2^{lives}.
		PORTC |= (1 << (4 + i));
	}
	move_cursor(2, 6);
     e52:	66 e0       	ldi	r22, 0x06	; 6
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 a6 0b 	call	0x174c	; 0x174c <move_cursor>
	printf_P(PSTR("You have %lu lives remaining."), get_lives());
     e5e:	0e 94 7f 06 	call	0xcfe	; 0xcfe <get_lives>
     e62:	9f 93       	push	r25
     e64:	8f 93       	push	r24
     e66:	7f 93       	push	r23
     e68:	6f 93       	push	r22
     e6a:	8d ec       	ldi	r24, 0xCD	; 205
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9f 93       	push	r25
     e70:	8f 93       	push	r24
     e72:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     e76:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
	clear_serial_input_buffer();
     e7a:	0e 94 2f 0a 	call	0x145e	; 0x145e <clear_serial_input_buffer>
}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	df 90       	pop	r13
     e96:	cf 90       	pop	r12
     e98:	08 95       	ret

00000e9a <play_game>:

void play_game(void) {
     e9a:	2f 92       	push	r2
     e9c:	3f 92       	push	r3
     e9e:	4f 92       	push	r4
     ea0:	5f 92       	push	r5
     ea2:	6f 92       	push	r6
     ea4:	7f 92       	push	r7
     ea6:	8f 92       	push	r8
     ea8:	9f 92       	push	r9
     eaa:	af 92       	push	r10
     eac:	bf 92       	push	r11
     eae:	cf 92       	push	r12
     eb0:	df 92       	push	r13
     eb2:	ef 92       	push	r14
     eb4:	ff 92       	push	r15
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	1f 92       	push	r1
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
     ec4:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <get_current_time>
     ec8:	2b 01       	movw	r4, r22
     eca:	3c 01       	movw	r6, r24
	last_move_time = current_time;
	last_move_asteroid = current_time;
     ecc:	4b 01       	movw	r8, r22
     ece:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t current_time, last_move_time, last_move_asteroid;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     ed0:	19 82       	std	Y+1, r1	; 0x01
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     ed2:	22 24       	eor	r2, r2
     ed4:	2a 94       	dec	r2
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     ed6:	68 94       	set
     ed8:	33 24       	eor	r3, r3
     eda:	31 f8       	bld	r3, 1
	current_time = get_current_time();
	last_move_time = current_time;
	last_move_asteroid = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
     edc:	a6 c0       	rjmp	.+332    	; 0x102a <play_game+0x190>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     ede:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
     ee2:	08 2f       	mov	r16, r24
		
		if(button == NO_BUTTON_PUSHED) {
     ee4:	8f 3f       	cpi	r24, 0xFF	; 255
     ee6:	09 f0       	breq	.+2      	; 0xeea <play_game+0x50>
     ee8:	ab c0       	rjmp	.+342    	; 0x1040 <play_game+0x1a6>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     eea:	0e 94 28 0a 	call	0x1450	; 0x1450 <serial_input_available>
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <play_game+0x5a>
     ef2:	56 c0       	rjmp	.+172    	; 0xfa0 <play_game+0x106>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     ef4:	e6 ea       	ldi	r30, 0xA6	; 166
     ef6:	f2 e0       	ldi	r31, 0x02	; 2
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     f00:	f9 81       	ldd	r31, Y+1	; 0x01
     f02:	f1 11       	cpse	r31, r1
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <play_game+0x76>
     f06:	8b 31       	cpi	r24, 0x1B	; 27
     f08:	09 f4       	brne	.+2      	; 0xf0c <play_game+0x72>
     f0a:	95 c0       	rjmp	.+298    	; 0x1036 <play_game+0x19c>
     f0c:	92 2d       	mov	r25, r2
     f0e:	0d c0       	rjmp	.+26     	; 0xf2a <play_game+0x90>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     f10:	99 81       	ldd	r25, Y+1	; 0x01
     f12:	91 30       	cpi	r25, 0x01	; 1
     f14:	29 f4       	brne	.+10     	; 0xf20 <play_game+0x86>
     f16:	8b 35       	cpi	r24, 0x5B	; 91
     f18:	09 f4       	brne	.+2      	; 0xf1c <play_game+0x82>
     f1a:	90 c0       	rjmp	.+288    	; 0x103c <play_game+0x1a2>
     f1c:	92 2d       	mov	r25, r2
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <play_game+0x90>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     f20:	e9 81       	ldd	r30, Y+1	; 0x01
     f22:	e2 30       	cpi	r30, 0x02	; 2
     f24:	29 f4       	brne	.+10     	; 0xf30 <play_game+0x96>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     f26:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
     f28:	82 2d       	mov	r24, r2
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     f2a:	94 34       	cpi	r25, 0x44	; 68
     f2c:	11 f4       	brne	.+4      	; 0xf32 <play_game+0x98>
     f2e:	08 c0       	rjmp	.+16     	; 0xf40 <play_game+0xa6>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     f30:	92 2d       	mov	r25, r2
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     f32:	28 2f       	mov	r18, r24
     f34:	2f 7d       	andi	r18, 0xDF	; 223
     f36:	2c 34       	cpi	r18, 0x4C	; 76
     f38:	09 f0       	breq	.+2      	; 0xf3c <play_game+0xa2>
     f3a:	86 c0       	rjmp	.+268    	; 0x1048 <play_game+0x1ae>
     f3c:	19 82       	std	Y+1, r1	; 0x01
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <play_game+0xa8>
     f40:	19 82       	std	Y+1, r1	; 0x01
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			move_base(MOVE_LEFT);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <move_base>
     f48:	2b c0       	rjmp	.+86     	; 0xfa0 <play_game+0x106>
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
     f4a:	80 32       	cpi	r24, 0x20	; 32
     f4c:	31 f4       	brne	.+12     	; 0xf5a <play_game+0xc0>
     f4e:	19 82       	std	Y+1, r1	; 0x01
     f50:	01 c0       	rjmp	.+2      	; 0xf54 <play_game+0xba>
     f52:	19 82       	std	Y+1, r1	; 0x01
			// Button 2 pressed or up cursor key escape sequence completed OR
			// space bar pressed - attempt to fire projectile
			fire_projectile();
     f54:	0e 94 f6 03 	call	0x7ec	; 0x7ec <fire_projectile>
     f58:	23 c0       	rjmp	.+70     	; 0xfa0 <play_game+0x106>
     f5a:	19 82       	std	Y+1, r1	; 0x01
		} else if(button==1 || escape_sequence_char=='B') {
     f5c:	01 30       	cpi	r16, 0x01	; 1
     f5e:	01 f1       	breq	.+64     	; 0xfa0 <play_game+0x106>
     f60:	92 34       	cpi	r25, 0x42	; 66
     f62:	f1 f0       	breq	.+60     	; 0xfa0 <play_game+0x106>
			// Button 1 pressed OR down cursor key escape sequence completed
			// Ignore at present
		} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
     f64:	00 23       	and	r16, r16
     f66:	29 f0       	breq	.+10     	; 0xf72 <play_game+0xd8>
     f68:	93 34       	cpi	r25, 0x43	; 67
     f6a:	19 f0       	breq	.+6      	; 0xf72 <play_game+0xd8>
     f6c:	8f 7d       	andi	r24, 0xDF	; 223
     f6e:	82 35       	cpi	r24, 0x52	; 82
     f70:	21 f4       	brne	.+8      	; 0xf7a <play_game+0xe0>
			// Button 0 pressed OR right cursor key escape sequence completed OR
			// letter R (lowercase or uppercase) pressed - attempt to move right
			move_base(MOVE_RIGHT);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <move_base>
     f78:	13 c0       	rjmp	.+38     	; 0xfa0 <play_game+0x106>
		} else if(serial_input == 'p' || serial_input == 'P') {
     f7a:	80 35       	cpi	r24, 0x50	; 80
     f7c:	89 f4       	brne	.+34     	; 0xfa0 <play_game+0x106>
			// Unimplemented feature - pause/unpause the game until 'p' or 'P' is
			// pressed again
			toggle_timer();
     f7e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <toggle_timer>
			while(1) {
				if(serial_input_available()) {
     f82:	0e 94 28 0a 	call	0x1450	; 0x1450 <serial_input_available>
     f86:	88 23       	and	r24, r24
     f88:	e1 f3       	breq	.-8      	; 0xf82 <play_game+0xe8>
					// Serial data was available - read the data from standard input
					serial_input = fgetc(stdin);
     f8a:	e6 ea       	ldi	r30, 0xA6	; 166
     f8c:	f2 e0       	ldi	r31, 0x02	; 2
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <fgetc>
					if (serial_input == 'p' || serial_input == 'P') {
     f96:	8f 7d       	andi	r24, 0xDF	; 223
     f98:	80 35       	cpi	r24, 0x50	; 80
     f9a:	99 f7       	brne	.-26     	; 0xf82 <play_game+0xe8>
						break;
					}
				}
			}
			toggle_timer();
     f9c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <toggle_timer>
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
     fa0:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <get_current_time>
     fa4:	6b 01       	movw	r12, r22
     fa6:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= last_move_time + 200) {
     fa8:	0e 94 86 04 	call	0x90c	; 0x90c <is_game_over>
     fac:	81 11       	cpse	r24, r1
     fae:	0f c0       	rjmp	.+30     	; 0xfce <play_game+0x134>
     fb0:	d3 01       	movw	r26, r6
     fb2:	c2 01       	movw	r24, r4
     fb4:	88 53       	subi	r24, 0x38	; 56
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	af 4f       	sbci	r26, 0xFF	; 255
     fba:	bf 4f       	sbci	r27, 0xFF	; 255
     fbc:	c8 16       	cp	r12, r24
     fbe:	d9 06       	cpc	r13, r25
     fc0:	ea 06       	cpc	r14, r26
     fc2:	fb 06       	cpc	r15, r27
     fc4:	20 f0       	brcs	.+8      	; 0xfce <play_game+0x134>
			// 500ms (0.5 second) has passed since the last time we moved
			// the projectiles - move them - and keep track of the time we 
			// moved them
			advance_projectiles();
     fc6:	0e 94 44 04 	call	0x888	; 0x888 <advance_projectiles>
			
			last_move_time = current_time;
     fca:	26 01       	movw	r4, r12
     fcc:	37 01       	movw	r6, r14
		}

		if(current_time >= last_move_asteroid + 1000 - get_score() * 5) {
     fce:	0e 94 a1 08 	call	0x1142	; 0x1142 <get_score>
     fd2:	8b 01       	movw	r16, r22
     fd4:	9c 01       	movw	r18, r24
     fd6:	00 0f       	add	r16, r16
     fd8:	11 1f       	adc	r17, r17
     fda:	22 1f       	adc	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	00 0f       	add	r16, r16
     fe0:	11 1f       	adc	r17, r17
     fe2:	22 1f       	adc	r18, r18
     fe4:	33 1f       	adc	r19, r19
     fe6:	ab 01       	movw	r20, r22
     fe8:	bc 01       	movw	r22, r24
     fea:	40 0f       	add	r20, r16
     fec:	51 1f       	adc	r21, r17
     fee:	62 1f       	adc	r22, r18
     ff0:	73 1f       	adc	r23, r19
     ff2:	d5 01       	movw	r26, r10
     ff4:	c4 01       	movw	r24, r8
     ff6:	88 51       	subi	r24, 0x18	; 24
     ff8:	9c 4f       	sbci	r25, 0xFC	; 252
     ffa:	af 4f       	sbci	r26, 0xFF	; 255
     ffc:	bf 4f       	sbci	r27, 0xFF	; 255
     ffe:	84 1b       	sub	r24, r20
    1000:	95 0b       	sbc	r25, r21
    1002:	a6 0b       	sbc	r26, r22
    1004:	b7 0b       	sbc	r27, r23
    1006:	c8 16       	cp	r12, r24
    1008:	d9 06       	cpc	r13, r25
    100a:	ea 06       	cpc	r14, r26
    100c:	fb 06       	cpc	r15, r27
    100e:	20 f0       	brcs	.+8      	; 0x1018 <play_game+0x17e>
			// 1000ms (1 seconds) has passed since the last time we moved
			// the asteroids - move them - and keep track of the time we
			// moved them
			advance_asteroids();
    1010:	0e 94 2f 05 	call	0xa5e	; 0xa5e <advance_asteroids>
			
			last_move_asteroid = current_time;
    1014:	46 01       	movw	r8, r12
    1016:	57 01       	movw	r10, r14
		
		/* Displays the score on the seven segment display. 
		Wraps around at 100. The refresh rate is every 3 milliseconds. 
		Might need to use above method to improve performance.
		*/
		set_value(get_score());
    1018:	0e 94 a1 08 	call	0x1142	; 0x1142 <get_score>
    101c:	cb 01       	movw	r24, r22
    101e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <set_value>
		display_data(current_time);
    1022:	c7 01       	movw	r24, r14
    1024:	b6 01       	movw	r22, r12
    1026:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <display_data>
	current_time = get_current_time();
	last_move_time = current_time;
	last_move_asteroid = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
    102a:	0e 94 86 04 	call	0x90c	; 0x90c <is_game_over>
    102e:	88 23       	and	r24, r24
    1030:	09 f4       	brne	.+2      	; 0x1034 <play_game+0x19a>
    1032:	55 cf       	rjmp	.-342    	; 0xede <play_game+0x44>
    1034:	13 c0       	rjmp	.+38     	; 0x105c <play_game+0x1c2>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    1036:	f1 e0       	ldi	r31, 0x01	; 1
    1038:	f9 83       	std	Y+1, r31	; 0x01
    103a:	b2 cf       	rjmp	.-156    	; 0xfa0 <play_game+0x106>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    103c:	39 82       	std	Y+1, r3	; 0x01
    103e:	b0 cf       	rjmp	.-160    	; 0xfa0 <play_game+0x106>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	09 f4       	brne	.+2      	; 0x1046 <play_game+0x1ac>
    1044:	7e cf       	rjmp	.-260    	; 0xf42 <play_game+0xa8>
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <play_game+0x1b6>
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			move_base(MOVE_LEFT);
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
    1048:	91 34       	cpi	r25, 0x41	; 65
    104a:	09 f0       	breq	.+2      	; 0x104e <play_game+0x1b4>
    104c:	7e cf       	rjmp	.-260    	; 0xf4a <play_game+0xb0>
    104e:	81 cf       	rjmp	.-254    	; 0xf52 <play_game+0xb8>
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	09 f4       	brne	.+2      	; 0x1056 <play_game+0x1bc>
    1054:	7f cf       	rjmp	.-258    	; 0xf54 <play_game+0xba>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
    1056:	92 2d       	mov	r25, r2
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    1058:	82 2d       	mov	r24, r2
    105a:	80 cf       	rjmp	.-256    	; 0xf5c <play_game+0xc2>
		*/
		set_value(get_score());
		display_data(current_time);
	}
	// We get here if the game is over.
}
    105c:	0f 90       	pop	r0
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	df 90       	pop	r13
    106c:	cf 90       	pop	r12
    106e:	bf 90       	pop	r11
    1070:	af 90       	pop	r10
    1072:	9f 90       	pop	r9
    1074:	8f 90       	pop	r8
    1076:	7f 90       	pop	r7
    1078:	6f 90       	pop	r6
    107a:	5f 90       	pop	r5
    107c:	4f 90       	pop	r4
    107e:	3f 90       	pop	r3
    1080:	2f 90       	pop	r2
    1082:	08 95       	ret

00001084 <handle_game_over>:

void handle_game_over() {
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
	uint32_t current_time;
	move_cursor(10,14);
    108c:	6e e0       	ldi	r22, 0x0E	; 14
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	8a e0       	ldi	r24, 0x0A	; 10
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 a6 0b 	call	0x174c	; 0x174c <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1098:	83 ec       	ldi	r24, 0xC3	; 195
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9f 93       	push	r25
    109e:	8f 93       	push	r24
    10a0:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
	move_cursor(10,15);
    10a4:	6f e0       	ldi	r22, 0x0F	; 15
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	8a e0       	ldi	r24, 0x0A	; 10
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 a6 0b 	call	0x174c	; 0x174c <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    10b0:	85 ea       	ldi	r24, 0xA5	; 165
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9f 93       	push	r25
    10b6:	8f 93       	push	r24
    10b8:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	0a c0       	rjmp	.+20     	; 0x10da <handle_game_over+0x56>
		current_time = get_current_time();
    10c6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <get_current_time>
    10ca:	6b 01       	movw	r12, r22
    10cc:	7c 01       	movw	r14, r24
		display_data(current_time);
    10ce:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <display_data>
		game_over_animation(current_time);
    10d2:	c7 01       	movw	r24, r14
    10d4:	b6 01       	movw	r22, r12
    10d6:	0e 94 b8 05 	call	0xb70	; 0xb70 <game_over_animation>
	uint32_t current_time;
	move_cursor(10,14);
	printf_P(PSTR("GAME OVER"));
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	while(button_pushed() == NO_BUTTON_PUSHED) {
    10da:	0e 94 3c 01 	call	0x278	; 0x278 <button_pushed>
    10de:	8f 3f       	cpi	r24, 0xFF	; 255
    10e0:	91 f3       	breq	.-28     	; 0x10c6 <handle_game_over+0x42>
		current_time = get_current_time();
		display_data(current_time);
		game_over_animation(current_time);
	}
	init_lives();
    10e2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <init_lives>
}
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	df 90       	pop	r13
    10ec:	cf 90       	pop	r12
    10ee:	08 95       	ret

000010f0 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    10f0:	0e 94 88 06 	call	0xd10	; 0xd10 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    10f4:	0e 94 99 06 	call	0xd32	; 0xd32 <splash_screen>
	
	while(1) {
		new_game();
    10f8:	0e 94 d2 06 	call	0xda4	; 0xda4 <new_game>
		play_game();
    10fc:	0e 94 4d 07 	call	0xe9a	; 0xe9a <play_game>
		handle_game_over();
    1100:	0e 94 42 08 	call	0x1084	; 0x1084 <handle_game_over>
    1104:	f9 cf       	rjmp	.-14     	; 0x10f8 <main+0x8>

00001106 <init_score>:
#include "score.h"

uint32_t score;

void init_score(void) {
	score = 0;
    1106:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <score>
    110a:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <score+0x1>
    110e:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <score+0x2>
    1112:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <score+0x3>
    1116:	08 95       	ret

00001118 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1118:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <score>
    111c:	50 91 87 01 	lds	r21, 0x0187	; 0x800187 <score+0x1>
    1120:	60 91 88 01 	lds	r22, 0x0188	; 0x800188 <score+0x2>
    1124:	70 91 89 01 	lds	r23, 0x0189	; 0x800189 <score+0x3>
    1128:	48 0f       	add	r20, r24
    112a:	59 1f       	adc	r21, r25
    112c:	61 1d       	adc	r22, r1
    112e:	71 1d       	adc	r23, r1
    1130:	40 93 86 01 	sts	0x0186, r20	; 0x800186 <score>
    1134:	50 93 87 01 	sts	0x0187, r21	; 0x800187 <score+0x1>
    1138:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <score+0x2>
    113c:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <score+0x3>
    1140:	08 95       	ret

00001142 <get_score>:
}

uint32_t get_score(void) {
	return score;
    1142:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <score>
    1146:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <score+0x1>
    114a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <score+0x2>
    114e:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <score+0x3>
}
    1152:	08 95       	ret

00001154 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1154:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
    1158:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <display_string+0x1>
    115c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <display_string>
	next_col_ptr = 0;
    1160:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <next_col_ptr+0x1>
    1164:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <next_col_ptr>
	next_char_to_display = 0;
    1168:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <next_char_to_display+0x1>
    116c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <next_char_to_display>
    1170:	08 95       	ret

00001172 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	28 97       	sbiw	r28, 0x08	; 8
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    118a:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <next_col_ptr>
    118e:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <next_col_ptr+0x1>
    1192:	30 97       	sbiw	r30, 0x00	; 0
    1194:	81 f0       	breq	.+32     	; 0x11b6 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1196:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1198:	10 ff       	sbrs	r17, 0
    119a:	06 c0       	rjmp	.+12     	; 0x11a8 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    119c:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <next_col_ptr+0x1>
    11a0:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    11a4:	00 e0       	ldi	r16, 0x00	; 0
    11a6:	6b c0       	rjmp	.+214    	; 0x127e <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    11a8:	31 96       	adiw	r30, 0x01	; 1
    11aa:	f0 93 61 01 	sts	0x0161, r31	; 0x800161 <next_col_ptr+0x1>
    11ae:	e0 93 60 01 	sts	0x0160, r30	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    11b2:	00 e0       	ldi	r16, 0x00	; 0
    11b4:	64 c0       	rjmp	.+200    	; 0x127e <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    11b6:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <next_char_to_display>
    11ba:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <next_char_to_display+0x1>
    11be:	30 97       	sbiw	r30, 0x00	; 0
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <scroll_display+0x52>
    11c2:	49 c0       	rjmp	.+146    	; 0x1256 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    11c4:	cf 01       	movw	r24, r30
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <next_char_to_display+0x1>
    11cc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <next_char_to_display>
    11d0:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    11d2:	e1 11       	cpse	r30, r1
    11d4:	0a c0       	rjmp	.+20     	; 0x11ea <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    11d6:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <next_char_to_display+0x1>
    11da:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <next_char_to_display>
			shift_countdown = 16;
    11de:	80 e1       	ldi	r24, 0x10	; 16
    11e0:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    11e4:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    11e6:	10 e0       	ldi	r17, 0x00	; 0
    11e8:	4a c0       	rjmp	.+148    	; 0x127e <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    11ea:	8f e9       	ldi	r24, 0x9F	; 159
    11ec:	8e 0f       	add	r24, r30
    11ee:	8a 31       	cpi	r24, 0x1A	; 26
    11f0:	70 f4       	brcc	.+28     	; 0x120e <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	ec 57       	subi	r30, 0x7C	; 124
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	85 91       	lpm	r24, Z+
    11fe:	94 91       	lpm	r25, Z
    1200:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <next_col_ptr+0x1>
    1204:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1208:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    120a:	10 e0       	ldi	r17, 0x00	; 0
    120c:	38 c0       	rjmp	.+112    	; 0x127e <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    120e:	8f eb       	ldi	r24, 0xBF	; 191
    1210:	8e 0f       	add	r24, r30
    1212:	8a 31       	cpi	r24, 0x1A	; 26
    1214:	70 f4       	brcc	.+28     	; 0x1232 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	ee 0f       	add	r30, r30
    121a:	ff 1f       	adc	r31, r31
    121c:	ec 53       	subi	r30, 0x3C	; 60
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	85 91       	lpm	r24, Z+
    1222:	94 91       	lpm	r25, Z
    1224:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <next_col_ptr+0x1>
    1228:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    122c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    122e:	10 e0       	ldi	r17, 0x00	; 0
    1230:	26 c0       	rjmp	.+76     	; 0x127e <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1232:	80 ed       	ldi	r24, 0xD0	; 208
    1234:	8e 0f       	add	r24, r30
    1236:	8a 30       	cpi	r24, 0x0A	; 10
    1238:	00 f5       	brcc	.+64     	; 0x127a <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	ee 52       	subi	r30, 0x2E	; 46
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	85 91       	lpm	r24, Z+
    1246:	94 91       	lpm	r25, Z
    1248:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <next_col_ptr+0x1>
    124c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1250:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1252:	10 e0       	ldi	r17, 0x00	; 0
    1254:	14 c0       	rjmp	.+40     	; 0x127e <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1256:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <display_string>
    125a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    125e:	01 e0       	ldi	r16, 0x01	; 1
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	09 f0       	breq	.+2      	; 0x1266 <scroll_display+0xf4>
    1264:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1266:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <next_char_to_display+0x1>
    126a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <next_char_to_display>
		display_string = 0;
    126e:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <display_string+0x1>
    1272:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1276:	10 e0       	ldi	r17, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    127a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    127c:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    127e:	0e 94 47 06 	call	0xc8e	; 0xc8e <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1282:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
    1286:	fe 01       	movw	r30, r28
    1288:	38 96       	adiw	r30, 0x08	; 8
    128a:	ce 01       	movw	r24, r28
    128c:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    128e:	11 23       	and	r17, r17
    1290:	14 f4       	brge	.+4      	; 0x1296 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1292:	20 83       	st	Z, r18
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1296:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1298:	11 0f       	add	r17, r17
    129a:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    129c:	e8 17       	cp	r30, r24
    129e:	f9 07       	cpc	r31, r25
    12a0:	b1 f7       	brne	.-20     	; 0x128e <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    12a2:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    12a4:	be 01       	movw	r22, r28
    12a6:	6f 5f       	subi	r22, 0xFF	; 255
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	8f e0       	ldi	r24, 0x0F	; 15
    12ac:	0e 94 2a 06 	call	0xc54	; 0xc54 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    12b0:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <shift_countdown.1854>
    12b4:	88 23       	and	r24, r24
    12b6:	89 f0       	breq	.+34     	; 0x12da <scroll_display+0x168>
		shift_countdown--;
    12b8:	81 50       	subi	r24, 0x01	; 1
    12ba:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    12be:	00 23       	and	r16, r16
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <scroll_display+0x154>
    12c2:	88 23       	and	r24, r24
    12c4:	11 f0       	breq	.+4      	; 0x12ca <scroll_display+0x158>
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <scroll_display+0x15e>
    12ca:	91 e0       	ldi	r25, 0x01	; 1
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <scroll_display+0x15e>
    12ce:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	99 23       	and	r25, r25
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <scroll_display+0x16e>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    12da:	00 23       	and	r16, r16
    12dc:	a1 f3       	breq	.-24     	; 0x12c6 <scroll_display+0x154>
    12de:	f7 cf       	rjmp	.-18     	; 0x12ce <scroll_display+0x15c>
	return !finished;
}
    12e0:	28 96       	adiw	r28, 0x08	; 8
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	f8 94       	cli
    12e6:	de bf       	out	0x3e, r29	; 62
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	cd bf       	out	0x3d, r28	; 61
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    12f6:	cf 93       	push	r28
    12f8:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    12fa:	8a 30       	cpi	r24, 0x0A	; 10
    12fc:	19 f4       	brne	.+6      	; 0x1304 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    12fe:	8d e0       	ldi	r24, 0x0D	; 13
    1300:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1304:	9f b7       	in	r25, 0x3f	; 63
    1306:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1308:	02 c0       	rjmp	.+4      	; 0x130e <uart_put_char+0x18>
		if(!interrupts_enabled) {
    130a:	99 23       	and	r25, r25
    130c:	29 f1       	breq	.+74     	; 0x1358 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    130e:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <bytes_in_out_buffer>
    1312:	8f 3f       	cpi	r24, 0xFF	; 255
    1314:	d1 f3       	breq	.-12     	; 0x130a <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1316:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1318:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <out_insert_pos>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	8e 0f       	add	r24, r30
    1320:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <out_insert_pos>
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	e4 57       	subi	r30, 0x74	; 116
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    132c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <bytes_in_out_buffer>
    1330:	8f 5f       	subi	r24, 0xFF	; 255
    1332:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1336:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <out_insert_pos>
    133a:	8f 3f       	cpi	r24, 0xFF	; 255
    133c:	11 f4       	brne	.+4      	; 0x1342 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    133e:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1342:	e1 ec       	ldi	r30, 0xC1	; 193
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 62       	ori	r24, 0x20	; 32
    134a:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    134c:	99 23       	and	r25, r25
    134e:	39 f0       	breq	.+14     	; 0x135e <uart_put_char+0x68>
		sei();
    1350:	78 94       	sei
	}
	return 0;
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	05 c0       	rjmp	.+10     	; 0x1362 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
}
    1362:	cf 91       	pop	r28
    1364:	08 95       	ret

00001366 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1366:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <bytes_in_input_buffer>
    136a:	88 23       	and	r24, r24
    136c:	e1 f3       	breq	.-8      	; 0x1366 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    136e:	2f b7       	in	r18, 0x3f	; 63
    1370:	20 78       	andi	r18, 0x80	; 128
	cli();
    1372:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1374:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <input_insert_pos>
    1378:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <bytes_in_input_buffer>
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	83 1b       	sub	r24, r19
    1380:	91 09       	sbc	r25, r1
    1382:	5a f4       	brpl	.+22     	; 0x139a <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1384:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <input_insert_pos>
    1388:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	e8 1b       	sub	r30, r24
    1390:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1392:	e4 56       	subi	r30, 0x64	; 100
    1394:	fd 4f       	sbci	r31, 0xFD	; 253
    1396:	80 81       	ld	r24, Z
    1398:	0a c0       	rjmp	.+20     	; 0x13ae <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    139a:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <input_insert_pos>
    139e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <bytes_in_input_buffer>
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	e8 1b       	sub	r30, r24
    13a6:	f1 09       	sbc	r31, r1
    13a8:	e4 57       	subi	r30, 0x74	; 116
    13aa:	fd 4f       	sbci	r31, 0xFD	; 253
    13ac:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    13ae:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <bytes_in_input_buffer>
    13b2:	91 50       	subi	r25, 0x01	; 1
    13b4:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <bytes_in_input_buffer>
	if(interrupts_enabled) {
    13b8:	22 23       	and	r18, r18
    13ba:	09 f0       	breq	.+2      	; 0x13be <uart_get_char+0x58>
		sei();
    13bc:	78 94       	sei
	}	
	return c;
}
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	08 95       	ret

000013c2 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    13c2:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <out_insert_pos>
	bytes_in_out_buffer = 0;
    13c6:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <bytes_in_out_buffer>
	input_insert_pos = 0;
    13ca:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <input_insert_pos>
	bytes_in_input_buffer = 0;
    13ce:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <bytes_in_input_buffer>
	input_overrun = 0;
    13d2:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    13d6:	40 93 62 01 	sts	0x0162, r20	; 0x800162 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	aa 1f       	adc	r26, r26
    13e4:	bb 1f       	adc	r27, r27
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	aa 1f       	adc	r26, r26
    13ec:	bb 1f       	adc	r27, r27
    13ee:	9c 01       	movw	r18, r24
    13f0:	ad 01       	movw	r20, r26
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	44 1f       	adc	r20, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	72 e1       	ldi	r23, 0x12	; 18
    13fe:	8a e7       	ldi	r24, 0x7A	; 122
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 19 0c 	call	0x1832	; 0x1832 <__divmodsi4>
    1406:	ba 01       	movw	r22, r20
    1408:	a9 01       	movw	r20, r18
    140a:	4f 5f       	subi	r20, 0xFF	; 255
    140c:	5f 4f       	sbci	r21, 0xFF	; 255
    140e:	6f 4f       	sbci	r22, 0xFF	; 255
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	db 01       	movw	r26, r22
    1414:	ca 01       	movw	r24, r20
    1416:	1a f4       	brpl	.+6      	; 0x141e <init_serial_stdio+0x5c>
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	a1 1d       	adc	r26, r1
    141c:	b1 1d       	adc	r27, r1
    141e:	b5 95       	asr	r27
    1420:	a7 95       	ror	r26
    1422:	97 95       	ror	r25
    1424:	87 95       	ror	r24
    1426:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1428:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    142c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1430:	e1 ec       	ldi	r30, 0xC1	; 193
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	88 e1       	ldi	r24, 0x18	; 24
    1436:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1438:	80 81       	ld	r24, Z
    143a:	80 68       	ori	r24, 0x80	; 128
    143c:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    143e:	e6 ea       	ldi	r30, 0xA6	; 166
    1440:	f2 e0       	ldi	r31, 0x02	; 2
    1442:	85 e0       	ldi	r24, 0x05	; 5
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	93 83       	std	Z+3, r25	; 0x03
    1448:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
    144e:	08 95       	ret

00001450 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1450:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <bytes_in_input_buffer>
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	91 11       	cpse	r25, r1
    1458:	01 c0       	rjmp	.+2      	; 0x145c <serial_input_available+0xc>
    145a:	80 e0       	ldi	r24, 0x00	; 0
}
    145c:	08 95       	ret

0000145e <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    145e:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <input_insert_pos>
	bytes_in_input_buffer = 0;
    1462:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <bytes_in_input_buffer>
    1466:	08 95       	ret

00001468 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1468:	1f 92       	push	r1
    146a:	0f 92       	push	r0
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	0f 92       	push	r0
    1470:	11 24       	eor	r1, r1
    1472:	2f 93       	push	r18
    1474:	8f 93       	push	r24
    1476:	9f 93       	push	r25
    1478:	ef 93       	push	r30
    147a:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    147c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <bytes_in_out_buffer>
    1480:	88 23       	and	r24, r24
    1482:	29 f1       	breq	.+74     	; 0x14ce <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1484:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <out_insert_pos>
    1488:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <bytes_in_out_buffer>
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	82 1b       	sub	r24, r18
    1490:	91 09       	sbc	r25, r1
    1492:	5a f4       	brpl	.+22     	; 0x14aa <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1494:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <out_insert_pos>
    1498:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	e8 1b       	sub	r30, r24
    14a0:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    14a2:	e5 57       	subi	r30, 0x75	; 117
    14a4:	fd 4f       	sbci	r31, 0xFD	; 253
    14a6:	90 81       	ld	r25, Z
    14a8:	0a c0       	rjmp	.+20     	; 0x14be <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    14aa:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <out_insert_pos>
    14ae:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <bytes_in_out_buffer>
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	e8 1b       	sub	r30, r24
    14b6:	f1 09       	sbc	r31, r1
    14b8:	e4 57       	subi	r30, 0x74	; 116
    14ba:	fe 4f       	sbci	r31, 0xFE	; 254
    14bc:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    14be:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <bytes_in_out_buffer>
    14c2:	81 50       	subi	r24, 0x01	; 1
    14c4:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    14c8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14cc:	05 c0       	rjmp	.+10     	; 0x14d8 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    14ce:	e1 ec       	ldi	r30, 0xC1	; 193
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 7d       	andi	r24, 0xDF	; 223
    14d6:	80 83       	st	Z, r24
	}
}
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	9f 91       	pop	r25
    14de:	8f 91       	pop	r24
    14e0:	2f 91       	pop	r18
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti

000014ec <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    14ec:	1f 92       	push	r1
    14ee:	0f 92       	push	r0
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	0f 92       	push	r0
    14f4:	11 24       	eor	r1, r1
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	6f 93       	push	r22
    1500:	7f 93       	push	r23
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	cf 93       	push	r28
    150c:	ef 93       	push	r30
    150e:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1510:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1514:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <do_echo>
    1518:	88 23       	and	r24, r24
    151a:	49 f0       	breq	.+18     	; 0x152e <__vector_20+0x42>
    151c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <bytes_in_out_buffer>
    1520:	8f 3f       	cpi	r24, 0xFF	; 255
    1522:	29 f0       	breq	.+10     	; 0x152e <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	8c 2f       	mov	r24, r28
    152a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    152e:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <bytes_in_input_buffer>
    1532:	80 31       	cpi	r24, 0x10	; 16
    1534:	20 f0       	brcs	.+8      	; 0x153e <__vector_20+0x52>
		input_overrun = 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <input_overrun>
    153c:	18 c0       	rjmp	.+48     	; 0x156e <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    153e:	cd 30       	cpi	r28, 0x0D	; 13
    1540:	09 f4       	brne	.+2      	; 0x1544 <__vector_20+0x58>
			c = '\n';
    1542:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1544:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <input_insert_pos>
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	8e 0f       	add	r24, r30
    154c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <input_insert_pos>
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	e4 57       	subi	r30, 0x74	; 116
    1554:	fd 4f       	sbci	r31, 0xFD	; 253
    1556:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1558:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <bytes_in_input_buffer>
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1562:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <input_insert_pos>
    1566:	80 31       	cpi	r24, 0x10	; 16
    1568:	11 f4       	brne	.+4      	; 0x156e <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    156a:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <input_insert_pos>
		}
	}
}
    156e:	ff 91       	pop	r31
    1570:	ef 91       	pop	r30
    1572:	cf 91       	pop	r28
    1574:	bf 91       	pop	r27
    1576:	af 91       	pop	r26
    1578:	9f 91       	pop	r25
    157a:	8f 91       	pop	r24
    157c:	7f 91       	pop	r23
    157e:	6f 91       	pop	r22
    1580:	5f 91       	pop	r21
    1582:	4f 91       	pop	r20
    1584:	3f 91       	pop	r19
    1586:	2f 91       	pop	r18
    1588:	0f 90       	pop	r0
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	0f 90       	pop	r0
    158e:	1f 90       	pop	r1
    1590:	18 95       	reti

00001592 <init_display>:
uint32_t previous_time;
volatile uint8_t seven_seg_cc;

void init_display(void) {
	// Set Port A to output the digits.
	DDRA = 0xFF;
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	81 b9       	out	0x01, r24	; 1
	// Port C pin 0 to oscillate between digits.
	DDRC = 0xF1;
    1596:	81 ef       	ldi	r24, 0xF1	; 241
    1598:	87 b9       	out	0x07, r24	; 7
	// The side to display on, 0 -> right, 1 -> left
	seven_seg_cc = 0;
    159a:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <seven_seg_cc>
	// Set previous time to a throwaway value.
	previous_time = 0;
    159e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <previous_time>
    15a2:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <previous_time+0x1>
    15a6:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <previous_time+0x2>
    15aa:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <previous_time+0x3>
    15ae:	08 95       	ret

000015b0 <display_data>:
}

void display_data(uint32_t current_time) {
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
	/* Displays the value on the seven segment display. 
	Wraps around at 100. The refresh rate is every 3 milliseconds. 
	Might need to use above method to improve performance.
	*/
	if (current_time >= previous_time + 3) {
    15b4:	00 91 9e 02 	lds	r16, 0x029E	; 0x80029e <previous_time>
    15b8:	10 91 9f 02 	lds	r17, 0x029F	; 0x80029f <previous_time+0x1>
    15bc:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <previous_time+0x2>
    15c0:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <previous_time+0x3>
    15c4:	0d 5f       	subi	r16, 0xFD	; 253
    15c6:	1f 4f       	sbci	r17, 0xFF	; 255
    15c8:	2f 4f       	sbci	r18, 0xFF	; 255
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	60 17       	cp	r22, r16
    15ce:	71 07       	cpc	r23, r17
    15d0:	82 07       	cpc	r24, r18
    15d2:	93 07       	cpc	r25, r19
    15d4:	08 f4       	brcc	.+2      	; 0x15d8 <display_data+0x28>
    15d6:	84 c0       	rjmp	.+264    	; 0x16e0 <display_data+0x130>
		// Save the time to be compared with in future.
		previous_time = current_time;
    15d8:	60 93 9e 02 	sts	0x029E, r22	; 0x80029e <previous_time>
    15dc:	70 93 9f 02 	sts	0x029F, r23	; 0x80029f <previous_time+0x1>
    15e0:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <previous_time+0x2>
    15e4:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <previous_time+0x3>
		// Switch the digit
		if (display_value < 10) {
    15e8:	40 91 a3 02 	lds	r20, 0x02A3	; 0x8002a3 <display_value>
    15ec:	50 91 a4 02 	lds	r21, 0x02A4	; 0x8002a4 <display_value+0x1>
    15f0:	4a 30       	cpi	r20, 0x0A	; 10
    15f2:	51 05       	cpc	r21, r1
    15f4:	00 f5       	brcc	.+64     	; 0x1636 <display_data+0x86>
			seven_seg_cc = 0;
    15f6:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <seven_seg_cc>
			PORTA = seven_seg_data[display_value % 10];
    15fa:	9a 01       	movw	r18, r20
    15fc:	ad ec       	ldi	r26, 0xCD	; 205
    15fe:	bc ec       	ldi	r27, 0xCC	; 204
    1600:	0e 94 38 0c 	call	0x1870	; 0x1870 <__umulhisi3>
    1604:	96 95       	lsr	r25
    1606:	87 95       	ror	r24
    1608:	96 95       	lsr	r25
    160a:	87 95       	ror	r24
    160c:	96 95       	lsr	r25
    160e:	87 95       	ror	r24
    1610:	9c 01       	movw	r18, r24
    1612:	22 0f       	add	r18, r18
    1614:	33 1f       	adc	r19, r19
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	48 1b       	sub	r20, r24
    1628:	59 0b       	sbc	r21, r25
    162a:	fa 01       	movw	r30, r20
    162c:	ed 5e       	subi	r30, 0xED	; 237
    162e:	fe 4f       	sbci	r31, 0xFE	; 254
    1630:	80 81       	ld	r24, Z
    1632:	82 b9       	out	0x02, r24	; 2
    1634:	4f c0       	rjmp	.+158    	; 0x16d4 <display_data+0x124>
		} else {
			seven_seg_cc = 1 - seven_seg_cc;
    1636:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <seven_seg_cc>
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	89 1b       	sub	r24, r25
    163e:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <seven_seg_cc>
			if (seven_seg_cc == 0) {
    1642:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <seven_seg_cc>
    1646:	81 11       	cpse	r24, r1
    1648:	1e c0       	rjmp	.+60     	; 0x1686 <display_data+0xd6>
				// Set the first digit
				PORTA = seven_seg_data[display_value % 10];
    164a:	9a 01       	movw	r18, r20
    164c:	ad ec       	ldi	r26, 0xCD	; 205
    164e:	bc ec       	ldi	r27, 0xCC	; 204
    1650:	0e 94 38 0c 	call	0x1870	; 0x1870 <__umulhisi3>
    1654:	96 95       	lsr	r25
    1656:	87 95       	ror	r24
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	9c 01       	movw	r18, r24
    1662:	22 0f       	add	r18, r18
    1664:	33 1f       	adc	r19, r19
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	82 0f       	add	r24, r18
    1674:	93 1f       	adc	r25, r19
    1676:	48 1b       	sub	r20, r24
    1678:	59 0b       	sbc	r21, r25
    167a:	fa 01       	movw	r30, r20
    167c:	ed 5e       	subi	r30, 0xED	; 237
    167e:	fe 4f       	sbci	r31, 0xFE	; 254
    1680:	80 81       	ld	r24, Z
    1682:	82 b9       	out	0x02, r24	; 2
    1684:	27 c0       	rjmp	.+78     	; 0x16d4 <display_data+0x124>
			} else {
				// Set the second digit
				PORTA = seven_seg_data[(display_value / 10) % 10];
    1686:	9a 01       	movw	r18, r20
    1688:	ad ec       	ldi	r26, 0xCD	; 205
    168a:	bc ec       	ldi	r27, 0xCC	; 204
    168c:	0e 94 38 0c 	call	0x1870	; 0x1870 <__umulhisi3>
    1690:	ac 01       	movw	r20, r24
    1692:	56 95       	lsr	r21
    1694:	47 95       	ror	r20
    1696:	56 95       	lsr	r21
    1698:	47 95       	ror	r20
    169a:	56 95       	lsr	r21
    169c:	47 95       	ror	r20
    169e:	9a 01       	movw	r18, r20
    16a0:	0e 94 38 0c 	call	0x1870	; 0x1870 <__umulhisi3>
    16a4:	96 95       	lsr	r25
    16a6:	87 95       	ror	r24
    16a8:	96 95       	lsr	r25
    16aa:	87 95       	ror	r24
    16ac:	96 95       	lsr	r25
    16ae:	87 95       	ror	r24
    16b0:	9c 01       	movw	r18, r24
    16b2:	22 0f       	add	r18, r18
    16b4:	33 1f       	adc	r19, r19
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	82 0f       	add	r24, r18
    16c4:	93 1f       	adc	r25, r19
    16c6:	48 1b       	sub	r20, r24
    16c8:	59 0b       	sbc	r21, r25
    16ca:	fa 01       	movw	r30, r20
    16cc:	ed 5e       	subi	r30, 0xED	; 237
    16ce:	fe 4f       	sbci	r31, 0xFE	; 254
    16d0:	80 81       	ld	r24, Z
    16d2:	82 b9       	out	0x02, r24	; 2
			}
		}
		/* Output the digit selection (CC) bit */
		PORTC = (PORTC & ~1) | seven_seg_cc;
    16d4:	88 b1       	in	r24, 0x08	; 8
    16d6:	90 91 a2 02 	lds	r25, 0x02A2	; 0x8002a2 <seven_seg_cc>
    16da:	8e 7f       	andi	r24, 0xFE	; 254
    16dc:	89 2b       	or	r24, r25
    16de:	88 b9       	out	0x08, r24	; 8
	}
}
    16e0:	1f 91       	pop	r17
    16e2:	0f 91       	pop	r16
    16e4:	08 95       	ret

000016e6 <set_value>:


void set_value(uint16_t value) {
	// Set the value (first two digits) on the display
	display_value = value;
    16e6:	90 93 a4 02 	sts	0x02A4, r25	; 0x8002a4 <display_value+0x1>
    16ea:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <display_value>
    16ee:	08 95       	ret

000016f0 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    16f0:	94 b1       	in	r25, 0x04	; 4
    16f2:	90 6b       	ori	r25, 0xB0	; 176
    16f4:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    16f6:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    16f8:	90 e5       	ldi	r25, 0x50	; 80
    16fa:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    16fc:	88 30       	cpi	r24, 0x08	; 8
    16fe:	21 f0       	breq	.+8      	; 0x1708 <spi_setup_master+0x18>
    1700:	80 32       	cpi	r24, 0x20	; 32
    1702:	11 f0       	breq	.+4      	; 0x1708 <spi_setup_master+0x18>
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	19 f4       	brne	.+6      	; 0x170e <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1708:	91 e0       	ldi	r25, 0x01	; 1
    170a:	9d bd       	out	0x2d, r25	; 45
			break;
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    170e:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1710:	80 32       	cpi	r24, 0x20	; 32
    1712:	69 f0       	breq	.+26     	; 0x172e <spi_setup_master+0x3e>
    1714:	28 f4       	brcc	.+10     	; 0x1720 <spi_setup_master+0x30>
    1716:	88 30       	cpi	r24, 0x08	; 8
    1718:	71 f0       	breq	.+28     	; 0x1736 <spi_setup_master+0x46>
    171a:	80 31       	cpi	r24, 0x10	; 16
    171c:	61 f0       	breq	.+24     	; 0x1736 <spi_setup_master+0x46>
    171e:	0e c0       	rjmp	.+28     	; 0x173c <spi_setup_master+0x4c>
    1720:	80 34       	cpi	r24, 0x40	; 64
    1722:	29 f0       	breq	.+10     	; 0x172e <spi_setup_master+0x3e>
    1724:	80 38       	cpi	r24, 0x80	; 128
    1726:	51 f4       	brne	.+20     	; 0x173c <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1728:	8c b5       	in	r24, 0x2c	; 44
    172a:	81 60       	ori	r24, 0x01	; 1
    172c:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    172e:	8c b5       	in	r24, 0x2c	; 44
    1730:	82 60       	ori	r24, 0x02	; 2
    1732:	8c bd       	out	0x2c, r24	; 44
			break;
    1734:	03 c0       	rjmp	.+6      	; 0x173c <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1736:	8c b5       	in	r24, 0x2c	; 44
    1738:	81 60       	ori	r24, 0x01	; 1
    173a:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    173c:	2c 98       	cbi	0x05, 4	; 5
    173e:	08 95       	ret

00001740 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    1740:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1742:	0d b4       	in	r0, 0x2d	; 45
    1744:	07 fe       	sbrs	r0, 7
    1746:	fd cf       	rjmp	.-6      	; 0x1742 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1748:	8e b5       	in	r24, 0x2e	; 46
    174a:	08 95       	ret

0000174c <move_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    174c:	9f 93       	push	r25
    174e:	8f 93       	push	r24
    1750:	7f 93       	push	r23
    1752:	6f 93       	push	r22
    1754:	85 e1       	ldi	r24, 0x15	; 21
    1756:	92 e0       	ldi	r25, 0x02	; 2
    1758:	9f 93       	push	r25
    175a:	8f 93       	push	r24
    175c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	08 95       	ret

0000176e <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    176e:	80 e1       	ldi	r24, 0x10	; 16
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	9f 93       	push	r25
    1774:	8f 93       	push	r24
    1776:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <printf_P>
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	08 95       	ret

00001780 <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    1780:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <clockTicks>
    1784:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <clockTicks+0x1>
    1788:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <clockTicks+0x2>
    178c:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <clockTicks+0x3>
	// Enable clockTicks to count.
	stopwatch_timing = 1;
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <stopwatch_timing>
	
	/* Clear the timer */
	TCNT0 = 0;
    1796:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    1798:	8c e7       	ldi	r24, 0x7C	; 124
    179a:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    17a4:	ee e6       	ldi	r30, 0x6E	; 110
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	82 60       	ori	r24, 0x02	; 2
    17ac:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    17ae:	85 b3       	in	r24, 0x15	; 21
    17b0:	82 70       	andi	r24, 0x02	; 2
    17b2:	85 bb       	out	0x15, r24	; 21
    17b4:	08 95       	ret

000017b6 <toggle_timer>:


// Turn the timer on/off. Whilst interrupts will still flag
// Nothing will happen.
void toggle_timer(void) {
	stopwatch_timing = 1 - stopwatch_timing;
    17b6:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <stopwatch_timing>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	89 1b       	sub	r24, r25
    17be:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <stopwatch_timing>
    17c2:	08 95       	ret

000017c4 <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    17c4:	2f b7       	in	r18, 0x3f	; 63
	cli();
    17c6:	f8 94       	cli
	returnValue = clockTicks;
    17c8:	60 91 63 01 	lds	r22, 0x0163	; 0x800163 <clockTicks>
    17cc:	70 91 64 01 	lds	r23, 0x0164	; 0x800164 <clockTicks+0x1>
    17d0:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <clockTicks+0x2>
    17d4:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <clockTicks+0x3>
	if(interruptsOn) {
    17d8:	22 23       	and	r18, r18
    17da:	0c f4       	brge	.+2      	; 0x17de <get_current_time+0x1a>
		sei();
    17dc:	78 94       	sei
	}
	return returnValue;
}
    17de:	08 95       	ret

000017e0 <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    17e0:	1f 92       	push	r1
    17e2:	0f 92       	push	r0
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	0f 92       	push	r0
    17e8:	11 24       	eor	r1, r1
    17ea:	8f 93       	push	r24
    17ec:	9f 93       	push	r25
    17ee:	af 93       	push	r26
    17f0:	bf 93       	push	r27
	/* Increment our clock tick count */
	if (stopwatch_timing) {
    17f2:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <stopwatch_timing>
    17f6:	88 23       	and	r24, r24
    17f8:	99 f0       	breq	.+38     	; 0x1820 <__vector_16+0x40>
		clockTicks++;
    17fa:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <clockTicks>
    17fe:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <clockTicks+0x1>
    1802:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <clockTicks+0x2>
    1806:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <clockTicks+0x3>
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	a1 1d       	adc	r26, r1
    180e:	b1 1d       	adc	r27, r1
    1810:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <clockTicks>
    1814:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <clockTicks+0x1>
    1818:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <clockTicks+0x2>
    181c:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <clockTicks+0x3>
	}
}
    1820:	bf 91       	pop	r27
    1822:	af 91       	pop	r26
    1824:	9f 91       	pop	r25
    1826:	8f 91       	pop	r24
    1828:	0f 90       	pop	r0
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	0f 90       	pop	r0
    182e:	1f 90       	pop	r1
    1830:	18 95       	reti

00001832 <__divmodsi4>:
    1832:	05 2e       	mov	r0, r21
    1834:	97 fb       	bst	r25, 7
    1836:	1e f4       	brtc	.+6      	; 0x183e <__divmodsi4+0xc>
    1838:	00 94       	com	r0
    183a:	0e 94 30 0c 	call	0x1860	; 0x1860 <__negsi2>
    183e:	57 fd       	sbrc	r21, 7
    1840:	07 d0       	rcall	.+14     	; 0x1850 <__divmodsi4_neg2>
    1842:	0e 94 47 0c 	call	0x188e	; 0x188e <__udivmodsi4>
    1846:	07 fc       	sbrc	r0, 7
    1848:	03 d0       	rcall	.+6      	; 0x1850 <__divmodsi4_neg2>
    184a:	4e f4       	brtc	.+18     	; 0x185e <__divmodsi4_exit>
    184c:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__negsi2>

00001850 <__divmodsi4_neg2>:
    1850:	50 95       	com	r21
    1852:	40 95       	com	r20
    1854:	30 95       	com	r19
    1856:	21 95       	neg	r18
    1858:	3f 4f       	sbci	r19, 0xFF	; 255
    185a:	4f 4f       	sbci	r20, 0xFF	; 255
    185c:	5f 4f       	sbci	r21, 0xFF	; 255

0000185e <__divmodsi4_exit>:
    185e:	08 95       	ret

00001860 <__negsi2>:
    1860:	90 95       	com	r25
    1862:	80 95       	com	r24
    1864:	70 95       	com	r23
    1866:	61 95       	neg	r22
    1868:	7f 4f       	sbci	r23, 0xFF	; 255
    186a:	8f 4f       	sbci	r24, 0xFF	; 255
    186c:	9f 4f       	sbci	r25, 0xFF	; 255
    186e:	08 95       	ret

00001870 <__umulhisi3>:
    1870:	a2 9f       	mul	r26, r18
    1872:	b0 01       	movw	r22, r0
    1874:	b3 9f       	mul	r27, r19
    1876:	c0 01       	movw	r24, r0
    1878:	a3 9f       	mul	r26, r19
    187a:	70 0d       	add	r23, r0
    187c:	81 1d       	adc	r24, r1
    187e:	11 24       	eor	r1, r1
    1880:	91 1d       	adc	r25, r1
    1882:	b2 9f       	mul	r27, r18
    1884:	70 0d       	add	r23, r0
    1886:	81 1d       	adc	r24, r1
    1888:	11 24       	eor	r1, r1
    188a:	91 1d       	adc	r25, r1
    188c:	08 95       	ret

0000188e <__udivmodsi4>:
    188e:	a1 e2       	ldi	r26, 0x21	; 33
    1890:	1a 2e       	mov	r1, r26
    1892:	aa 1b       	sub	r26, r26
    1894:	bb 1b       	sub	r27, r27
    1896:	fd 01       	movw	r30, r26
    1898:	0d c0       	rjmp	.+26     	; 0x18b4 <__udivmodsi4_ep>

0000189a <__udivmodsi4_loop>:
    189a:	aa 1f       	adc	r26, r26
    189c:	bb 1f       	adc	r27, r27
    189e:	ee 1f       	adc	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	a2 17       	cp	r26, r18
    18a4:	b3 07       	cpc	r27, r19
    18a6:	e4 07       	cpc	r30, r20
    18a8:	f5 07       	cpc	r31, r21
    18aa:	20 f0       	brcs	.+8      	; 0x18b4 <__udivmodsi4_ep>
    18ac:	a2 1b       	sub	r26, r18
    18ae:	b3 0b       	sbc	r27, r19
    18b0:	e4 0b       	sbc	r30, r20
    18b2:	f5 0b       	sbc	r31, r21

000018b4 <__udivmodsi4_ep>:
    18b4:	66 1f       	adc	r22, r22
    18b6:	77 1f       	adc	r23, r23
    18b8:	88 1f       	adc	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	1a 94       	dec	r1
    18be:	69 f7       	brne	.-38     	; 0x189a <__udivmodsi4_loop>
    18c0:	60 95       	com	r22
    18c2:	70 95       	com	r23
    18c4:	80 95       	com	r24
    18c6:	90 95       	com	r25
    18c8:	9b 01       	movw	r18, r22
    18ca:	ac 01       	movw	r20, r24
    18cc:	bd 01       	movw	r22, r26
    18ce:	cf 01       	movw	r24, r30
    18d0:	08 95       	ret

000018d2 <random_r>:
    18d2:	8f 92       	push	r8
    18d4:	9f 92       	push	r9
    18d6:	af 92       	push	r10
    18d8:	bf 92       	push	r11
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	ec 01       	movw	r28, r24
    18e8:	68 81       	ld	r22, Y
    18ea:	79 81       	ldd	r23, Y+1	; 0x01
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	9b 81       	ldd	r25, Y+3	; 0x03
    18f0:	61 15       	cp	r22, r1
    18f2:	71 05       	cpc	r23, r1
    18f4:	81 05       	cpc	r24, r1
    18f6:	91 05       	cpc	r25, r1
    18f8:	21 f4       	brne	.+8      	; 0x1902 <random_r+0x30>
    18fa:	64 e2       	ldi	r22, 0x24	; 36
    18fc:	79 ed       	ldi	r23, 0xD9	; 217
    18fe:	8b e5       	ldi	r24, 0x5B	; 91
    1900:	97 e0       	ldi	r25, 0x07	; 7
    1902:	2d e1       	ldi	r18, 0x1D	; 29
    1904:	33 ef       	ldi	r19, 0xF3	; 243
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	0e 94 19 0c 	call	0x1832	; 0x1832 <__divmodsi4>
    190e:	49 01       	movw	r8, r18
    1910:	5a 01       	movw	r10, r20
    1912:	9b 01       	movw	r18, r22
    1914:	ac 01       	movw	r20, r24
    1916:	a7 ea       	ldi	r26, 0xA7	; 167
    1918:	b1 e4       	ldi	r27, 0x41	; 65
    191a:	0e 94 00 10 	call	0x2000	; 0x2000 <__muluhisi3>
    191e:	6b 01       	movw	r12, r22
    1920:	7c 01       	movw	r14, r24
    1922:	ac ee       	ldi	r26, 0xEC	; 236
    1924:	b4 ef       	ldi	r27, 0xF4	; 244
    1926:	a5 01       	movw	r20, r10
    1928:	94 01       	movw	r18, r8
    192a:	0e 94 0e 10 	call	0x201c	; 0x201c <__mulohisi3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	8c 0d       	add	r24, r12
    1934:	9d 1d       	adc	r25, r13
    1936:	ae 1d       	adc	r26, r14
    1938:	bf 1d       	adc	r27, r15
    193a:	b7 ff       	sbrs	r27, 7
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <random_r+0x72>
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	a1 09       	sbc	r26, r1
    1942:	b0 48       	sbci	r27, 0x80	; 128
    1944:	88 83       	st	Y, r24
    1946:	99 83       	std	Y+1, r25	; 0x01
    1948:	aa 83       	std	Y+2, r26	; 0x02
    194a:	bb 83       	std	Y+3, r27	; 0x03
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	9f 77       	andi	r25, 0x7F	; 127
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	9f 90       	pop	r9
    1964:	8f 90       	pop	r8
    1966:	08 95       	ret

00001968 <random>:
    1968:	8f 92       	push	r8
    196a:	9f 92       	push	r9
    196c:	af 92       	push	r10
    196e:	bf 92       	push	r11
    1970:	cf 92       	push	r12
    1972:	df 92       	push	r13
    1974:	ef 92       	push	r14
    1976:	ff 92       	push	r15
    1978:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    197c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1980:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1984:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1988:	61 15       	cp	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	81 05       	cpc	r24, r1
    198e:	91 05       	cpc	r25, r1
    1990:	21 f4       	brne	.+8      	; 0x199a <random+0x32>
    1992:	64 e2       	ldi	r22, 0x24	; 36
    1994:	79 ed       	ldi	r23, 0xD9	; 217
    1996:	8b e5       	ldi	r24, 0x5B	; 91
    1998:	97 e0       	ldi	r25, 0x07	; 7
    199a:	2d e1       	ldi	r18, 0x1D	; 29
    199c:	33 ef       	ldi	r19, 0xF3	; 243
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	0e 94 19 0c 	call	0x1832	; 0x1832 <__divmodsi4>
    19a6:	49 01       	movw	r8, r18
    19a8:	5a 01       	movw	r10, r20
    19aa:	9b 01       	movw	r18, r22
    19ac:	ac 01       	movw	r20, r24
    19ae:	a7 ea       	ldi	r26, 0xA7	; 167
    19b0:	b1 e4       	ldi	r27, 0x41	; 65
    19b2:	0e 94 00 10 	call	0x2000	; 0x2000 <__muluhisi3>
    19b6:	6b 01       	movw	r12, r22
    19b8:	7c 01       	movw	r14, r24
    19ba:	ac ee       	ldi	r26, 0xEC	; 236
    19bc:	b4 ef       	ldi	r27, 0xF4	; 244
    19be:	a5 01       	movw	r20, r10
    19c0:	94 01       	movw	r18, r8
    19c2:	0e 94 0e 10 	call	0x201c	; 0x201c <__mulohisi3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8c 0d       	add	r24, r12
    19cc:	9d 1d       	adc	r25, r13
    19ce:	ae 1d       	adc	r26, r14
    19d0:	bf 1d       	adc	r27, r15
    19d2:	b7 ff       	sbrs	r27, 7
    19d4:	03 c0       	rjmp	.+6      	; 0x19dc <random+0x74>
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	a1 09       	sbc	r26, r1
    19da:	b0 48       	sbci	r27, 0x80	; 128
    19dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    19e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    19e4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    19e8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	9f 77       	andi	r25, 0x7F	; 127
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	df 90       	pop	r13
    19f8:	cf 90       	pop	r12
    19fa:	bf 90       	pop	r11
    19fc:	af 90       	pop	r10
    19fe:	9f 90       	pop	r9
    1a00:	8f 90       	pop	r8
    1a02:	08 95       	ret

00001a04 <srandom>:
    1a04:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1a08:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1a0c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1a10:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    1a14:	08 95       	ret

00001a16 <fgetc>:
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	ec 01       	movw	r28, r24
    1a1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a1e:	20 ff       	sbrs	r18, 0
    1a20:	33 c0       	rjmp	.+102    	; 0x1a88 <fgetc+0x72>
    1a22:	26 ff       	sbrs	r18, 6
    1a24:	0a c0       	rjmp	.+20     	; 0x1a3a <fgetc+0x24>
    1a26:	2f 7b       	andi	r18, 0xBF	; 191
    1a28:	2b 83       	std	Y+3, r18	; 0x03
    1a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	9f 83       	std	Y+7, r25	; 0x07
    1a32:	8e 83       	std	Y+6, r24	; 0x06
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	29 c0       	rjmp	.+82     	; 0x1a8c <fgetc+0x76>
    1a3a:	22 ff       	sbrs	r18, 2
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <fgetc+0x46>
    1a3e:	e8 81       	ld	r30, Y
    1a40:	f9 81       	ldd	r31, Y+1	; 0x01
    1a42:	80 81       	ld	r24, Z
    1a44:	08 2e       	mov	r0, r24
    1a46:	00 0c       	add	r0, r0
    1a48:	99 0b       	sbc	r25, r25
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	19 f4       	brne	.+6      	; 0x1a54 <fgetc+0x3e>
    1a4e:	20 62       	ori	r18, 0x20	; 32
    1a50:	2b 83       	std	Y+3, r18	; 0x03
    1a52:	1a c0       	rjmp	.+52     	; 0x1a88 <fgetc+0x72>
    1a54:	31 96       	adiw	r30, 0x01	; 1
    1a56:	f9 83       	std	Y+1, r31	; 0x01
    1a58:	e8 83       	st	Y, r30
    1a5a:	0e c0       	rjmp	.+28     	; 0x1a78 <fgetc+0x62>
    1a5c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a5e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1a60:	09 95       	icall
    1a62:	97 ff       	sbrs	r25, 7
    1a64:	09 c0       	rjmp	.+18     	; 0x1a78 <fgetc+0x62>
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	11 f0       	breq	.+4      	; 0x1a70 <fgetc+0x5a>
    1a6c:	80 e2       	ldi	r24, 0x20	; 32
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <fgetc+0x5c>
    1a70:	80 e1       	ldi	r24, 0x10	; 16
    1a72:	82 2b       	or	r24, r18
    1a74:	8b 83       	std	Y+3, r24	; 0x03
    1a76:	08 c0       	rjmp	.+16     	; 0x1a88 <fgetc+0x72>
    1a78:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a7c:	2f 5f       	subi	r18, 0xFF	; 255
    1a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a80:	3f 83       	std	Y+7, r19	; 0x07
    1a82:	2e 83       	std	Y+6, r18	; 0x06
    1a84:	99 27       	eor	r25, r25
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <fgetc+0x76>
    1a88:	8f ef       	ldi	r24, 0xFF	; 255
    1a8a:	9f ef       	ldi	r25, 0xFF	; 255
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <printf_P>:
    1a92:	a0 e0       	ldi	r26, 0x00	; 0
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ef e4       	ldi	r30, 0x4F	; 79
    1a98:	fd e0       	ldi	r31, 0x0D	; 13
    1a9a:	0c 94 21 10 	jmp	0x2042	; 0x2042 <__prologue_saves__+0x1c>
    1a9e:	ae 01       	movw	r20, r28
    1aa0:	49 5f       	subi	r20, 0xF9	; 249
    1aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa4:	da 01       	movw	r26, r20
    1aa6:	6d 91       	ld	r22, X+
    1aa8:	7d 91       	ld	r23, X+
    1aaa:	ad 01       	movw	r20, r26
    1aac:	06 ea       	ldi	r16, 0xA6	; 166
    1aae:	12 e0       	ldi	r17, 0x02	; 2
    1ab0:	f8 01       	movw	r30, r16
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	13 96       	adiw	r26, 0x03	; 3
    1aba:	2c 91       	ld	r18, X
    1abc:	13 97       	sbiw	r26, 0x03	; 3
    1abe:	28 60       	ori	r18, 0x08	; 8
    1ac0:	13 96       	adiw	r26, 0x03	; 3
    1ac2:	2c 93       	st	X, r18
    1ac4:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <vfprintf>
    1ac8:	d8 01       	movw	r26, r16
    1aca:	12 96       	adiw	r26, 0x02	; 2
    1acc:	ed 91       	ld	r30, X+
    1ace:	fc 91       	ld	r31, X
    1ad0:	13 97       	sbiw	r26, 0x03	; 3
    1ad2:	23 81       	ldd	r18, Z+3	; 0x03
    1ad4:	27 7f       	andi	r18, 0xF7	; 247
    1ad6:	23 83       	std	Z+3, r18	; 0x03
    1ad8:	e4 e0       	ldi	r30, 0x04	; 4
    1ada:	0c 94 3d 10 	jmp	0x207a	; 0x207a <__epilogue_restores__+0x1c>

00001ade <vfprintf>:
    1ade:	ab e0       	ldi	r26, 0x0B	; 11
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e5 e7       	ldi	r30, 0x75	; 117
    1ae4:	fd e0       	ldi	r31, 0x0D	; 13
    1ae6:	0c 94 13 10 	jmp	0x2026	; 0x2026 <__prologue_saves__>
    1aea:	6c 01       	movw	r12, r24
    1aec:	7b 01       	movw	r14, r22
    1aee:	8a 01       	movw	r16, r20
    1af0:	fc 01       	movw	r30, r24
    1af2:	17 82       	std	Z+7, r1	; 0x07
    1af4:	16 82       	std	Z+6, r1	; 0x06
    1af6:	83 81       	ldd	r24, Z+3	; 0x03
    1af8:	81 ff       	sbrs	r24, 1
    1afa:	cc c1       	rjmp	.+920    	; 0x1e94 <vfprintf+0x3b6>
    1afc:	ce 01       	movw	r24, r28
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	3c 01       	movw	r6, r24
    1b02:	f6 01       	movw	r30, r12
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	f7 01       	movw	r30, r14
    1b08:	93 fd       	sbrc	r25, 3
    1b0a:	85 91       	lpm	r24, Z+
    1b0c:	93 ff       	sbrs	r25, 3
    1b0e:	81 91       	ld	r24, Z+
    1b10:	7f 01       	movw	r14, r30
    1b12:	88 23       	and	r24, r24
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <vfprintf+0x3a>
    1b16:	ba c1       	rjmp	.+884    	; 0x1e8c <vfprintf+0x3ae>
    1b18:	85 32       	cpi	r24, 0x25	; 37
    1b1a:	39 f4       	brne	.+14     	; 0x1b2a <vfprintf+0x4c>
    1b1c:	93 fd       	sbrc	r25, 3
    1b1e:	85 91       	lpm	r24, Z+
    1b20:	93 ff       	sbrs	r25, 3
    1b22:	81 91       	ld	r24, Z+
    1b24:	7f 01       	movw	r14, r30
    1b26:	85 32       	cpi	r24, 0x25	; 37
    1b28:	29 f4       	brne	.+10     	; 0x1b34 <vfprintf+0x56>
    1b2a:	b6 01       	movw	r22, r12
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <fputc>
    1b32:	e7 cf       	rjmp	.-50     	; 0x1b02 <vfprintf+0x24>
    1b34:	91 2c       	mov	r9, r1
    1b36:	21 2c       	mov	r2, r1
    1b38:	31 2c       	mov	r3, r1
    1b3a:	ff e1       	ldi	r31, 0x1F	; 31
    1b3c:	f3 15       	cp	r31, r3
    1b3e:	d8 f0       	brcs	.+54     	; 0x1b76 <vfprintf+0x98>
    1b40:	8b 32       	cpi	r24, 0x2B	; 43
    1b42:	79 f0       	breq	.+30     	; 0x1b62 <vfprintf+0x84>
    1b44:	38 f4       	brcc	.+14     	; 0x1b54 <vfprintf+0x76>
    1b46:	80 32       	cpi	r24, 0x20	; 32
    1b48:	79 f0       	breq	.+30     	; 0x1b68 <vfprintf+0x8a>
    1b4a:	83 32       	cpi	r24, 0x23	; 35
    1b4c:	a1 f4       	brne	.+40     	; 0x1b76 <vfprintf+0x98>
    1b4e:	23 2d       	mov	r18, r3
    1b50:	20 61       	ori	r18, 0x10	; 16
    1b52:	1d c0       	rjmp	.+58     	; 0x1b8e <vfprintf+0xb0>
    1b54:	8d 32       	cpi	r24, 0x2D	; 45
    1b56:	61 f0       	breq	.+24     	; 0x1b70 <vfprintf+0x92>
    1b58:	80 33       	cpi	r24, 0x30	; 48
    1b5a:	69 f4       	brne	.+26     	; 0x1b76 <vfprintf+0x98>
    1b5c:	23 2d       	mov	r18, r3
    1b5e:	21 60       	ori	r18, 0x01	; 1
    1b60:	16 c0       	rjmp	.+44     	; 0x1b8e <vfprintf+0xb0>
    1b62:	83 2d       	mov	r24, r3
    1b64:	82 60       	ori	r24, 0x02	; 2
    1b66:	38 2e       	mov	r3, r24
    1b68:	e3 2d       	mov	r30, r3
    1b6a:	e4 60       	ori	r30, 0x04	; 4
    1b6c:	3e 2e       	mov	r3, r30
    1b6e:	2a c0       	rjmp	.+84     	; 0x1bc4 <vfprintf+0xe6>
    1b70:	f3 2d       	mov	r31, r3
    1b72:	f8 60       	ori	r31, 0x08	; 8
    1b74:	1d c0       	rjmp	.+58     	; 0x1bb0 <vfprintf+0xd2>
    1b76:	37 fc       	sbrc	r3, 7
    1b78:	2d c0       	rjmp	.+90     	; 0x1bd4 <vfprintf+0xf6>
    1b7a:	20 ed       	ldi	r18, 0xD0	; 208
    1b7c:	28 0f       	add	r18, r24
    1b7e:	2a 30       	cpi	r18, 0x0A	; 10
    1b80:	40 f0       	brcs	.+16     	; 0x1b92 <vfprintf+0xb4>
    1b82:	8e 32       	cpi	r24, 0x2E	; 46
    1b84:	b9 f4       	brne	.+46     	; 0x1bb4 <vfprintf+0xd6>
    1b86:	36 fc       	sbrc	r3, 6
    1b88:	81 c1       	rjmp	.+770    	; 0x1e8c <vfprintf+0x3ae>
    1b8a:	23 2d       	mov	r18, r3
    1b8c:	20 64       	ori	r18, 0x40	; 64
    1b8e:	32 2e       	mov	r3, r18
    1b90:	19 c0       	rjmp	.+50     	; 0x1bc4 <vfprintf+0xe6>
    1b92:	36 fe       	sbrs	r3, 6
    1b94:	06 c0       	rjmp	.+12     	; 0x1ba2 <vfprintf+0xc4>
    1b96:	8a e0       	ldi	r24, 0x0A	; 10
    1b98:	98 9e       	mul	r9, r24
    1b9a:	20 0d       	add	r18, r0
    1b9c:	11 24       	eor	r1, r1
    1b9e:	92 2e       	mov	r9, r18
    1ba0:	11 c0       	rjmp	.+34     	; 0x1bc4 <vfprintf+0xe6>
    1ba2:	ea e0       	ldi	r30, 0x0A	; 10
    1ba4:	2e 9e       	mul	r2, r30
    1ba6:	20 0d       	add	r18, r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	22 2e       	mov	r2, r18
    1bac:	f3 2d       	mov	r31, r3
    1bae:	f0 62       	ori	r31, 0x20	; 32
    1bb0:	3f 2e       	mov	r3, r31
    1bb2:	08 c0       	rjmp	.+16     	; 0x1bc4 <vfprintf+0xe6>
    1bb4:	8c 36       	cpi	r24, 0x6C	; 108
    1bb6:	21 f4       	brne	.+8      	; 0x1bc0 <vfprintf+0xe2>
    1bb8:	83 2d       	mov	r24, r3
    1bba:	80 68       	ori	r24, 0x80	; 128
    1bbc:	38 2e       	mov	r3, r24
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <vfprintf+0xe6>
    1bc0:	88 36       	cpi	r24, 0x68	; 104
    1bc2:	41 f4       	brne	.+16     	; 0x1bd4 <vfprintf+0xf6>
    1bc4:	f7 01       	movw	r30, r14
    1bc6:	93 fd       	sbrc	r25, 3
    1bc8:	85 91       	lpm	r24, Z+
    1bca:	93 ff       	sbrs	r25, 3
    1bcc:	81 91       	ld	r24, Z+
    1bce:	7f 01       	movw	r14, r30
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	b3 cf       	rjmp	.-154    	; 0x1b3a <vfprintf+0x5c>
    1bd4:	98 2f       	mov	r25, r24
    1bd6:	9f 7d       	andi	r25, 0xDF	; 223
    1bd8:	95 54       	subi	r25, 0x45	; 69
    1bda:	93 30       	cpi	r25, 0x03	; 3
    1bdc:	28 f4       	brcc	.+10     	; 0x1be8 <vfprintf+0x10a>
    1bde:	0c 5f       	subi	r16, 0xFC	; 252
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	9f e3       	ldi	r25, 0x3F	; 63
    1be4:	99 83       	std	Y+1, r25	; 0x01
    1be6:	0d c0       	rjmp	.+26     	; 0x1c02 <vfprintf+0x124>
    1be8:	83 36       	cpi	r24, 0x63	; 99
    1bea:	31 f0       	breq	.+12     	; 0x1bf8 <vfprintf+0x11a>
    1bec:	83 37       	cpi	r24, 0x73	; 115
    1bee:	71 f0       	breq	.+28     	; 0x1c0c <vfprintf+0x12e>
    1bf0:	83 35       	cpi	r24, 0x53	; 83
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <vfprintf+0x118>
    1bf4:	59 c0       	rjmp	.+178    	; 0x1ca8 <vfprintf+0x1ca>
    1bf6:	21 c0       	rjmp	.+66     	; 0x1c3a <vfprintf+0x15c>
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	80 81       	ld	r24, Z
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	0e 5f       	subi	r16, 0xFE	; 254
    1c00:	1f 4f       	sbci	r17, 0xFF	; 255
    1c02:	88 24       	eor	r8, r8
    1c04:	83 94       	inc	r8
    1c06:	91 2c       	mov	r9, r1
    1c08:	53 01       	movw	r10, r6
    1c0a:	13 c0       	rjmp	.+38     	; 0x1c32 <vfprintf+0x154>
    1c0c:	28 01       	movw	r4, r16
    1c0e:	f2 e0       	ldi	r31, 0x02	; 2
    1c10:	4f 0e       	add	r4, r31
    1c12:	51 1c       	adc	r5, r1
    1c14:	f8 01       	movw	r30, r16
    1c16:	a0 80       	ld	r10, Z
    1c18:	b1 80       	ldd	r11, Z+1	; 0x01
    1c1a:	36 fe       	sbrs	r3, 6
    1c1c:	03 c0       	rjmp	.+6      	; 0x1c24 <vfprintf+0x146>
    1c1e:	69 2d       	mov	r22, r9
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <vfprintf+0x14a>
    1c24:	6f ef       	ldi	r22, 0xFF	; 255
    1c26:	7f ef       	ldi	r23, 0xFF	; 255
    1c28:	c5 01       	movw	r24, r10
    1c2a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <strnlen>
    1c2e:	4c 01       	movw	r8, r24
    1c30:	82 01       	movw	r16, r4
    1c32:	f3 2d       	mov	r31, r3
    1c34:	ff 77       	andi	r31, 0x7F	; 127
    1c36:	3f 2e       	mov	r3, r31
    1c38:	16 c0       	rjmp	.+44     	; 0x1c66 <vfprintf+0x188>
    1c3a:	28 01       	movw	r4, r16
    1c3c:	22 e0       	ldi	r18, 0x02	; 2
    1c3e:	42 0e       	add	r4, r18
    1c40:	51 1c       	adc	r5, r1
    1c42:	f8 01       	movw	r30, r16
    1c44:	a0 80       	ld	r10, Z
    1c46:	b1 80       	ldd	r11, Z+1	; 0x01
    1c48:	36 fe       	sbrs	r3, 6
    1c4a:	03 c0       	rjmp	.+6      	; 0x1c52 <vfprintf+0x174>
    1c4c:	69 2d       	mov	r22, r9
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <vfprintf+0x178>
    1c52:	6f ef       	ldi	r22, 0xFF	; 255
    1c54:	7f ef       	ldi	r23, 0xFF	; 255
    1c56:	c5 01       	movw	r24, r10
    1c58:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <strnlen_P>
    1c5c:	4c 01       	movw	r8, r24
    1c5e:	f3 2d       	mov	r31, r3
    1c60:	f0 68       	ori	r31, 0x80	; 128
    1c62:	3f 2e       	mov	r3, r31
    1c64:	82 01       	movw	r16, r4
    1c66:	33 fc       	sbrc	r3, 3
    1c68:	1b c0       	rjmp	.+54     	; 0x1ca0 <vfprintf+0x1c2>
    1c6a:	82 2d       	mov	r24, r2
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	88 16       	cp	r8, r24
    1c70:	99 06       	cpc	r9, r25
    1c72:	b0 f4       	brcc	.+44     	; 0x1ca0 <vfprintf+0x1c2>
    1c74:	b6 01       	movw	r22, r12
    1c76:	80 e2       	ldi	r24, 0x20	; 32
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <fputc>
    1c7e:	2a 94       	dec	r2
    1c80:	f4 cf       	rjmp	.-24     	; 0x1c6a <vfprintf+0x18c>
    1c82:	f5 01       	movw	r30, r10
    1c84:	37 fc       	sbrc	r3, 7
    1c86:	85 91       	lpm	r24, Z+
    1c88:	37 fe       	sbrs	r3, 7
    1c8a:	81 91       	ld	r24, Z+
    1c8c:	5f 01       	movw	r10, r30
    1c8e:	b6 01       	movw	r22, r12
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <fputc>
    1c96:	21 10       	cpse	r2, r1
    1c98:	2a 94       	dec	r2
    1c9a:	21 e0       	ldi	r18, 0x01	; 1
    1c9c:	82 1a       	sub	r8, r18
    1c9e:	91 08       	sbc	r9, r1
    1ca0:	81 14       	cp	r8, r1
    1ca2:	91 04       	cpc	r9, r1
    1ca4:	71 f7       	brne	.-36     	; 0x1c82 <vfprintf+0x1a4>
    1ca6:	e8 c0       	rjmp	.+464    	; 0x1e78 <vfprintf+0x39a>
    1ca8:	84 36       	cpi	r24, 0x64	; 100
    1caa:	11 f0       	breq	.+4      	; 0x1cb0 <vfprintf+0x1d2>
    1cac:	89 36       	cpi	r24, 0x69	; 105
    1cae:	41 f5       	brne	.+80     	; 0x1d00 <vfprintf+0x222>
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	37 fe       	sbrs	r3, 7
    1cb4:	07 c0       	rjmp	.+14     	; 0x1cc4 <vfprintf+0x1e6>
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	0c 5f       	subi	r16, 0xFC	; 252
    1cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc2:	08 c0       	rjmp	.+16     	; 0x1cd4 <vfprintf+0x1f6>
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	07 2e       	mov	r0, r23
    1cca:	00 0c       	add	r0, r0
    1ccc:	88 0b       	sbc	r24, r24
    1cce:	99 0b       	sbc	r25, r25
    1cd0:	0e 5f       	subi	r16, 0xFE	; 254
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	f3 2d       	mov	r31, r3
    1cd6:	ff 76       	andi	r31, 0x6F	; 111
    1cd8:	3f 2e       	mov	r3, r31
    1cda:	97 ff       	sbrs	r25, 7
    1cdc:	09 c0       	rjmp	.+18     	; 0x1cf0 <vfprintf+0x212>
    1cde:	90 95       	com	r25
    1ce0:	80 95       	com	r24
    1ce2:	70 95       	com	r23
    1ce4:	61 95       	neg	r22
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cea:	9f 4f       	sbci	r25, 0xFF	; 255
    1cec:	f0 68       	ori	r31, 0x80	; 128
    1cee:	3f 2e       	mov	r3, r31
    1cf0:	2a e0       	ldi	r18, 0x0A	; 10
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	a3 01       	movw	r20, r6
    1cf6:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__ultoa_invert>
    1cfa:	88 2e       	mov	r8, r24
    1cfc:	86 18       	sub	r8, r6
    1cfe:	45 c0       	rjmp	.+138    	; 0x1d8a <vfprintf+0x2ac>
    1d00:	85 37       	cpi	r24, 0x75	; 117
    1d02:	31 f4       	brne	.+12     	; 0x1d10 <vfprintf+0x232>
    1d04:	23 2d       	mov	r18, r3
    1d06:	2f 7e       	andi	r18, 0xEF	; 239
    1d08:	b2 2e       	mov	r11, r18
    1d0a:	2a e0       	ldi	r18, 0x0A	; 10
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	25 c0       	rjmp	.+74     	; 0x1d5a <vfprintf+0x27c>
    1d10:	93 2d       	mov	r25, r3
    1d12:	99 7f       	andi	r25, 0xF9	; 249
    1d14:	b9 2e       	mov	r11, r25
    1d16:	8f 36       	cpi	r24, 0x6F	; 111
    1d18:	c1 f0       	breq	.+48     	; 0x1d4a <vfprintf+0x26c>
    1d1a:	18 f4       	brcc	.+6      	; 0x1d22 <vfprintf+0x244>
    1d1c:	88 35       	cpi	r24, 0x58	; 88
    1d1e:	79 f0       	breq	.+30     	; 0x1d3e <vfprintf+0x260>
    1d20:	b5 c0       	rjmp	.+362    	; 0x1e8c <vfprintf+0x3ae>
    1d22:	80 37       	cpi	r24, 0x70	; 112
    1d24:	19 f0       	breq	.+6      	; 0x1d2c <vfprintf+0x24e>
    1d26:	88 37       	cpi	r24, 0x78	; 120
    1d28:	21 f0       	breq	.+8      	; 0x1d32 <vfprintf+0x254>
    1d2a:	b0 c0       	rjmp	.+352    	; 0x1e8c <vfprintf+0x3ae>
    1d2c:	e9 2f       	mov	r30, r25
    1d2e:	e0 61       	ori	r30, 0x10	; 16
    1d30:	be 2e       	mov	r11, r30
    1d32:	b4 fe       	sbrs	r11, 4
    1d34:	0d c0       	rjmp	.+26     	; 0x1d50 <vfprintf+0x272>
    1d36:	fb 2d       	mov	r31, r11
    1d38:	f4 60       	ori	r31, 0x04	; 4
    1d3a:	bf 2e       	mov	r11, r31
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <vfprintf+0x272>
    1d3e:	34 fe       	sbrs	r3, 4
    1d40:	0a c0       	rjmp	.+20     	; 0x1d56 <vfprintf+0x278>
    1d42:	29 2f       	mov	r18, r25
    1d44:	26 60       	ori	r18, 0x06	; 6
    1d46:	b2 2e       	mov	r11, r18
    1d48:	06 c0       	rjmp	.+12     	; 0x1d56 <vfprintf+0x278>
    1d4a:	28 e0       	ldi	r18, 0x08	; 8
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <vfprintf+0x27c>
    1d50:	20 e1       	ldi	r18, 0x10	; 16
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <vfprintf+0x27c>
    1d56:	20 e1       	ldi	r18, 0x10	; 16
    1d58:	32 e0       	ldi	r19, 0x02	; 2
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	b7 fe       	sbrs	r11, 7
    1d5e:	07 c0       	rjmp	.+14     	; 0x1d6e <vfprintf+0x290>
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	0c 5f       	subi	r16, 0xFC	; 252
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	06 c0       	rjmp	.+12     	; 0x1d7a <vfprintf+0x29c>
    1d6e:	60 81       	ld	r22, Z
    1d70:	71 81       	ldd	r23, Z+1	; 0x01
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 5f       	subi	r16, 0xFE	; 254
    1d78:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7a:	a3 01       	movw	r20, r6
    1d7c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <__ultoa_invert>
    1d80:	88 2e       	mov	r8, r24
    1d82:	86 18       	sub	r8, r6
    1d84:	fb 2d       	mov	r31, r11
    1d86:	ff 77       	andi	r31, 0x7F	; 127
    1d88:	3f 2e       	mov	r3, r31
    1d8a:	36 fe       	sbrs	r3, 6
    1d8c:	0d c0       	rjmp	.+26     	; 0x1da8 <vfprintf+0x2ca>
    1d8e:	23 2d       	mov	r18, r3
    1d90:	2e 7f       	andi	r18, 0xFE	; 254
    1d92:	a2 2e       	mov	r10, r18
    1d94:	89 14       	cp	r8, r9
    1d96:	58 f4       	brcc	.+22     	; 0x1dae <vfprintf+0x2d0>
    1d98:	34 fe       	sbrs	r3, 4
    1d9a:	0b c0       	rjmp	.+22     	; 0x1db2 <vfprintf+0x2d4>
    1d9c:	32 fc       	sbrc	r3, 2
    1d9e:	09 c0       	rjmp	.+18     	; 0x1db2 <vfprintf+0x2d4>
    1da0:	83 2d       	mov	r24, r3
    1da2:	8e 7e       	andi	r24, 0xEE	; 238
    1da4:	a8 2e       	mov	r10, r24
    1da6:	05 c0       	rjmp	.+10     	; 0x1db2 <vfprintf+0x2d4>
    1da8:	b8 2c       	mov	r11, r8
    1daa:	a3 2c       	mov	r10, r3
    1dac:	03 c0       	rjmp	.+6      	; 0x1db4 <vfprintf+0x2d6>
    1dae:	b8 2c       	mov	r11, r8
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <vfprintf+0x2d6>
    1db2:	b9 2c       	mov	r11, r9
    1db4:	a4 fe       	sbrs	r10, 4
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <vfprintf+0x2f8>
    1db8:	fe 01       	movw	r30, r28
    1dba:	e8 0d       	add	r30, r8
    1dbc:	f1 1d       	adc	r31, r1
    1dbe:	80 81       	ld	r24, Z
    1dc0:	80 33       	cpi	r24, 0x30	; 48
    1dc2:	21 f4       	brne	.+8      	; 0x1dcc <vfprintf+0x2ee>
    1dc4:	9a 2d       	mov	r25, r10
    1dc6:	99 7e       	andi	r25, 0xE9	; 233
    1dc8:	a9 2e       	mov	r10, r25
    1dca:	09 c0       	rjmp	.+18     	; 0x1dde <vfprintf+0x300>
    1dcc:	a2 fe       	sbrs	r10, 2
    1dce:	06 c0       	rjmp	.+12     	; 0x1ddc <vfprintf+0x2fe>
    1dd0:	b3 94       	inc	r11
    1dd2:	b3 94       	inc	r11
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <vfprintf+0x300>
    1dd6:	8a 2d       	mov	r24, r10
    1dd8:	86 78       	andi	r24, 0x86	; 134
    1dda:	09 f0       	breq	.+2      	; 0x1dde <vfprintf+0x300>
    1ddc:	b3 94       	inc	r11
    1dde:	a3 fc       	sbrc	r10, 3
    1de0:	11 c0       	rjmp	.+34     	; 0x1e04 <vfprintf+0x326>
    1de2:	a0 fe       	sbrs	r10, 0
    1de4:	06 c0       	rjmp	.+12     	; 0x1df2 <vfprintf+0x314>
    1de6:	b2 14       	cp	r11, r2
    1de8:	88 f4       	brcc	.+34     	; 0x1e0c <vfprintf+0x32e>
    1dea:	28 0c       	add	r2, r8
    1dec:	92 2c       	mov	r9, r2
    1dee:	9b 18       	sub	r9, r11
    1df0:	0e c0       	rjmp	.+28     	; 0x1e0e <vfprintf+0x330>
    1df2:	b2 14       	cp	r11, r2
    1df4:	60 f4       	brcc	.+24     	; 0x1e0e <vfprintf+0x330>
    1df6:	b6 01       	movw	r22, r12
    1df8:	80 e2       	ldi	r24, 0x20	; 32
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <fputc>
    1e00:	b3 94       	inc	r11
    1e02:	f7 cf       	rjmp	.-18     	; 0x1df2 <vfprintf+0x314>
    1e04:	b2 14       	cp	r11, r2
    1e06:	18 f4       	brcc	.+6      	; 0x1e0e <vfprintf+0x330>
    1e08:	2b 18       	sub	r2, r11
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <vfprintf+0x332>
    1e0c:	98 2c       	mov	r9, r8
    1e0e:	21 2c       	mov	r2, r1
    1e10:	a4 fe       	sbrs	r10, 4
    1e12:	10 c0       	rjmp	.+32     	; 0x1e34 <vfprintf+0x356>
    1e14:	b6 01       	movw	r22, r12
    1e16:	80 e3       	ldi	r24, 0x30	; 48
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <fputc>
    1e1e:	a2 fe       	sbrs	r10, 2
    1e20:	17 c0       	rjmp	.+46     	; 0x1e50 <vfprintf+0x372>
    1e22:	a1 fc       	sbrc	r10, 1
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <vfprintf+0x34e>
    1e26:	88 e7       	ldi	r24, 0x78	; 120
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <vfprintf+0x352>
    1e2c:	88 e5       	ldi	r24, 0x58	; 88
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	b6 01       	movw	r22, r12
    1e32:	0c c0       	rjmp	.+24     	; 0x1e4c <vfprintf+0x36e>
    1e34:	8a 2d       	mov	r24, r10
    1e36:	86 78       	andi	r24, 0x86	; 134
    1e38:	59 f0       	breq	.+22     	; 0x1e50 <vfprintf+0x372>
    1e3a:	a1 fe       	sbrs	r10, 1
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <vfprintf+0x364>
    1e3e:	8b e2       	ldi	r24, 0x2B	; 43
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <vfprintf+0x366>
    1e42:	80 e2       	ldi	r24, 0x20	; 32
    1e44:	a7 fc       	sbrc	r10, 7
    1e46:	8d e2       	ldi	r24, 0x2D	; 45
    1e48:	b6 01       	movw	r22, r12
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <fputc>
    1e50:	89 14       	cp	r8, r9
    1e52:	38 f4       	brcc	.+14     	; 0x1e62 <vfprintf+0x384>
    1e54:	b6 01       	movw	r22, r12
    1e56:	80 e3       	ldi	r24, 0x30	; 48
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <fputc>
    1e5e:	9a 94       	dec	r9
    1e60:	f7 cf       	rjmp	.-18     	; 0x1e50 <vfprintf+0x372>
    1e62:	8a 94       	dec	r8
    1e64:	f3 01       	movw	r30, r6
    1e66:	e8 0d       	add	r30, r8
    1e68:	f1 1d       	adc	r31, r1
    1e6a:	80 81       	ld	r24, Z
    1e6c:	b6 01       	movw	r22, r12
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <fputc>
    1e74:	81 10       	cpse	r8, r1
    1e76:	f5 cf       	rjmp	.-22     	; 0x1e62 <vfprintf+0x384>
    1e78:	22 20       	and	r2, r2
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <vfprintf+0x3a0>
    1e7c:	42 ce       	rjmp	.-892    	; 0x1b02 <vfprintf+0x24>
    1e7e:	b6 01       	movw	r22, r12
    1e80:	80 e2       	ldi	r24, 0x20	; 32
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <fputc>
    1e88:	2a 94       	dec	r2
    1e8a:	f6 cf       	rjmp	.-20     	; 0x1e78 <vfprintf+0x39a>
    1e8c:	f6 01       	movw	r30, r12
    1e8e:	86 81       	ldd	r24, Z+6	; 0x06
    1e90:	97 81       	ldd	r25, Z+7	; 0x07
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <vfprintf+0x3ba>
    1e94:	8f ef       	ldi	r24, 0xFF	; 255
    1e96:	9f ef       	ldi	r25, 0xFF	; 255
    1e98:	2b 96       	adiw	r28, 0x0b	; 11
    1e9a:	e2 e1       	ldi	r30, 0x12	; 18
    1e9c:	0c 94 2f 10 	jmp	0x205e	; 0x205e <__epilogue_restores__>

00001ea0 <strnlen_P>:
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	05 90       	lpm	r0, Z+
    1ea4:	61 50       	subi	r22, 0x01	; 1
    1ea6:	70 40       	sbci	r23, 0x00	; 0
    1ea8:	01 10       	cpse	r0, r1
    1eaa:	d8 f7       	brcc	.-10     	; 0x1ea2 <strnlen_P+0x2>
    1eac:	80 95       	com	r24
    1eae:	90 95       	com	r25
    1eb0:	8e 0f       	add	r24, r30
    1eb2:	9f 1f       	adc	r25, r31
    1eb4:	08 95       	ret

00001eb6 <strnlen>:
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	61 50       	subi	r22, 0x01	; 1
    1eba:	70 40       	sbci	r23, 0x00	; 0
    1ebc:	01 90       	ld	r0, Z+
    1ebe:	01 10       	cpse	r0, r1
    1ec0:	d8 f7       	brcc	.-10     	; 0x1eb8 <strnlen+0x2>
    1ec2:	80 95       	com	r24
    1ec4:	90 95       	com	r25
    1ec6:	8e 0f       	add	r24, r30
    1ec8:	9f 1f       	adc	r25, r31
    1eca:	08 95       	ret

00001ecc <fputc>:
    1ecc:	0f 93       	push	r16
    1ece:	1f 93       	push	r17
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	fb 01       	movw	r30, r22
    1ed6:	23 81       	ldd	r18, Z+3	; 0x03
    1ed8:	21 fd       	sbrc	r18, 1
    1eda:	03 c0       	rjmp	.+6      	; 0x1ee2 <fputc+0x16>
    1edc:	8f ef       	ldi	r24, 0xFF	; 255
    1ede:	9f ef       	ldi	r25, 0xFF	; 255
    1ee0:	2c c0       	rjmp	.+88     	; 0x1f3a <fputc+0x6e>
    1ee2:	22 ff       	sbrs	r18, 2
    1ee4:	16 c0       	rjmp	.+44     	; 0x1f12 <fputc+0x46>
    1ee6:	46 81       	ldd	r20, Z+6	; 0x06
    1ee8:	57 81       	ldd	r21, Z+7	; 0x07
    1eea:	24 81       	ldd	r18, Z+4	; 0x04
    1eec:	35 81       	ldd	r19, Z+5	; 0x05
    1eee:	42 17       	cp	r20, r18
    1ef0:	53 07       	cpc	r21, r19
    1ef2:	44 f4       	brge	.+16     	; 0x1f04 <fputc+0x38>
    1ef4:	a0 81       	ld	r26, Z
    1ef6:	b1 81       	ldd	r27, Z+1	; 0x01
    1ef8:	9d 01       	movw	r18, r26
    1efa:	2f 5f       	subi	r18, 0xFF	; 255
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	31 83       	std	Z+1, r19	; 0x01
    1f00:	20 83       	st	Z, r18
    1f02:	8c 93       	st	X, r24
    1f04:	26 81       	ldd	r18, Z+6	; 0x06
    1f06:	37 81       	ldd	r19, Z+7	; 0x07
    1f08:	2f 5f       	subi	r18, 0xFF	; 255
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0c:	37 83       	std	Z+7, r19	; 0x07
    1f0e:	26 83       	std	Z+6, r18	; 0x06
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <fputc+0x6e>
    1f12:	8b 01       	movw	r16, r22
    1f14:	ec 01       	movw	r28, r24
    1f16:	fb 01       	movw	r30, r22
    1f18:	00 84       	ldd	r0, Z+8	; 0x08
    1f1a:	f1 85       	ldd	r31, Z+9	; 0x09
    1f1c:	e0 2d       	mov	r30, r0
    1f1e:	09 95       	icall
    1f20:	89 2b       	or	r24, r25
    1f22:	e1 f6       	brne	.-72     	; 0x1edc <fputc+0x10>
    1f24:	d8 01       	movw	r26, r16
    1f26:	16 96       	adiw	r26, 0x06	; 6
    1f28:	8d 91       	ld	r24, X+
    1f2a:	9c 91       	ld	r25, X
    1f2c:	17 97       	sbiw	r26, 0x07	; 7
    1f2e:	01 96       	adiw	r24, 0x01	; 1
    1f30:	17 96       	adiw	r26, 0x07	; 7
    1f32:	9c 93       	st	X, r25
    1f34:	8e 93       	st	-X, r24
    1f36:	16 97       	sbiw	r26, 0x06	; 6
    1f38:	ce 01       	movw	r24, r28
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	1f 91       	pop	r17
    1f40:	0f 91       	pop	r16
    1f42:	08 95       	ret

00001f44 <__ultoa_invert>:
    1f44:	fa 01       	movw	r30, r20
    1f46:	aa 27       	eor	r26, r26
    1f48:	28 30       	cpi	r18, 0x08	; 8
    1f4a:	51 f1       	breq	.+84     	; 0x1fa0 <__ultoa_invert+0x5c>
    1f4c:	20 31       	cpi	r18, 0x10	; 16
    1f4e:	81 f1       	breq	.+96     	; 0x1fb0 <__ultoa_invert+0x6c>
    1f50:	e8 94       	clt
    1f52:	6f 93       	push	r22
    1f54:	6e 7f       	andi	r22, 0xFE	; 254
    1f56:	6e 5f       	subi	r22, 0xFE	; 254
    1f58:	7f 4f       	sbci	r23, 0xFF	; 255
    1f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f5e:	af 4f       	sbci	r26, 0xFF	; 255
    1f60:	b1 e0       	ldi	r27, 0x01	; 1
    1f62:	3e d0       	rcall	.+124    	; 0x1fe0 <__ultoa_invert+0x9c>
    1f64:	b4 e0       	ldi	r27, 0x04	; 4
    1f66:	3c d0       	rcall	.+120    	; 0x1fe0 <__ultoa_invert+0x9c>
    1f68:	67 0f       	add	r22, r23
    1f6a:	78 1f       	adc	r23, r24
    1f6c:	89 1f       	adc	r24, r25
    1f6e:	9a 1f       	adc	r25, r26
    1f70:	a1 1d       	adc	r26, r1
    1f72:	68 0f       	add	r22, r24
    1f74:	79 1f       	adc	r23, r25
    1f76:	8a 1f       	adc	r24, r26
    1f78:	91 1d       	adc	r25, r1
    1f7a:	a1 1d       	adc	r26, r1
    1f7c:	6a 0f       	add	r22, r26
    1f7e:	71 1d       	adc	r23, r1
    1f80:	81 1d       	adc	r24, r1
    1f82:	91 1d       	adc	r25, r1
    1f84:	a1 1d       	adc	r26, r1
    1f86:	20 d0       	rcall	.+64     	; 0x1fc8 <__ultoa_invert+0x84>
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <__ultoa_invert+0x48>
    1f8a:	68 94       	set
    1f8c:	3f 91       	pop	r19
    1f8e:	2a e0       	ldi	r18, 0x0A	; 10
    1f90:	26 9f       	mul	r18, r22
    1f92:	11 24       	eor	r1, r1
    1f94:	30 19       	sub	r19, r0
    1f96:	30 5d       	subi	r19, 0xD0	; 208
    1f98:	31 93       	st	Z+, r19
    1f9a:	de f6       	brtc	.-74     	; 0x1f52 <__ultoa_invert+0xe>
    1f9c:	cf 01       	movw	r24, r30
    1f9e:	08 95       	ret
    1fa0:	46 2f       	mov	r20, r22
    1fa2:	47 70       	andi	r20, 0x07	; 7
    1fa4:	40 5d       	subi	r20, 0xD0	; 208
    1fa6:	41 93       	st	Z+, r20
    1fa8:	b3 e0       	ldi	r27, 0x03	; 3
    1faa:	0f d0       	rcall	.+30     	; 0x1fca <__ultoa_invert+0x86>
    1fac:	c9 f7       	brne	.-14     	; 0x1fa0 <__ultoa_invert+0x5c>
    1fae:	f6 cf       	rjmp	.-20     	; 0x1f9c <__ultoa_invert+0x58>
    1fb0:	46 2f       	mov	r20, r22
    1fb2:	4f 70       	andi	r20, 0x0F	; 15
    1fb4:	40 5d       	subi	r20, 0xD0	; 208
    1fb6:	4a 33       	cpi	r20, 0x3A	; 58
    1fb8:	18 f0       	brcs	.+6      	; 0x1fc0 <__ultoa_invert+0x7c>
    1fba:	49 5d       	subi	r20, 0xD9	; 217
    1fbc:	31 fd       	sbrc	r19, 1
    1fbe:	40 52       	subi	r20, 0x20	; 32
    1fc0:	41 93       	st	Z+, r20
    1fc2:	02 d0       	rcall	.+4      	; 0x1fc8 <__ultoa_invert+0x84>
    1fc4:	a9 f7       	brne	.-22     	; 0x1fb0 <__ultoa_invert+0x6c>
    1fc6:	ea cf       	rjmp	.-44     	; 0x1f9c <__ultoa_invert+0x58>
    1fc8:	b4 e0       	ldi	r27, 0x04	; 4
    1fca:	a6 95       	lsr	r26
    1fcc:	97 95       	ror	r25
    1fce:	87 95       	ror	r24
    1fd0:	77 95       	ror	r23
    1fd2:	67 95       	ror	r22
    1fd4:	ba 95       	dec	r27
    1fd6:	c9 f7       	brne	.-14     	; 0x1fca <__ultoa_invert+0x86>
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	61 05       	cpc	r22, r1
    1fdc:	71 05       	cpc	r23, r1
    1fde:	08 95       	ret
    1fe0:	9b 01       	movw	r18, r22
    1fe2:	ac 01       	movw	r20, r24
    1fe4:	0a 2e       	mov	r0, r26
    1fe6:	06 94       	lsr	r0
    1fe8:	57 95       	ror	r21
    1fea:	47 95       	ror	r20
    1fec:	37 95       	ror	r19
    1fee:	27 95       	ror	r18
    1ff0:	ba 95       	dec	r27
    1ff2:	c9 f7       	brne	.-14     	; 0x1fe6 <__ultoa_invert+0xa2>
    1ff4:	62 0f       	add	r22, r18
    1ff6:	73 1f       	adc	r23, r19
    1ff8:	84 1f       	adc	r24, r20
    1ffa:	95 1f       	adc	r25, r21
    1ffc:	a0 1d       	adc	r26, r0
    1ffe:	08 95       	ret

00002000 <__muluhisi3>:
    2000:	0e 94 38 0c 	call	0x1870	; 0x1870 <__umulhisi3>
    2004:	a5 9f       	mul	r26, r21
    2006:	90 0d       	add	r25, r0
    2008:	b4 9f       	mul	r27, r20
    200a:	90 0d       	add	r25, r0
    200c:	a4 9f       	mul	r26, r20
    200e:	80 0d       	add	r24, r0
    2010:	91 1d       	adc	r25, r1
    2012:	11 24       	eor	r1, r1
    2014:	08 95       	ret

00002016 <__mulshisi3>:
    2016:	b7 ff       	sbrs	r27, 7
    2018:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__muluhisi3>

0000201c <__mulohisi3>:
    201c:	0e 94 00 10 	call	0x2000	; 0x2000 <__muluhisi3>
    2020:	82 1b       	sub	r24, r18
    2022:	93 0b       	sbc	r25, r19
    2024:	08 95       	ret

00002026 <__prologue_saves__>:
    2026:	2f 92       	push	r2
    2028:	3f 92       	push	r3
    202a:	4f 92       	push	r4
    202c:	5f 92       	push	r5
    202e:	6f 92       	push	r6
    2030:	7f 92       	push	r7
    2032:	8f 92       	push	r8
    2034:	9f 92       	push	r9
    2036:	af 92       	push	r10
    2038:	bf 92       	push	r11
    203a:	cf 92       	push	r12
    203c:	df 92       	push	r13
    203e:	ef 92       	push	r14
    2040:	ff 92       	push	r15
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	ca 1b       	sub	r28, r26
    2050:	db 0b       	sbc	r29, r27
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	09 94       	ijmp

0000205e <__epilogue_restores__>:
    205e:	2a 88       	ldd	r2, Y+18	; 0x12
    2060:	39 88       	ldd	r3, Y+17	; 0x11
    2062:	48 88       	ldd	r4, Y+16	; 0x10
    2064:	5f 84       	ldd	r5, Y+15	; 0x0f
    2066:	6e 84       	ldd	r6, Y+14	; 0x0e
    2068:	7d 84       	ldd	r7, Y+13	; 0x0d
    206a:	8c 84       	ldd	r8, Y+12	; 0x0c
    206c:	9b 84       	ldd	r9, Y+11	; 0x0b
    206e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2070:	b9 84       	ldd	r11, Y+9	; 0x09
    2072:	c8 84       	ldd	r12, Y+8	; 0x08
    2074:	df 80       	ldd	r13, Y+7	; 0x07
    2076:	ee 80       	ldd	r14, Y+6	; 0x06
    2078:	fd 80       	ldd	r15, Y+5	; 0x05
    207a:	0c 81       	ldd	r16, Y+4	; 0x04
    207c:	1b 81       	ldd	r17, Y+3	; 0x03
    207e:	aa 81       	ldd	r26, Y+2	; 0x02
    2080:	b9 81       	ldd	r27, Y+1	; 0x01
    2082:	ce 0f       	add	r28, r30
    2084:	d1 1d       	adc	r29, r1
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	ed 01       	movw	r28, r26
    2092:	08 95       	ret

00002094 <_exit>:
    2094:	f8 94       	cli

00002096 <__stop_program>:
    2096:	ff cf       	rjmp	.-2      	; 0x2096 <__stop_program>
