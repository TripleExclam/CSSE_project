
CSSE_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001bca  00001c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014c  00800140  00800140  00001c9e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fdd  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001333  00000000  00000000  00005021  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019ca  00000000  00000000  00006354  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008a0  00000000  00000000  00007d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f23  00000000  00000000  000085c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020bc  00000000  00000000  000094e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000b59f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__ctors_end>
       4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
       c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      14:	0c 94 4b 01 	jmp	0x296	; 0x296 <__vector_5>
      18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      40:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_16>
      44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      50:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_20>
      54:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__vector_21>
      58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
      78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	53 63       	ori	r21, 0x33	; 51
      7e:	6f 72       	andi	r22, 0x2F	; 47
      80:	65 3a       	cpi	r22, 0xA5	; 165
      82:	20 25       	eor	r18, r0
      84:	6c 75       	andi	r22, 0x5C	; 92
	...

00000087 <__c.2281>:
      87:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      97:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000a5 <__c.2279>:
      a5:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000af <__c.2260>:
      af:	53 63 6f 72 65 3a 20 25 6c 75 00                    Score: %lu.

000000ba <__c.2258>:
      ba:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

000000c4 <__c.2249>:
      c4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 70 72     CSSE2010/7201 pr
      d4:	6f 6a 65 63 74 20 62 79 20 4d 61 74 74 68 65 77     oject by Matthew
      e4:	20 42 75 72 74 6f 6e 00                              Burton.

000000ec <__c.2247>:
      ec:	41 73 74 65 72 6f 69 64 73 00                       Asteroids.

000000f6 <numbers>:
      f6:	61 01 5e 01 5a 01 56 01 52 01 4e 01 4a 01 46 01     a.^.Z.V.R.N.J.F.
     106:	42 01 3e 01                                         B.>.

0000010a <letters>:
     10a:	d0 01 cc 01 c8 01 c4 01 c0 01 bc 01 b8 01 b4 01     ................
     11a:	b1 01 ad 01 a9 01 a5 01 a0 01 9c 01 98 01 94 01     ................
     12a:	8f 01 8b 01 87 01 82 01 7e 01 79 01 74 01 6f 01     ........~.y.t.o.
     13a:	6a 01 65 01                                         j.e.

0000013e <cols_9>:
     13e:	64 92 92 7d                                         d..}

00000142 <cols_8>:
     142:	6c 92 92 6d                                         l..m

00000146 <cols_7>:
     146:	80 9e a0 c1                                         ....

0000014a <cols_6>:
     14a:	7c 92 92 4d                                         |..M

0000014e <cols_5>:
     14e:	e4 a2 a2 9d                                         ....

00000152 <cols_4>:
     152:	18 28 48 ff                                         .(H.

00000156 <cols_3>:
     156:	44 92 92 6d                                         D..m

0000015a <cols_2>:
     15a:	46 8a 92 63                                         F..c

0000015e <cols_1>:
     15e:	42 fe 03                                            B..

00000161 <cols_0>:
     161:	7c 92 a2 7d                                         |..}

00000165 <cols_Z>:
     165:	86 8a 92 a2 c3                                      .....

0000016a <cols_Y>:
     16a:	e0 10 0e 10 e1                                      .....

0000016f <cols_X>:
     16f:	c6 28 10 28 c7                                      .(.(.

00000174 <cols_W>:
     174:	fc 02 1c 02 fd                                      .....

00000179 <cols_V>:
     179:	f8 04 02 04 f9                                      .....

0000017e <cols_U>:
     17e:	fc 02 02 fd                                         ....

00000182 <cols_T>:
     182:	80 80 fe 80 81                                      .....

00000187 <cols_S>:
     187:	64 92 92 4d                                         d..M

0000018b <cols_R>:
     18b:	fe 90 98 67                                         ...g

0000018f <cols_Q>:
     18f:	7c 82 8a 7c 03                                      |..|.

00000194 <cols_P>:
     194:	fe 90 90 61                                         ...a

00000198 <cols_O>:
     198:	7c 82 82 7d                                         |..}

0000019c <cols_N>:
     19c:	fe 20 10 ff                                         . ..

000001a0 <cols_M>:
     1a0:	fe 40 30 40 ff                                      .@0@.

000001a5 <cols_L>:
     1a5:	fe 02 02 03                                         ....

000001a9 <cols_K>:
     1a9:	fe 10 28 c7                                         ..(.

000001ad <cols_J>:
     1ad:	04 02 02 fd                                         ....

000001b1 <cols_I>:
     1b1:	82 fe 83                                            ...

000001b4 <cols_H>:
     1b4:	fe 10 10 ff                                         ....

000001b8 <cols_G>:
     1b8:	7c 82 92 5d                                         |..]

000001bc <cols_F>:
     1bc:	fe 90 90 81                                         ....

000001c0 <cols_E>:
     1c0:	fe 92 92 83                                         ....

000001c4 <cols_D>:
     1c4:	fe 82 82 7d                                         ...}

000001c8 <cols_C>:
     1c8:	7c 82 82 45                                         |..E

000001cc <cols_B>:
     1cc:	fe 92 92 6d                                         ...m

000001d0 <cols_A>:
     1d0:	7e 90 90 7f                                         ~...

000001d4 <__c.2040>:
     1d4:	1b 5b 32 4a 00                                      .[2J.

000001d9 <__c.2025>:
     1d9:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e2 <__ctors_end>:
     1e2:	11 24       	eor	r1, r1
     1e4:	1f be       	out	0x3f, r1	; 63
     1e6:	cf ef       	ldi	r28, 0xFF	; 255
     1e8:	d8 e0       	ldi	r29, 0x08	; 8
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	cd bf       	out	0x3d, r28	; 61

000001ee <__do_copy_data>:
     1ee:	11 e0       	ldi	r17, 0x01	; 1
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b1 e0       	ldi	r27, 0x01	; 1
     1f4:	ea ec       	ldi	r30, 0xCA	; 202
     1f6:	fb e1       	ldi	r31, 0x1B	; 27
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <__do_copy_data+0x10>
     1fa:	05 90       	lpm	r0, Z+
     1fc:	0d 92       	st	X+, r0
     1fe:	a0 34       	cpi	r26, 0x40	; 64
     200:	b1 07       	cpc	r27, r17
     202:	d9 f7       	brne	.-10     	; 0x1fa <__do_copy_data+0xc>

00000204 <__do_clear_bss>:
     204:	22 e0       	ldi	r18, 0x02	; 2
     206:	a0 e4       	ldi	r26, 0x40	; 64
     208:	b1 e0       	ldi	r27, 0x01	; 1
     20a:	01 c0       	rjmp	.+2      	; 0x20e <.do_clear_bss_start>

0000020c <.do_clear_bss_loop>:
     20c:	1d 92       	st	X+, r1

0000020e <.do_clear_bss_start>:
     20e:	ac 38       	cpi	r26, 0x8C	; 140
     210:	b2 07       	cpc	r27, r18
     212:	e1 f7       	brne	.-8      	; 0x20c <.do_clear_bss_loop>
     214:	0e 94 ce 06 	call	0xd9c	; 0xd9c <main>
     218:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <_exit>

0000021c <__bad_interrupt>:
     21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see datasheet page 77)
	PCICR |= (1<<PCIE1);
     220:	e8 e6       	ldi	r30, 0x68	; 104
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	82 60       	ori	r24, 0x02	; 2
     228:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78)
	PCIFR |= (1<<PCIF1);
     22a:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     22c:	ec e6       	ldi	r30, 0x6C	; 108
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	80 81       	ld	r24, Z
     232:	8f 60       	ori	r24, 0x0F	; 15
     234:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     236:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <__data_end>
     23a:	08 95       	ret

0000023c <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
	if(queue_length > 0) {
     23c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     240:	18 16       	cp	r1, r24
     242:	3c f5       	brge	.+78     	; 0x292 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     244:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     248:	6f b7       	in	r22, 0x3f	; 63
		cli();
     24a:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     24c:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <__data_end>
     250:	92 30       	cpi	r25, 0x02	; 2
     252:	b4 f0       	brlt	.+44     	; 0x280 <button_pushed+0x44>
     254:	21 e0       	ldi	r18, 0x01	; 1
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     25a:	f9 01       	movw	r30, r18
     25c:	ef 5b       	subi	r30, 0xBF	; 191
     25e:	fe 4f       	sbci	r31, 0xFE	; 254
     260:	40 81       	ld	r20, Z
     262:	f9 01       	movw	r30, r18
     264:	e0 5c       	subi	r30, 0xC0	; 192
     266:	fe 4f       	sbci	r31, 0xFE	; 254
     268:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     26a:	9f 5f       	subi	r25, 0xFF	; 255
     26c:	29 2f       	mov	r18, r25
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <__data_end>
     274:	04 2e       	mov	r0, r20
     276:	00 0c       	add	r0, r0
     278:	55 0b       	sbc	r21, r21
     27a:	24 17       	cp	r18, r20
     27c:	35 07       	cpc	r19, r21
     27e:	6c f3       	brlt	.-38     	; 0x25a <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     280:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <__data_end>
     284:	91 50       	subi	r25, 0x01	; 1
     286:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <__data_end>
		
		if(interrupts_were_enabled) {
     28a:	66 23       	and	r22, r22
     28c:	1c f4       	brge	.+6      	; 0x294 <button_pushed+0x58>
			// Turn them back on again
			sei();
     28e:	78 94       	sei
     290:	08 95       	ret
	// Empty the button push queue
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = NO_BUTTON_PUSHED;	// Assume no button pushed
     292:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     294:	08 95       	ret

00000296 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	0f 92       	push	r0
     29e:	11 24       	eor	r1, r1
     2a0:	2f 93       	push	r18
     2a2:	3f 93       	push	r19
     2a4:	4f 93       	push	r20
     2a6:	5f 93       	push	r21
     2a8:	6f 93       	push	r22
     2aa:	7f 93       	push	r23
     2ac:	8f 93       	push	r24
     2ae:	9f 93       	push	r25
     2b0:	ef 93       	push	r30
     2b2:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2b4:	43 b1       	in	r20, 0x03	; 3
     2b6:	4f 70       	andi	r20, 0x0F	; 15
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
     2bc:	64 2f       	mov	r22, r20
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <__data_end>
     2c4:	24 30       	cpi	r18, 0x04	; 4
     2c6:	04 f5       	brge	.+64     	; 0x308 <__vector_5+0x72>
     2c8:	9b 01       	movw	r18, r22
     2ca:	08 2e       	mov	r0, r24
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <__vector_5+0x3c>
     2ce:	35 95       	asr	r19
     2d0:	27 95       	ror	r18
     2d2:	0a 94       	dec	r0
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <__vector_5+0x38>
     2d6:	20 ff       	sbrs	r18, 0
     2d8:	17 c0       	rjmp	.+46     	; 0x308 <__vector_5+0x72>
				(button_state & (1<<pin)) && 
				!(last_button_state & (1<<pin))) {
     2da:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <last_button_state>
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
		if(queue_length < BUTTON_QUEUE_SIZE && 
				(button_state & (1<<pin)) && 
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	08 2e       	mov	r0, r24
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <__vector_5+0x52>
     2e4:	35 95       	asr	r19
     2e6:	27 95       	ror	r18
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <__vector_5+0x4e>
     2ec:	20 fd       	sbrc	r18, 0
     2ee:	0c c0       	rjmp	.+24     	; 0x308 <__vector_5+0x72>
				!(last_button_state & (1<<pin))) {
			// Add the button push to the queue (and update the
			// length of the queue
			button_queue[queue_length++] = pin;
     2f0:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <__data_end>
     2f4:	21 e0       	ldi	r18, 0x01	; 1
     2f6:	2e 0f       	add	r18, r30
     2f8:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <__data_end>
     2fc:	0e 2e       	mov	r0, r30
     2fe:	00 0c       	add	r0, r0
     300:	ff 0b       	sbc	r31, r31
     302:	ef 5b       	subi	r30, 0xBF	; 191
     304:	fe 4f       	sbci	r31, 0xFE	; 254
     306:	80 83       	st	Z, r24
     308:	01 96       	adiw	r24, 0x01	; 1
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the 
	// button_state.
	for(uint8_t pin=0; pin<=3; pin++) {
     30a:	84 30       	cpi	r24, 0x04	; 4
     30c:	91 05       	cpc	r25, r1
     30e:	c1 f6       	brne	.-80     	; 0x2c0 <__vector_5+0x2a>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state
	last_button_state = button_state;
     310:	40 93 45 01 	sts	0x0145, r20	; 0x800145 <last_button_state>
     314:	ff 91       	pop	r31
     316:	ef 91       	pop	r30
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	7f 91       	pop	r23
     31e:	6f 91       	pop	r22
     320:	5f 91       	pop	r21
     322:	4f 91       	pop	r20
     324:	3f 91       	pop	r19
     326:	2f 91       	pop	r18
     328:	0f 90       	pop	r0
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	0f 90       	pop	r0
     32e:	1f 90       	pop	r1
     330:	18 95       	reti

00000332 <asteroid_at>:
// Check whether there is an asteroid at a given position.
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     332:	20 e1       	ldi	r18, 0x10	; 16
     334:	82 9f       	mul	r24, r18
     336:	c0 01       	movw	r24, r0
     338:	11 24       	eor	r1, r1
     33a:	6f 70       	andi	r22, 0x0F	; 15
     33c:	86 2b       	or	r24, r22
	for(i=0; i < numAsteroids; i++) {
     33e:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <numAsteroids>
     342:	04 2e       	mov	r0, r20
     344:	00 0c       	add	r0, r0
     346:	55 0b       	sbc	r21, r21
     348:	14 16       	cp	r1, r20
     34a:	15 06       	cpc	r1, r21
     34c:	c4 f4       	brge	.+48     	; 0x37e <asteroid_at+0x4c>
		if(asteroids[i] == positionToCheck) {
     34e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <asteroids>
     352:	89 17       	cp	r24, r25
     354:	49 f0       	breq	.+18     	; 0x368 <asteroid_at+0x36>
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0a c0       	rjmp	.+20     	; 0x36e <asteroid_at+0x3c>
     35a:	f9 01       	movw	r30, r18
     35c:	e7 5a       	subi	r30, 0xA7	; 167
     35e:	fe 4f       	sbci	r31, 0xFE	; 254
     360:	20 81       	ld	r18, Z
     362:	82 13       	cpse	r24, r18
     364:	04 c0       	rjmp	.+8      	; 0x36e <asteroid_at+0x3c>
     366:	01 c0       	rjmp	.+2      	; 0x36a <asteroid_at+0x38>
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     368:	90 e0       	ldi	r25, 0x00	; 0
		if(asteroids[i] == positionToCheck) {
			// Asteroid i is at the given position
			return i;
     36a:	89 2f       	mov	r24, r25
     36c:	08 95       	ret
// Returns -1 if there is no asteroid, otherwise we return
// the asteroid number (from 0 to numAsteroids-1).
static int8_t asteroid_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numAsteroids; i++) {
     36e:	9f 5f       	subi	r25, 0xFF	; 255
     370:	29 2f       	mov	r18, r25
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	24 17       	cp	r18, r20
     376:	35 07       	cpc	r19, r21
     378:	84 f3       	brlt	.-32     	; 0x35a <asteroid_at+0x28>
			// Asteroid i is at the given position
			return i;
		}
	}
	// No match was found - no asteroid at the given position
	return -1;
     37a:	8f ef       	ldi	r24, 0xFF	; 255
     37c:	08 95       	ret
     37e:	8f ef       	ldi	r24, 0xFF	; 255
}
     380:	08 95       	ret

00000382 <redraw_base>:
	redraw_all_asteroids();	
	redraw_all_projectiles();
}


static void redraw_base(uint8_t colour){
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	18 2f       	mov	r17, r24
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition + 1; x++) {
     38a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <basePosition>
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	89 0f       	add	r24, r25
     392:	48 2f       	mov	r20, r24
     394:	08 2e       	mov	r0, r24
     396:	00 0c       	add	r0, r0
     398:	55 0b       	sbc	r21, r21
     39a:	29 2f       	mov	r18, r25
     39c:	09 2e       	mov	r0, r25
     39e:	00 0c       	add	r0, r0
     3a0:	33 0b       	sbc	r19, r19
     3a2:	2f 5f       	subi	r18, 0xFF	; 255
     3a4:	3f 4f       	sbci	r19, 0xFF	; 255
     3a6:	24 17       	cp	r18, r20
     3a8:	35 07       	cpc	r19, r21
     3aa:	e4 f0       	brlt	.+56     	; 0x3e4 <redraw_base+0x62>
     3ac:	d8 e0       	ldi	r29, 0x08	; 8
     3ae:	d9 1b       	sub	r29, r25
     3b0:	c8 2f       	mov	r28, r24
		if (x >= 0 && x < FIELD_WIDTH) {
     3b2:	88 30       	cpi	r24, 0x08	; 8
     3b4:	28 f4       	brcc	.+10     	; 0x3c0 <redraw_base+0x3e>
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
     3b6:	41 2f       	mov	r20, r17
     3b8:	6d 2f       	mov	r22, r29
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <ledmatrix_update_pixel>
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	8c 0f       	add	r24, r28


static void redraw_base(uint8_t colour){
	// Add the bottom row of the base first (0) followed by the single bit
	// in the next row (1)
	for(int8_t x = basePosition - 1; x <= basePosition + 1; x++) {
     3c4:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <basePosition>
     3c8:	d1 50       	subi	r29, 0x01	; 1
     3ca:	48 2f       	mov	r20, r24
     3cc:	08 2e       	mov	r0, r24
     3ce:	00 0c       	add	r0, r0
     3d0:	55 0b       	sbc	r21, r21
     3d2:	29 2f       	mov	r18, r25
     3d4:	09 2e       	mov	r0, r25
     3d6:	00 0c       	add	r0, r0
     3d8:	33 0b       	sbc	r19, r19
     3da:	2f 5f       	subi	r18, 0xFF	; 255
     3dc:	3f 4f       	sbci	r19, 0xFF	; 255
     3de:	24 17       	cp	r18, r20
     3e0:	35 07       	cpc	r19, r21
     3e2:	34 f7       	brge	.-52     	; 0x3b0 <redraw_base+0x2e>
		if (x >= 0 && x < FIELD_WIDTH) {
			ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(x, 0), colour);
		}
	}
	ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_XY(basePosition, 1), colour);
     3e4:	67 e0       	ldi	r22, 0x07	; 7
     3e6:	69 1b       	sub	r22, r25
     3e8:	41 2f       	mov	r20, r17
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	0e 94 d5 04 	call	0x9aa	; 0x9aa <ledmatrix_update_pixel>
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	08 95       	ret

000003f8 <redraw_asteroid>:
}


static void redraw_asteroid(uint8_t asteroidNumber, uint8_t colour) {
	uint8_t asteroidPosn;
	if(asteroidNumber < numAsteroids) {
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <numAsteroids>
     3fe:	02 2e       	mov	r0, r18
     400:	00 0c       	add	r0, r0
     402:	33 0b       	sbc	r19, r19
     404:	82 17       	cp	r24, r18
     406:	93 07       	cpc	r25, r19
     408:	6c f4       	brge	.+26     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     40a:	46 2f       	mov	r20, r22
		asteroidPosn = asteroids[asteroidNumber];
     40c:	fc 01       	movw	r30, r24
     40e:	e7 5a       	subi	r30, 0xA7	; 167
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(asteroidPosn), colour);
     414:	98 2f       	mov	r25, r24
     416:	92 95       	swap	r25
     418:	9f 70       	andi	r25, 0x0F	; 15
     41a:	67 e0       	ldi	r22, 0x07	; 7
     41c:	69 1b       	sub	r22, r25
     41e:	8f 70       	andi	r24, 0x0F	; 15
     420:	0e 94 d5 04 	call	0x9aa	; 0x9aa <ledmatrix_update_pixel>
     424:	08 95       	ret

00000426 <redraw_projectile>:

static void redraw_projectile(uint8_t projectileNumber, uint8_t colour) {
	uint8_t projectilePosn;
	
	// Check projectileNumber is valid - ignore otherwise
	if(projectileNumber < numProjectiles) {
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <numProjectiles>
     42c:	02 2e       	mov	r0, r18
     42e:	00 0c       	add	r0, r0
     430:	33 0b       	sbc	r19, r19
     432:	82 17       	cp	r24, r18
     434:	93 07       	cpc	r25, r19
     436:	6c f4       	brge	.+26     	; 0x452 <redraw_projectile+0x2c>
     438:	46 2f       	mov	r20, r22
		projectilePosn = projectiles[projectileNumber];
     43a:	fc 01       	movw	r30, r24
     43c:	ec 5a       	subi	r30, 0xAC	; 172
     43e:	fe 4f       	sbci	r31, 0xFE	; 254
     440:	80 81       	ld	r24, Z
		ledmatrix_update_pixel(LED_MATRIX_POSN_FROM_GAME_POSN(projectilePosn), colour);
     442:	98 2f       	mov	r25, r24
     444:	92 95       	swap	r25
     446:	9f 70       	andi	r25, 0x0F	; 15
     448:	67 e0       	ldi	r22, 0x07	; 7
     44a:	69 1b       	sub	r22, r25
     44c:	8f 70       	andi	r24, 0x0F	; 15
     44e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <ledmatrix_update_pixel>
     452:	08 95       	ret

00000454 <remove_projectile>:
}


// Remove projectile with the given projectile number (from 0 to
// numProjectiles - 1).
static void remove_projectile(int8_t projectileNumber) {	
     454:	cf 93       	push	r28
	if(projectileNumber < 0 || projectileNumber >= numProjectiles) {
     456:	88 23       	and	r24, r24
     458:	24 f1       	brlt	.+72     	; 0x4a2 <remove_projectile+0x4e>
     45a:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <numProjectiles>
     45e:	89 17       	cp	r24, r25
     460:	04 f5       	brge	.+64     	; 0x4a2 <remove_projectile+0x4e>
     462:	c8 2f       	mov	r28, r24
		// Invalid index - do nothing 
		return;
	}
	
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	0e 94 13 02 	call	0x426	; 0x426 <redraw_projectile>
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	8c 0f       	add	r24, r28
     46e:	28 2f       	mov	r18, r24
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <numProjectiles>
     476:	46 2f       	mov	r20, r22
     478:	06 2e       	mov	r0, r22
     47a:	00 0c       	add	r0, r0
     47c:	55 0b       	sbc	r21, r21
     47e:	24 17       	cp	r18, r20
     480:	35 07       	cpc	r19, r21
     482:	64 f4       	brge	.+24     	; 0x49c <remove_projectile+0x48>
		projectiles[i-1] = projectiles[i];
     484:	f9 01       	movw	r30, r18
     486:	ec 5a       	subi	r30, 0xAC	; 172
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	90 81       	ld	r25, Z
     48c:	31 97       	sbiw	r30, 0x01	; 1
     48e:	90 83       	st	Z, r25
	// Remove the projectile from the display
	redraw_projectile(projectileNumber, COLOUR_BLACK);
	
	// Close up the gap in the list of projectiles - move any
	// projectiles after this in the list closer to the start of the list
	for(uint8_t i = projectileNumber+1; i < numProjectiles; i++) {
     490:	8f 5f       	subi	r24, 0xFF	; 255
     492:	28 2f       	mov	r18, r24
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	24 17       	cp	r18, r20
     498:	35 07       	cpc	r19, r21
     49a:	a4 f3       	brlt	.-24     	; 0x484 <remove_projectile+0x30>
		projectiles[i-1] = projectiles[i];
	}
	// Update projectile count - have one fewer projectiles now.
	numProjectiles--;
     49c:	61 50       	subi	r22, 0x01	; 1
     49e:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <numProjectiles>
}
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <handle_collision>:


// Remove the projectile and asteroid when they collide. Incrementing score.
// Sound effects can be handled here as well.
static void handle_collision(int8_t asteroidIndex, int8_t projectileIndex) {
     4a6:	1f 93       	push	r17
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	c8 2f       	mov	r28, r24
     4ae:	86 2f       	mov	r24, r22
	// Remove the collided particles.
	remove_projectile(projectileIndex);
     4b0:	0e 94 2a 02 	call	0x454	; 0x454 <remove_projectile>

/* Remove asteroid with the given index number (from 0 to
** numAsteroids - 1).
*/
static void remove_asteroid(int8_t asteroidNumber) {
	if(asteroidNumber < 0 || asteroidNumber >= numAsteroids) {
     4b4:	cc 23       	and	r28, r28
     4b6:	0c f1       	brlt	.+66     	; 0x4fa <handle_collision+0x54>
     4b8:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <numAsteroids>
     4bc:	c8 17       	cp	r28, r24
     4be:	ec f4       	brge	.+58     	; 0x4fa <handle_collision+0x54>
		// Invalid index - do nothing
		return;
	}
	
	// Remove the asteroid from the display
	redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	8c 2f       	mov	r24, r28
     4c4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <redraw_asteroid>
	
	if(asteroidNumber < numAsteroids - 1) {
     4c8:	8c 2f       	mov	r24, r28
     4ca:	cc 0f       	add	r28, r28
     4cc:	99 0b       	sbc	r25, r25
     4ce:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <numAsteroids>
     4d2:	24 2f       	mov	r18, r20
     4d4:	04 2e       	mov	r0, r20
     4d6:	00 0c       	add	r0, r0
     4d8:	33 0b       	sbc	r19, r19
     4da:	21 50       	subi	r18, 0x01	; 1
     4dc:	31 09       	sbc	r19, r1
     4de:	82 17       	cp	r24, r18
     4e0:	93 07       	cpc	r25, r19
     4e2:	44 f4       	brge	.+16     	; 0x4f4 <handle_collision+0x4e>
		// Asteroid is not the last one in the list
		// - move the last one in the list to this position
		asteroids[asteroidNumber] = asteroids[numAsteroids - 1];
     4e4:	f9 01       	movw	r30, r18
     4e6:	e7 5a       	subi	r30, 0xA7	; 167
     4e8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ea:	20 81       	ld	r18, Z
     4ec:	fc 01       	movw	r30, r24
     4ee:	e7 5a       	subi	r30, 0xA7	; 167
     4f0:	fe 4f       	sbci	r31, 0xFE	; 254
     4f2:	20 83       	st	Z, r18
	}
	// Last position in asteroids array is no longer used
	numAsteroids--;
     4f4:	41 50       	subi	r20, 0x01	; 1
     4f6:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <numAsteroids>
		// Generate random x position - somewhere from 0
		// to FIELD_WIDTH - 1
		x = (uint8_t)(random() % FIELD_WIDTH);
		// Generate random y position - somewhere from
		// FIELD_HEIGHT - 1 to FIELD_HEIGHT - 2
		y = (uint8_t)(FIELD_HEIGHT - 1 - (random() % 2));
     4fa:	df e0       	ldi	r29, 0x0F	; 15
	// Generate random position that does not already
	// have an asteroid.
	do {
		// Generate random x position - somewhere from 0
		// to FIELD_WIDTH - 1
		x = (uint8_t)(random() % FIELD_WIDTH);
     4fc:	0e 94 3e 0a 	call	0x147c	; 0x147c <random>
     500:	dc 01       	movw	r26, r24
     502:	cb 01       	movw	r24, r22
     504:	87 70       	andi	r24, 0x07	; 7
     506:	99 27       	eor	r25, r25
     508:	aa 27       	eor	r26, r26
     50a:	b0 78       	andi	r27, 0x80	; 128
     50c:	bb 23       	and	r27, r27
     50e:	54 f4       	brge	.+20     	; 0x524 <handle_collision+0x7e>
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	a1 09       	sbc	r26, r1
     514:	b1 09       	sbc	r27, r1
     516:	88 6f       	ori	r24, 0xF8	; 248
     518:	9f 6f       	ori	r25, 0xFF	; 255
     51a:	af 6f       	ori	r26, 0xFF	; 255
     51c:	bf 6f       	ori	r27, 0xFF	; 255
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	a1 1d       	adc	r26, r1
     522:	b1 1d       	adc	r27, r1
     524:	c8 2f       	mov	r28, r24
		// Generate random y position - somewhere from
		// FIELD_HEIGHT - 1 to FIELD_HEIGHT - 2
		y = (uint8_t)(FIELD_HEIGHT - 1 - (random() % 2));
     526:	0e 94 3e 0a 	call	0x147c	; 0x147c <random>
     52a:	dc 01       	movw	r26, r24
     52c:	cb 01       	movw	r24, r22
     52e:	81 70       	andi	r24, 0x01	; 1
     530:	99 27       	eor	r25, r25
     532:	aa 27       	eor	r26, r26
     534:	b0 78       	andi	r27, 0x80	; 128
     536:	bb 23       	and	r27, r27
     538:	54 f4       	brge	.+20     	; 0x54e <handle_collision+0xa8>
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	a1 09       	sbc	r26, r1
     53e:	b1 09       	sbc	r27, r1
     540:	8e 6f       	ori	r24, 0xFE	; 254
     542:	9f 6f       	ori	r25, 0xFF	; 255
     544:	af 6f       	ori	r26, 0xFF	; 255
     546:	bf 6f       	ori	r27, 0xFF	; 255
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	a1 1d       	adc	r26, r1
     54c:	b1 1d       	adc	r27, r1
     54e:	1d 2f       	mov	r17, r29
     550:	18 1b       	sub	r17, r24
	} while(asteroid_at(x,y) != -1);
     552:	61 2f       	mov	r22, r17
     554:	8c 2f       	mov	r24, r28
     556:	0e 94 99 01 	call	0x332	; 0x332 <asteroid_at>
     55a:	8f 3f       	cpi	r24, 0xFF	; 255
     55c:	79 f6       	brne	.-98     	; 0x4fc <handle_collision+0x56>
	// If we get here, we've now found an x,y location without
	// an existing asteroid - record the position
	asteroids[numAsteroids] = GAME_POSITION(x,y);
     55e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <numAsteroids>
     562:	e8 2f       	mov	r30, r24
     564:	08 2e       	mov	r0, r24
     566:	00 0c       	add	r0, r0
     568:	ff 0b       	sbc	r31, r31
     56a:	e7 5a       	subi	r30, 0xA7	; 167
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	90 e1       	ldi	r25, 0x10	; 16
     570:	c9 9f       	mul	r28, r25
     572:	b0 01       	movw	r22, r0
     574:	11 24       	eor	r1, r1
     576:	1f 70       	andi	r17, 0x0F	; 15
     578:	61 2b       	or	r22, r17
     57a:	60 83       	st	Z, r22
	numAsteroids++;
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	98 0f       	add	r25, r24
     580:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <numAsteroids>
	
	// Add the asteroid to the display
	redraw_asteroid(numAsteroids - 1, COLOUR_ASTEROID);
     584:	60 ef       	ldi	r22, 0xF0	; 240
     586:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <redraw_asteroid>
	// Remove the collided particles.
	remove_projectile(projectileIndex);
	remove_asteroid(asteroidIndex);
	add_asteroid();
	// Add one to the score
	add_to_score(1);
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <add_to_score>
	// Output the score to the console - Potential to handle this in project.c
	move_cursor(2,4);
     592:	64 e0       	ldi	r22, 0x04	; 4
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 4d 09 	call	0x129a	; 0x129a <move_cursor>
	printf_P(PSTR("Score: %lu"), get_score());
     59e:	0e 94 f7 06 	call	0xdee	; 0xdee <get_score>
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	7f 93       	push	r23
     5a8:	6f 93       	push	r22
     5aa:	8c e7       	ldi	r24, 0x7C	; 124
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <printf_P>
}
     5b6:	0f 90       	pop	r0
     5b8:	0f 90       	pop	r0
     5ba:	0f 90       	pop	r0
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	08 95       	ret

000005ca <initialise_game>:
 
// Initialise game field:
// (1) base starts in the centre (x=3)
// (2) no projectiles initially
// (3) the maximum number of asteroids, randomly distributed.
void initialise_game(void) {
     5ca:	4f 92       	push	r4
     5cc:	5f 92       	push	r5
     5ce:	6f 92       	push	r6
     5d0:	7f 92       	push	r7
     5d2:	af 92       	push	r10
     5d4:	bf 92       	push	r11
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
	uint8_t x, y, i;
	
    basePosition = 3;
     5e6:	83 e0       	ldi	r24, 0x03	; 3
     5e8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <basePosition>
	numProjectiles = 0;
     5ec:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <numProjectiles>
	numAsteroids = 0;
     5f0:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <numAsteroids>
     5f4:	09 e5       	ldi	r16, 0x59	; 89
     5f6:	11 e0       	ldi	r17, 0x01	; 1
     5f8:	0f 2e       	mov	r0, r31
     5fa:	fd e6       	ldi	r31, 0x6D	; 109
     5fc:	af 2e       	mov	r10, r31
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	bf 2e       	mov	r11, r31
     602:	f0 2d       	mov	r31, r0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     604:	0f 2e       	mov	r0, r31
     606:	fd e0       	ldi	r31, 0x0D	; 13
     608:	4f 2e       	mov	r4, r31
     60a:	51 2c       	mov	r5, r1
     60c:	61 2c       	mov	r6, r1
     60e:	71 2c       	mov	r7, r1
     610:	f0 2d       	mov	r31, r0
		// Generate random position that does not already
		// have an asteroid.
		do {
			// Generate random x position - somewhere from 0
			// to FIELD_WIDTH - 1
			x = (uint8_t)(random() % FIELD_WIDTH);
     612:	0e 94 3e 0a 	call	0x147c	; 0x147c <random>
     616:	6b 01       	movw	r12, r22
     618:	7c 01       	movw	r14, r24
     61a:	27 e0       	ldi	r18, 0x07	; 7
     61c:	c2 22       	and	r12, r18
     61e:	dd 24       	eor	r13, r13
     620:	ee 24       	eor	r14, r14
     622:	20 e8       	ldi	r18, 0x80	; 128
     624:	f2 22       	and	r15, r18
     626:	ff 20       	and	r15, r15
     628:	84 f4       	brge	.+32     	; 0x64a <initialise_game+0x80>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	c8 1a       	sub	r12, r24
     62e:	d1 08       	sbc	r13, r1
     630:	e1 08       	sbc	r14, r1
     632:	f1 08       	sbc	r15, r1
     634:	e8 ef       	ldi	r30, 0xF8	; 248
     636:	ce 2a       	or	r12, r30
     638:	dd 24       	eor	r13, r13
     63a:	da 94       	dec	r13
     63c:	ed 2c       	mov	r14, r13
     63e:	fe 2c       	mov	r15, r14
     640:	ff ef       	ldi	r31, 0xFF	; 255
     642:	cf 1a       	sub	r12, r31
     644:	df 0a       	sbc	r13, r31
     646:	ef 0a       	sbc	r14, r31
     648:	ff 0a       	sbc	r15, r31
			// Generate random y position - somewhere from 3
			// to FIELD_HEIGHT - 1 (i.e., not in the lowest
			// three rows)
			y = (uint8_t)(3 + (random() % (FIELD_HEIGHT-3)));
     64a:	0e 94 3e 0a 	call	0x147c	; 0x147c <random>
     64e:	a3 01       	movw	r20, r6
     650:	92 01       	movw	r18, r4
     652:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__divmodsi4>
     656:	c3 e0       	ldi	r28, 0x03	; 3
     658:	c6 0f       	add	r28, r22
		} while(asteroid_at(x,y) != -1);
     65a:	6c 2f       	mov	r22, r28
     65c:	8c 2d       	mov	r24, r12
     65e:	0e 94 99 01 	call	0x332	; 0x332 <asteroid_at>
     662:	8f 3f       	cpi	r24, 0xFF	; 255
     664:	b1 f6       	brne	.-84     	; 0x612 <initialise_game+0x48>
		// If we get here, we've now found an x,y location without
		// an existing asteroid - record the position
		asteroids[i] = GAME_POSITION(x,y);
     666:	20 e1       	ldi	r18, 0x10	; 16
     668:	c2 9e       	mul	r12, r18
     66a:	b0 01       	movw	r22, r0
     66c:	11 24       	eor	r1, r1
     66e:	cf 70       	andi	r28, 0x0F	; 15
     670:	c6 2b       	or	r28, r22
     672:	f8 01       	movw	r30, r16
     674:	c1 93       	st	Z+, r28
     676:	8f 01       	movw	r16, r30
		numAsteroids++;
     678:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <numAsteroids>
     67c:	8f 5f       	subi	r24, 0xFF	; 255
     67e:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <numAsteroids>
	
    basePosition = 3;
	numProjectiles = 0;
	numAsteroids = 0;

	for(i=0; i < MAX_ASTEROIDS ; i++) {
     682:	ea 15       	cp	r30, r10
     684:	fb 05       	cpc	r31, r11
     686:	29 f6       	brne	.-118    	; 0x612 <initialise_game+0x48>

// Redraw the whole display - base, asteroids and projectiles.
// We assume all of the data structures have been appropriately populated
static void redraw_whole_display(void) {
	// clear the display
	ledmatrix_clear();
     688:	0e 94 18 05 	call	0xa30	; 0xa30 <ledmatrix_clear>
	
	// Redraw each of the elements
	redraw_base(COLOUR_BASE);
     68c:	8f ed       	ldi	r24, 0xDF	; 223
     68e:	0e 94 c1 01 	call	0x382	; 0x382 <redraw_base>
}


static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     692:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <numAsteroids>
     696:	18 16       	cp	r1, r24
     698:	84 f4       	brge	.+32     	; 0x6ba <initialise_game+0xf0>
     69a:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_asteroid(i, COLOUR_ASTEROID);
     69c:	60 ef       	ldi	r22, 0xF0	; 240
     69e:	8c 2f       	mov	r24, r28
     6a0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <redraw_asteroid>
}


static void redraw_all_asteroids(void) {
	// For each asteroid, determine it's position and redraw it
	for(uint8_t i=0; i < numAsteroids; i++) {
     6a4:	cf 5f       	subi	r28, 0xFF	; 255
     6a6:	2c 2f       	mov	r18, r28
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <numAsteroids>
     6ae:	08 2e       	mov	r0, r24
     6b0:	00 0c       	add	r0, r0
     6b2:	99 0b       	sbc	r25, r25
     6b4:	28 17       	cp	r18, r24
     6b6:	39 07       	cpc	r19, r25
     6b8:	8c f3       	brlt	.-30     	; 0x69c <initialise_game+0xd2>
}


static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     6ba:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <numProjectiles>
     6be:	18 16       	cp	r1, r24
     6c0:	84 f4       	brge	.+32     	; 0x6e2 <initialise_game+0x118>
     6c2:	c0 e0       	ldi	r28, 0x00	; 0
		redraw_projectile(i, COLOUR_PROJECTILE);
     6c4:	6f e0       	ldi	r22, 0x0F	; 15
     6c6:	8c 2f       	mov	r24, r28
     6c8:	0e 94 13 02 	call	0x426	; 0x426 <redraw_projectile>
}


static void redraw_all_projectiles(void){
	// For each projectile, determine its position and redraw it
	for(uint8_t i = 0; i < numProjectiles; i++) {
     6cc:	cf 5f       	subi	r28, 0xFF	; 255
     6ce:	2c 2f       	mov	r18, r28
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <numProjectiles>
     6d6:	08 2e       	mov	r0, r24
     6d8:	00 0c       	add	r0, r0
     6da:	99 0b       	sbc	r25, r25
     6dc:	28 17       	cp	r18, r24
     6de:	39 07       	cpc	r19, r25
     6e0:	8c f3       	brlt	.-30     	; 0x6c4 <initialise_game+0xfa>
		asteroids[i] = GAME_POSITION(x,y);
		numAsteroids++;
	}
	
	redraw_whole_display();
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	7f 90       	pop	r7
     6f8:	6f 90       	pop	r6
     6fa:	5f 90       	pop	r5
     6fc:	4f 90       	pop	r4
     6fe:	08 95       	ret

00000700 <fire_projectile>:
// Fire projectile - add it immediately above the base
// station, provided there is not already a projectile
// there. We are also limited in the number of projectiles
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
     700:	cf 93       	push	r28
	uint8_t newProjectileNumber;
	uint8_t asteroidLocation;
	if(numProjectiles < MAX_PROJECTILES && 
     702:	c0 91 58 01 	lds	r28, 0x0158	; 0x800158 <numProjectiles>
     706:	c4 30       	cpi	r28, 0x04	; 4
     708:	0c f0       	brlt	.+2      	; 0x70c <fire_projectile+0xc>
     70a:	43 c0       	rjmp	.+134    	; 0x792 <fire_projectile+0x92>
			projectile_at(basePosition, 2) == -1) {
     70c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <basePosition>
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     710:	90 e1       	ldi	r25, 0x10	; 16
     712:	89 9f       	mul	r24, r25
     714:	90 01       	movw	r18, r0
     716:	11 24       	eor	r1, r1
     718:	42 2f       	mov	r20, r18
     71a:	42 60       	ori	r20, 0x02	; 2
	for(i=0; i < numProjectiles; i++) {
     71c:	6c 2f       	mov	r22, r28
     71e:	0c 2e       	mov	r0, r28
     720:	00 0c       	add	r0, r0
     722:	77 0b       	sbc	r23, r23
     724:	16 16       	cp	r1, r22
     726:	17 06       	cpc	r1, r23
     728:	b4 f4       	brge	.+44     	; 0x756 <fire_projectile+0x56>
		if(projectiles[i] == positionToCheck) {
     72a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <projectiles>
     72e:	94 17       	cp	r25, r20
     730:	91 f1       	breq	.+100    	; 0x796 <fire_projectile+0x96>
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0a c0       	rjmp	.+20     	; 0x74a <fire_projectile+0x4a>
     736:	f9 01       	movw	r30, r18
     738:	ec 5a       	subi	r30, 0xAC	; 172
     73a:	fe 4f       	sbci	r31, 0xFE	; 254
     73c:	20 81       	ld	r18, Z
     73e:	42 13       	cpse	r20, r18
     740:	04 c0       	rjmp	.+8      	; 0x74a <fire_projectile+0x4a>
// we can have in flight (to MAX_PROJECTILES).
// Returns 1 if projectile fired, 0 otherwise.
int8_t fire_projectile(void) {
	uint8_t newProjectileNumber;
	uint8_t asteroidLocation;
	if(numProjectiles < MAX_PROJECTILES && 
     742:	9f 3f       	cpi	r25, 0xFF	; 255
     744:	41 f0       	breq	.+16     	; 0x756 <fire_projectile+0x56>
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		}
		return 1;
	} else {
		return 0;
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	27 c0       	rjmp	.+78     	; 0x798 <fire_projectile+0x98>
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     74a:	9f 5f       	subi	r25, 0xFF	; 255
     74c:	29 2f       	mov	r18, r25
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	26 17       	cp	r18, r22
     752:	37 07       	cpc	r19, r23
     754:	84 f3       	brlt	.-32     	; 0x736 <fire_projectile+0x36>
	uint8_t asteroidLocation;
	if(numProjectiles < MAX_PROJECTILES && 
			projectile_at(basePosition, 2) == -1) {
		// Have space to add projectile - add it at the x position of
		// the base, in row 2(y=2)
		newProjectileNumber = numProjectiles++;
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	9c 0f       	add	r25, r28
     75a:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <numProjectiles>
		projectiles[newProjectileNumber] = GAME_POSITION(basePosition, 2);
     75e:	ec 2f       	mov	r30, r28
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	ec 5a       	subi	r30, 0xAC	; 172
     764:	fe 4f       	sbci	r31, 0xFE	; 254
     766:	90 e1       	ldi	r25, 0x10	; 16
     768:	89 02       	muls	r24, r25
     76a:	90 01       	movw	r18, r0
     76c:	11 24       	eor	r1, r1
     76e:	22 60       	ori	r18, 0x02	; 2
     770:	20 83       	st	Z, r18
		asteroidLocation = asteroid_at(basePosition, 2);
     772:	62 e0       	ldi	r22, 0x02	; 2
     774:	0e 94 99 01 	call	0x332	; 0x332 <asteroid_at>
		// Check if the projectile immediately hits an asteroid.
		if (asteroid_at(basePosition, 2) != -1) {
     778:	8f 3f       	cpi	r24, 0xFF	; 255
     77a:	29 f0       	breq	.+10     	; 0x786 <fire_projectile+0x86>
			handle_collision(asteroidLocation, newProjectileNumber);
     77c:	6c 2f       	mov	r22, r28
     77e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <handle_collision>
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
		}
		return 1;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	09 c0       	rjmp	.+18     	; 0x798 <fire_projectile+0x98>
		asteroidLocation = asteroid_at(basePosition, 2);
		// Check if the projectile immediately hits an asteroid.
		if (asteroid_at(basePosition, 2) != -1) {
			handle_collision(asteroidLocation, newProjectileNumber);
		} else {
			redraw_projectile(newProjectileNumber, COLOUR_PROJECTILE);
     786:	6f e0       	ldi	r22, 0x0F	; 15
     788:	8c 2f       	mov	r24, r28
     78a:	0e 94 13 02 	call	0x426	; 0x426 <redraw_projectile>
		}
		return 1;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	03 c0       	rjmp	.+6      	; 0x798 <fire_projectile+0x98>
	} else {
		return 0;
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	01 c0       	rjmp	.+2      	; 0x798 <fire_projectile+0x98>
     796:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <advance_projectiles>:
}


// Move projectiles up by one position, and remove those that 
// have gone off the top or that hit an asteroid.
void advance_projectiles(void) {
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
	uint8_t x, y;
	int8_t projectileNumber;
	int8_t asteroid_location;

	projectileNumber = 0;
     7a6:	10 e0       	ldi	r17, 0x00	; 0
	while(projectileNumber < numProjectiles) {
     7a8:	31 c0       	rjmp	.+98     	; 0x80c <advance_projectiles+0x70>
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     7aa:	e1 2e       	mov	r14, r17
     7ac:	01 2e       	mov	r0, r17
     7ae:	00 0c       	add	r0, r0
     7b0:	ff 08       	sbc	r15, r15
     7b2:	f7 01       	movw	r30, r14
     7b4:	ec 5a       	subi	r30, 0xAC	; 172
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	80 81       	ld	r24, Z
		y = GET_Y_POSITION(projectiles[projectileNumber]);
     7ba:	c8 2f       	mov	r28, r24
     7bc:	cf 70       	andi	r28, 0x0F	; 15
		
		// Work out the new position (but don't update the projectile 
		// location yet - we only do that if we know the move is valid)
		y = y+1;
     7be:	cf 5f       	subi	r28, 0xFF	; 255
		
		// Check if new position would be off the top of the display
		if(y == FIELD_HEIGHT) {
     7c0:	c0 31       	cpi	r28, 0x10	; 16
     7c2:	21 f4       	brne	.+8      	; 0x7cc <advance_projectiles+0x30>
			// Yes - remove the projectile. (Note that we haven't updated
			// the position of the projectile itself - so the projectile 
			// will be removed from its old location.)
			remove_projectile(projectileNumber);
     7c4:	81 2f       	mov	r24, r17
     7c6:	0e 94 2a 02 	call	0x454	; 0x454 <remove_projectile>
     7ca:	20 c0       	rjmp	.+64     	; 0x80c <advance_projectiles+0x70>
	int8_t asteroid_location;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
		// Get the current position of the projectile
		x = GET_X_POSITION(projectiles[projectileNumber]);
     7cc:	d8 2f       	mov	r29, r24
     7ce:	d2 95       	swap	r29
     7d0:	df 70       	andi	r29, 0x0F	; 15
		} else {
			// Projectile is not going off the top of the display
			// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
			// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
			// AND THE ASTEROID.
			asteroid_location = asteroid_at(x, y);
     7d2:	6c 2f       	mov	r22, r28
     7d4:	8d 2f       	mov	r24, r29
     7d6:	0e 94 99 01 	call	0x332	; 0x332 <asteroid_at>
			if (asteroid_location != -1) {
     7da:	8f 3f       	cpi	r24, 0xFF	; 255
     7dc:	21 f0       	breq	.+8      	; 0x7e6 <advance_projectiles+0x4a>
				handle_collision(asteroid_location, projectileNumber);
     7de:	61 2f       	mov	r22, r17
     7e0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <handle_collision>
     7e4:	13 c0       	rjmp	.+38     	; 0x80c <advance_projectiles+0x70>
			} else {	
				// Remove the projectile from the display 
				redraw_projectile(projectileNumber, COLOUR_BLACK);
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	81 2f       	mov	r24, r17
     7ea:	0e 94 13 02 	call	0x426	; 0x426 <redraw_projectile>
			
				// Update the projectile's position
				projectiles[projectileNumber] = GAME_POSITION(x,y);
     7ee:	f7 01       	movw	r30, r14
     7f0:	ec 5a       	subi	r30, 0xAC	; 172
     7f2:	fe 4f       	sbci	r31, 0xFE	; 254
     7f4:	20 e1       	ldi	r18, 0x10	; 16
     7f6:	d2 9f       	mul	r29, r18
     7f8:	c0 01       	movw	r24, r0
     7fa:	11 24       	eor	r1, r1
     7fc:	cf 70       	andi	r28, 0x0F	; 15
     7fe:	c8 2b       	or	r28, r24
     800:	c0 83       	st	Z, r28
			
				// Redraw the projectile
				redraw_projectile(projectileNumber, COLOUR_PROJECTILE);
     802:	6f e0       	ldi	r22, 0x0F	; 15
     804:	81 2f       	mov	r24, r17
     806:	0e 94 13 02 	call	0x426	; 0x426 <redraw_projectile>
			
				// Move on to the next projectile (we don't do this if a projectile
				// is removed since projectiles will be shuffled in the list and the
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
     80a:	1f 5f       	subi	r17, 0xFF	; 255
	uint8_t x, y;
	int8_t projectileNumber;
	int8_t asteroid_location;

	projectileNumber = 0;
	while(projectileNumber < numProjectiles) {
     80c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <numProjectiles>
     810:	18 17       	cp	r17, r24
     812:	5c f2       	brlt	.-106    	; 0x7aa <advance_projectiles+0xe>
				// next projectile (if any) will take on the same projectile number)
				projectileNumber++;
			}
		}			
	}
}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	08 95       	ret

00000820 <is_game_over>:


// Returns 1 if the game is over, 0 otherwise.
int8_t is_game_over(void) {
	return game_over;
}
     820:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <game_over>
     824:	08 95       	ret

00000826 <toggle_game_over>:

/******** INTERNAL FUNCTIONS ****************/

// Change the state of game over
void toggle_game_over() {
	game_over = 1 - game_over;
     826:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <game_over>
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	89 1b       	sub	r24, r25
     82e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <game_over>
     832:	08 95       	ret

00000834 <move_base>:
// The direction argument has the value MOVE_LEFT or
// MOVE_RIGHT. The move succeeds if the base isn't all 
// the way to one side, e.g., not permitted to move
// left if basePosition is already 0.
// Returns 1 if move successful, 0 otherwise.
int8_t move_base(int8_t direction) {	
     834:	cf 93       	push	r28
     836:	c8 2f       	mov	r28, r24
	// (and eventually wrap around - e.g. subtracting 1 from
	// basePosition 256 times will eventually bring it back to
	// same value.
	
	// We erase the base from its current position first
	redraw_base(COLOUR_BLACK);
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	0e 94 c1 01 	call	0x382	; 0x382 <redraw_base>
	
	if (direction == MOVE_LEFT) {
     83e:	c1 11       	cpse	r28, r1
     840:	08 c0       	rjmp	.+16     	; 0x852 <move_base+0x1e>
		// Check if the user wants to move left
		if (basePosition != 0) {
     842:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <basePosition>
     846:	88 23       	and	r24, r24
     848:	59 f0       	breq	.+22     	; 0x860 <move_base+0x2c>
			// Check bounds -> move left.
			basePosition--;
     84a:	81 50       	subi	r24, 0x01	; 1
     84c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <basePosition>
     850:	07 c0       	rjmp	.+14     	; 0x860 <move_base+0x2c>
		}
	} else if (basePosition != 7){
     852:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <basePosition>
     856:	87 30       	cpi	r24, 0x07	; 7
     858:	19 f0       	breq	.+6      	; 0x860 <move_base+0x2c>
		// Assume right press, check bounds -> move right.
		basePosition++;
     85a:	8f 5f       	subi	r24, 0xFF	; 255
     85c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <basePosition>
	}
	
	// Check if the base is being moved into an asteroid. 
	// We don't need to check the middle as it is impossible to reach.
	if (asteroid_at(basePosition, 1) != -1 ||  asteroid_at(basePosition - 1, 0) != -1 
     860:	c0 91 6d 01 	lds	r28, 0x016D	; 0x80016d <basePosition>
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	8c 2f       	mov	r24, r28
     868:	0e 94 99 01 	call	0x332	; 0x332 <asteroid_at>
     86c:	8f 3f       	cpi	r24, 0xFF	; 255
     86e:	69 f4       	brne	.+26     	; 0x88a <move_base+0x56>
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	8c 0f       	add	r24, r28
     874:	0e 94 99 01 	call	0x332	; 0x332 <asteroid_at>
     878:	8f 3f       	cpi	r24, 0xFF	; 255
     87a:	39 f4       	brne	.+14     	; 0x88a <move_base+0x56>
	|| asteroid_at(basePosition + 1, 0) != -1) {
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	8c 0f       	add	r24, r28
     882:	0e 94 99 01 	call	0x332	; 0x332 <asteroid_at>
     886:	8f 3f       	cpi	r24, 0xFF	; 255
     888:	11 f0       	breq	.+4      	; 0x88e <move_base+0x5a>
		toggle_game_over();
     88a:	0e 94 13 04 	call	0x826	; 0x826 <toggle_game_over>
	}
	
	// Redraw the base
	redraw_base(COLOUR_BASE);
     88e:	8f ed       	ldi	r24, 0xDF	; 223
     890:	0e 94 c1 01 	call	0x382	; 0x382 <redraw_base>
	
	return 1;
}
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <advance_asteroids>:
}


// Move asteroids down by one position, and remove those that
// have gone off the bottom or that hit a projectile.
void advance_asteroids(void) {
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	bf 92       	push	r11
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
		uint8_t x, y;
		int8_t asteroidNumber;
		int8_t projectile_location;

		asteroidNumber = 0;
     8ac:	b1 2c       	mov	r11, r1
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
		if(projectiles[i] == positionToCheck) {
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f4 e5       	ldi	r31, 0x54	; 84
     8b2:	8f 2e       	mov	r8, r31
     8b4:	f1 e0       	ldi	r31, 0x01	; 1
     8b6:	9f 2e       	mov	r9, r31
     8b8:	f0 2d       	mov	r31, r0
		uint8_t x, y;
		int8_t asteroidNumber;
		int8_t projectile_location;

		asteroidNumber = 0;
		while(asteroidNumber < numAsteroids) {
     8ba:	60 c0       	rjmp	.+192    	; 0x97c <__stack+0x7d>
			// Get the current position of the asteroid
			x = GET_X_POSITION(asteroids[asteroidNumber]);
     8bc:	eb 2c       	mov	r14, r11
     8be:	0b 2c       	mov	r0, r11
     8c0:	00 0c       	add	r0, r0
     8c2:	ff 08       	sbc	r15, r15
     8c4:	f7 01       	movw	r30, r14
     8c6:	e7 5a       	subi	r30, 0xA7	; 167
     8c8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ca:	c0 81       	ld	r28, Z
			y = GET_Y_POSITION(asteroids[asteroidNumber]);
     8cc:	8c 2f       	mov	r24, r28
     8ce:	8f 70       	andi	r24, 0x0F	; 15
			
			// Work out the new position (but don't update the asteroid
			// location yet - we only do that if we know the move is valid)
			y = y - 1;
     8d0:	1f ef       	ldi	r17, 0xFF	; 255
     8d2:	18 0f       	add	r17, r24
// Check whether there is a projectile at a given position.
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
     8d4:	c2 95       	swap	r28
     8d6:	cf 70       	andi	r28, 0x0F	; 15
     8d8:	d0 e0       	ldi	r29, 0x00	; 0
     8da:	ce 01       	movw	r24, r28
     8dc:	82 95       	swap	r24
     8de:	92 95       	swap	r25
     8e0:	90 7f       	andi	r25, 0xF0	; 240
     8e2:	98 27       	eor	r25, r24
     8e4:	80 7f       	andi	r24, 0xF0	; 240
     8e6:	98 27       	eor	r25, r24
     8e8:	91 2f       	mov	r25, r17
     8ea:	9f 70       	andi	r25, 0x0F	; 15
     8ec:	d9 2e       	mov	r13, r25
     8ee:	d8 2a       	or	r13, r24
	for(i=0; i < numProjectiles; i++) {
     8f0:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <numProjectiles>
     8f4:	02 2e       	mov	r0, r18
     8f6:	00 0c       	add	r0, r0
     8f8:	33 0b       	sbc	r19, r19
     8fa:	12 16       	cp	r1, r18
     8fc:	13 06       	cpc	r1, r19
     8fe:	dc f4       	brge	.+54     	; 0x936 <__stack+0x37>
		if(projectiles[i] == positionToCheck) {
     900:	f4 01       	movw	r30, r8
     902:	80 81       	ld	r24, Z
     904:	8d 15       	cp	r24, r13
     906:	91 f0       	breq	.+36     	; 0x92c <__stack+0x2d>
     908:	60 e0       	ldi	r22, 0x00	; 0
     90a:	09 c0       	rjmp	.+18     	; 0x91e <__stack+0x1f>
     90c:	fc 01       	movw	r30, r24
     90e:	ec 5a       	subi	r30, 0xAC	; 172
     910:	fe 4f       	sbci	r31, 0xFE	; 254
     912:	80 81       	ld	r24, Z
     914:	d8 12       	cpse	r13, r24
     916:	03 c0       	rjmp	.+6      	; 0x91e <__stack+0x1f>
				// Asteroid is not going off the bottom of the display
				// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
				// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
				// AND THE ASTEROID.
				projectile_location = projectile_at(x, y);
				if (projectile_location != -1) {
     918:	6f 3f       	cpi	r22, 0xFF	; 255
     91a:	49 f4       	brne	.+18     	; 0x92e <__stack+0x2f>
     91c:	0c c0       	rjmp	.+24     	; 0x936 <__stack+0x37>
// Returns -1 if there is no projectile, otherwise we return
// the projectile number (from 0 to numProjectiles-1).
static int8_t projectile_at(uint8_t x, uint8_t y) {
	uint8_t i;
	uint8_t positionToCheck = GAME_POSITION(x,y);
	for(i=0; i < numProjectiles; i++) {
     91e:	6f 5f       	subi	r22, 0xFF	; 255
     920:	86 2f       	mov	r24, r22
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	82 17       	cp	r24, r18
     926:	93 07       	cpc	r25, r19
     928:	8c f3       	brlt	.-30     	; 0x90c <__stack+0xd>
     92a:	05 c0       	rjmp	.+10     	; 0x936 <__stack+0x37>
		if(projectiles[i] == positionToCheck) {
			// Projectile i is at the given position
			return i;
     92c:	60 e0       	ldi	r22, 0x00	; 0
				// CHECK HERE IF THE NEW PROJECTILE LOCATION CORRESPONDS TO
				// AN ASTEROID LOCATION. IF IT DOES, REMOVE THE PROJECTILE
				// AND THE ASTEROID.
				projectile_location = projectile_at(x, y);
				if (projectile_location != -1) {
					handle_collision(asteroidNumber, projectile_location);
     92e:	8b 2d       	mov	r24, r11
     930:	0e 94 53 02 	call	0x4a6	; 0x4a6 <handle_collision>
     934:	0d c0       	rjmp	.+26     	; 0x950 <__stack+0x51>
				} else {
					// Remove the asteroid from the display
					redraw_asteroid(asteroidNumber, COLOUR_BLACK);
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	8b 2d       	mov	r24, r11
     93a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <redraw_asteroid>
					
					// Update the asteroid's position
					asteroids[asteroidNumber] = GAME_POSITION(x,y);
     93e:	f7 01       	movw	r30, r14
     940:	e7 5a       	subi	r30, 0xA7	; 167
     942:	fe 4f       	sbci	r31, 0xFE	; 254
     944:	d0 82       	st	Z, r13
					
					// Redraw the asteroid
					redraw_asteroid(asteroidNumber, COLOUR_ASTEROID);
     946:	60 ef       	ldi	r22, 0xF0	; 240
     948:	8b 2d       	mov	r24, r11
     94a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <redraw_asteroid>
					
					// Move on to the next asteroid
					asteroidNumber++;
     94e:	b3 94       	inc	r11
}


// Check whether the base is at a given location.
static int8_t base_at(uint8_t x, uint8_t y) {
	if (y > 1) {
     950:	12 30       	cpi	r17, 0x02	; 2
     952:	a0 f4       	brcc	.+40     	; 0x97c <__stack+0x7d>
		// This is too high for the base.
		return 0;
	}
	
	if (x == basePosition) {
     954:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <basePosition>
     958:	08 2e       	mov	r0, r24
     95a:	00 0c       	add	r0, r0
     95c:	99 0b       	sbc	r25, r25
     95e:	c8 17       	cp	r28, r24
     960:	d9 07       	cpc	r29, r25
     962:	91 f0       	breq	.+36     	; 0x988 <__stack+0x89>
		// This can occure for both y = 1 and y = 0.
		return 1;
	} else if (y == 0) {
     964:	11 11       	cpse	r17, r1
     966:	0a c0       	rjmp	.+20     	; 0x97c <__stack+0x7d>
		// Check the sides of the base.
		if (x == basePosition -1 || x == basePosition + 1) {
     968:	9c 01       	movw	r18, r24
     96a:	21 50       	subi	r18, 0x01	; 1
     96c:	31 09       	sbc	r19, r1
     96e:	c2 17       	cp	r28, r18
     970:	d3 07       	cpc	r29, r19
     972:	51 f0       	breq	.+20     	; 0x988 <__stack+0x89>
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	c8 17       	cp	r28, r24
     978:	d9 07       	cpc	r29, r25
     97a:	31 f0       	breq	.+12     	; 0x988 <__stack+0x89>
		uint8_t x, y;
		int8_t asteroidNumber;
		int8_t projectile_location;

		asteroidNumber = 0;
		while(asteroidNumber < numAsteroids) {
     97c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <numAsteroids>
     980:	b8 16       	cp	r11, r24
     982:	0c f4       	brge	.+2      	; 0x986 <__stack+0x87>
     984:	9b cf       	rjmp	.-202    	; 0x8bc <advance_asteroids+0x22>
     986:	03 c0       	rjmp	.+6      	; 0x98e <__stack+0x8f>
					// Move on to the next asteroid
					asteroidNumber++;
				}
				// If the asteroid collides with the base, handle the event.
				if (base_at(x, y)) {
					toggle_game_over();
     988:	0e 94 13 04 	call	0x826	; 0x826 <toggle_game_over>
     98c:	f7 cf       	rjmp	.-18     	; 0x97c <__stack+0x7d>
				}
			}
		}
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	bf 90       	pop	r11
     99c:	9f 90       	pop	r9
     99e:	8f 90       	pop	r8
     9a0:	08 95       	ret

000009a2 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     9a2:	80 e8       	ldi	r24, 0x80	; 128
     9a4:	0e 94 1f 09 	call	0x123e	; 0x123e <spi_setup_master>
     9a8:	08 95       	ret

000009aa <ledmatrix_update_pixel>:
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	80 31       	cpi	r24, 0x10	; 16
     9b2:	b0 f4       	brcc	.+44     	; 0x9e0 <ledmatrix_update_pixel+0x36>
     9b4:	68 30       	cpi	r22, 0x08	; 8
     9b6:	a0 f4       	brcc	.+40     	; 0x9e0 <ledmatrix_update_pixel+0x36>
     9b8:	14 2f       	mov	r17, r20
     9ba:	c6 2f       	mov	r28, r22
     9bc:	d8 2f       	mov	r29, r24
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	0e 94 47 09 	call	0x128e	; 0x128e <spi_send_byte>
     9c4:	6c 2f       	mov	r22, r28
     9c6:	67 70       	andi	r22, 0x07	; 7
     9c8:	80 e1       	ldi	r24, 0x10	; 16
     9ca:	68 9f       	mul	r22, r24
     9cc:	90 01       	movw	r18, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	8d 2f       	mov	r24, r29
     9d2:	8f 70       	andi	r24, 0x0F	; 15
     9d4:	82 2b       	or	r24, r18
     9d6:	0e 94 47 09 	call	0x128e	; 0x128e <spi_send_byte>
     9da:	81 2f       	mov	r24, r17
     9dc:	0e 94 47 09 	call	0x128e	; 0x128e <spi_send_byte>
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	08 95       	ret

000009e8 <ledmatrix_update_column>:
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	80 31       	cpi	r24, 0x10	; 16
     9f2:	90 f4       	brcc	.+36     	; 0xa18 <ledmatrix_update_column+0x30>
     9f4:	8b 01       	movw	r16, r22
     9f6:	c8 2f       	mov	r28, r24
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	0e 94 47 09 	call	0x128e	; 0x128e <spi_send_byte>
     9fe:	8c 2f       	mov	r24, r28
     a00:	8f 70       	andi	r24, 0x0F	; 15
     a02:	0e 94 47 09 	call	0x128e	; 0x128e <spi_send_byte>
     a06:	e8 01       	movw	r28, r16
     a08:	08 5f       	subi	r16, 0xF8	; 248
     a0a:	1f 4f       	sbci	r17, 0xFF	; 255
     a0c:	89 91       	ld	r24, Y+
     a0e:	0e 94 47 09 	call	0x128e	; 0x128e <spi_send_byte>
     a12:	c0 17       	cp	r28, r16
     a14:	d1 07       	cpc	r29, r17
     a16:	d1 f7       	brne	.-12     	; 0xa0c <ledmatrix_update_column+0x24>
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	08 95       	ret

00000a22 <ledmatrix_shift_display_left>:
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	0e 94 47 09 	call	0x128e	; 0x128e <spi_send_byte>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	0e 94 47 09 	call	0x128e	; 0x128e <spi_send_byte>
     a2e:	08 95       	ret

00000a30 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     a30:	8f e0       	ldi	r24, 0x0F	; 15
     a32:	0e 94 47 09 	call	0x128e	; 0x128e <spi_send_byte>
     a36:	08 95       	ret

00000a38 <initialise_hardware>:
		handle_game_over();
	}
}

void initialise_hardware(void) {
	ledmatrix_setup();
     a38:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <ledmatrix_setup>
	init_button_interrupts();
     a3c:	0e 94 10 01 	call	0x220	; 0x220 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200,0);
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	7b e4       	ldi	r23, 0x4B	; 75
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 37 08 	call	0x106e	; 0x106e <init_serial_stdio>
	
	init_timer0();
     a4e:	0e 94 67 09 	call	0x12ce	; 0x12ce <init_timer0>
	
	// Initialise the seven_seg display, 
	// with PORT A and PORT C pin 0 as outputs.
	DDRA = 0xFF;
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	81 b9       	out	0x01, r24	; 1
	DDRC = 0x01;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	87 b9       	out	0x07, r24	; 7
	
	// Turn on global interrupts
	sei();
     a5a:	78 94       	sei
     a5c:	08 95       	ret

00000a5e <splash_screen>:
}

void splash_screen(void) {
	// Clear terminal screen and output a message
	clear_terminal();
     a5e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <clear_terminal>
	move_cursor(10,10);
     a62:	6a e0       	ldi	r22, 0x0A	; 10
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	8a e0       	ldi	r24, 0x0A	; 10
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 4d 09 	call	0x129a	; 0x129a <move_cursor>
	printf_P(PSTR("Asteroids"));
     a6e:	8c ee       	ldi	r24, 0xEC	; 236
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	9f 93       	push	r25
     a74:	8f 93       	push	r24
     a76:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <printf_P>
	move_cursor(10,12);
     a7a:	6c e0       	ldi	r22, 0x0C	; 12
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	8a e0       	ldi	r24, 0x0A	; 10
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 4d 09 	call	0x129a	; 0x129a <move_cursor>
	printf_P(PSTR("CSSE2010/7201 project by Matthew Burton"));
     a86:	84 ec       	ldi	r24, 0xC4	; 196
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	9f 93       	push	r25
     a8c:	8f 93       	push	r24
     a8e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <printf_P>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
     a92:	0e 94 18 05 	call	0xa30	; 0xa30 <ledmatrix_clear>
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
	while(1) {
		set_scrolling_display_text("ASTEROIDS MATTHEW BURTON S45293867", COLOUR_GREEN);
     a9e:	60 ef       	ldi	r22, 0xF0	; 240
     aa0:	8d e1       	ldi	r24, 0x1D	; 29
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	0e 94 00 07 	call	0xe00	; 0xe00 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     aa8:	0d c0       	rjmp	.+26     	; 0xac4 <splash_screen+0x66>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aaa:	2f e3       	ldi	r18, 0x3F	; 63
     aac:	8d e0       	ldi	r24, 0x0D	; 13
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	21 50       	subi	r18, 0x01	; 1
     ab2:	80 40       	sbci	r24, 0x00	; 0
     ab4:	90 40       	sbci	r25, 0x00	; 0
     ab6:	e1 f7       	brne	.-8      	; 0xab0 <splash_screen+0x52>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <splash_screen+0x5c>
     aba:	00 00       	nop
			_delay_ms(125);
			if(button_pushed() != NO_BUTTON_PUSHED) {
     abc:	0e 94 1e 01 	call	0x23c	; 0x23c <button_pushed>
     ac0:	8f 3f       	cpi	r24, 0xFF	; 255
     ac2:	29 f4       	brne	.+10     	; 0xace <splash_screen+0x70>
	ledmatrix_clear();
	while(1) {
		set_scrolling_display_text("ASTEROIDS MATTHEW BURTON S45293867", COLOUR_GREEN);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed
		while(scroll_display()) {
     ac4:	0e 94 0f 07 	call	0xe1e	; 0xe1e <scroll_display>
     ac8:	81 11       	cpse	r24, r1
     aca:	ef cf       	rjmp	.-34     	; 0xaaa <splash_screen+0x4c>
     acc:	e8 cf       	rjmp	.-48     	; 0xa9e <splash_screen+0x40>
     ace:	08 95       	ret

00000ad0 <new_game>:
	}
}

void new_game(void) {
	// Initialise the game and display
	initialise_game();
     ad0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <initialise_game>
	
	// Clear the serial terminal
	clear_terminal();
     ad4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <clear_terminal>
	move_cursor(2,2);
     ad8:	62 e0       	ldi	r22, 0x02	; 2
     ada:	70 e0       	ldi	r23, 0x00	; 0
     adc:	82 e0       	ldi	r24, 0x02	; 2
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 4d 09 	call	0x129a	; 0x129a <move_cursor>
	printf_P(PSTR("Asteroids"));
     ae4:	8a eb       	ldi	r24, 0xBA	; 186
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	9f 93       	push	r25
     aea:	8f 93       	push	r24
     aec:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <printf_P>
	
	// Initialise the score
	init_score();
     af0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <init_score>
	move_cursor(2,4);
     af4:	64 e0       	ldi	r22, 0x04	; 4
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	0e 94 4d 09 	call	0x129a	; 0x129a <move_cursor>
	printf_P(PSTR("Score: %lu"), get_score());
     b00:	0e 94 f7 06 	call	0xdee	; 0xdee <get_score>
     b04:	9f 93       	push	r25
     b06:	8f 93       	push	r24
     b08:	7f 93       	push	r23
     b0a:	6f 93       	push	r22
     b0c:	8f ea       	ldi	r24, 0xAF	; 175
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <printf_P>
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
     b18:	0e 94 1e 01 	call	0x23c	; 0x23c <button_pushed>
	clear_serial_input_buffer();
     b1c:	0e 94 85 08 	call	0x110a	; 0x110a <clear_serial_input_buffer>
}
     b20:	8d b7       	in	r24, 0x3d	; 61
     b22:	9e b7       	in	r25, 0x3e	; 62
     b24:	08 96       	adiw	r24, 0x08	; 8
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	f8 94       	cli
     b2a:	9e bf       	out	0x3e, r25	; 62
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	8d bf       	out	0x3d, r24	; 61
     b30:	08 95       	ret

00000b32 <play_game>:

void play_game(void) {
     b32:	2f 92       	push	r2
     b34:	3f 92       	push	r3
     b36:	4f 92       	push	r4
     b38:	5f 92       	push	r5
     b3a:	6f 92       	push	r6
     b3c:	7f 92       	push	r7
     b3e:	8f 92       	push	r8
     b40:	9f 92       	push	r9
     b42:	af 92       	push	r10
     b44:	bf 92       	push	r11
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	2b 97       	sbiw	r28, 0x0b	; 11
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
	uint8_t seven_seg_data[10] = {63,6,91,79,102,109,125,7,127,111};
     b66:	8a e0       	ldi	r24, 0x0A	; 10
     b68:	e3 e1       	ldi	r30, 0x13	; 19
     b6a:	f1 e0       	ldi	r31, 0x01	; 1
     b6c:	de 01       	movw	r26, r28
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	01 90       	ld	r0, Z+
     b72:	0d 92       	st	X+, r0
     b74:	8a 95       	dec	r24
     b76:	e1 f7       	brne	.-8      	; 0xb70 <play_game+0x3e>
	volatile uint8_t seven_seg_cc = 0;
     b78:	1b 86       	std	Y+11, r1	; 0x0b
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Get the current time and remember this as the last time the projectiles
    // were moved.
	current_time = get_current_time();
     b7a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <get_current_time>
     b7e:	2b 01       	movw	r4, r22
     b80:	3c 01       	movw	r6, r24
	last_move_time = current_time;
	last_move_asteroid = current_time;
     b82:	4b 01       	movw	r8, r22
     b84:	5c 01       	movw	r10, r24
	uint8_t seven_seg_data[10] = {63,6,91,79,102,109,125,7,127,111};
	volatile uint8_t seven_seg_cc = 0;
	uint32_t current_time, last_move_time, last_move_asteroid;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
     b86:	00 e0       	ldi	r16, 0x00	; 0
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     b88:	33 24       	eor	r3, r3
     b8a:	3a 94       	dec	r3
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     b8c:	68 94       	set
     b8e:	22 24       	eor	r2, r2
     b90:	21 f8       	bld	r2, 1
	current_time = get_current_time();
	last_move_time = current_time;
	last_move_asteroid = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
     b92:	ae c0       	rjmp	.+348    	; 0xcf0 <play_game+0x1be>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		button = button_pushed();
     b94:	0e 94 1e 01 	call	0x23c	; 0x23c <button_pushed>
     b98:	18 2f       	mov	r17, r24
		
		if(button == NO_BUTTON_PUSHED) {
     b9a:	8f 3f       	cpi	r24, 0xFF	; 255
     b9c:	09 f0       	breq	.+2      	; 0xba0 <play_game+0x6e>
     b9e:	b2 c0       	rjmp	.+356    	; 0xd04 <play_game+0x1d2>
			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
     ba0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <serial_input_available>
     ba4:	88 23       	and	r24, r24
     ba6:	09 f4       	brne	.+2      	; 0xbaa <play_game+0x78>
     ba8:	3f c0       	rjmp	.+126    	; 0xc28 <play_game+0xf6>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
     baa:	e6 e8       	ldi	r30, 0x86	; 134
     bac:	f2 e0       	ldi	r31, 0x02	; 2
     bae:	80 81       	ld	r24, Z
     bb0:	91 81       	ldd	r25, Z+1	; 0x01
     bb2:	0e 94 95 0a 	call	0x152a	; 0x152a <fgetc>
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
     bb6:	01 11       	cpse	r16, r1
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <play_game+0x92>
     bba:	8b 31       	cpi	r24, 0x1B	; 27
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <play_game+0x8e>
     bbe:	9e c0       	rjmp	.+316    	; 0xcfc <play_game+0x1ca>
     bc0:	93 2d       	mov	r25, r3
     bc2:	0b c0       	rjmp	.+22     	; 0xbda <play_game+0xa8>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
     bc4:	01 30       	cpi	r16, 0x01	; 1
     bc6:	29 f4       	brne	.+10     	; 0xbd2 <play_game+0xa0>
     bc8:	8b 35       	cpi	r24, 0x5B	; 91
     bca:	09 f4       	brne	.+2      	; 0xbce <play_game+0x9c>
     bcc:	99 c0       	rjmp	.+306    	; 0xd00 <play_game+0x1ce>
     bce:	93 2d       	mov	r25, r3
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <play_game+0xa8>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
     bd2:	02 30       	cpi	r16, 0x02	; 2
     bd4:	29 f4       	brne	.+10     	; 0xbe0 <play_game+0xae>
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
     bd6:	98 2f       	mov	r25, r24
					serial_input = -1;  // Don't further process this character - we
     bd8:	83 2d       	mov	r24, r3
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     bda:	94 34       	cpi	r25, 0x44	; 68
     bdc:	11 f4       	brne	.+4      	; 0xbe2 <play_game+0xb0>
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <play_game+0xbe>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     be0:	93 2d       	mov	r25, r3
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     be2:	28 2f       	mov	r18, r24
     be4:	2f 7d       	andi	r18, 0xDF	; 223
     be6:	2c 34       	cpi	r18, 0x4C	; 76
     be8:	09 f0       	breq	.+2      	; 0xbec <play_game+0xba>
     bea:	90 c0       	rjmp	.+288    	; 0xd0c <play_game+0x1da>
     bec:	00 e0       	ldi	r16, 0x00	; 0
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <play_game+0xc0>
     bf0:	00 e0       	ldi	r16, 0x00	; 0
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			move_base(MOVE_LEFT);
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	0e 94 1a 04 	call	0x834	; 0x834 <move_base>
     bf8:	17 c0       	rjmp	.+46     	; 0xc28 <play_game+0xf6>
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
     bfa:	80 32       	cpi	r24, 0x20	; 32
     bfc:	31 f4       	brne	.+12     	; 0xc0a <play_game+0xd8>
     bfe:	00 e0       	ldi	r16, 0x00	; 0
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <play_game+0xd2>
     c02:	00 e0       	ldi	r16, 0x00	; 0
			// Button 2 pressed or up cursor key escape sequence completed OR
			// space bar pressed - attempt to fire projectile
			fire_projectile();
     c04:	0e 94 80 03 	call	0x700	; 0x700 <fire_projectile>
     c08:	0f c0       	rjmp	.+30     	; 0xc28 <play_game+0xf6>
     c0a:	00 e0       	ldi	r16, 0x00	; 0
		} else if(button==1 || escape_sequence_char=='B') {
     c0c:	11 30       	cpi	r17, 0x01	; 1
     c0e:	61 f0       	breq	.+24     	; 0xc28 <play_game+0xf6>
     c10:	92 34       	cpi	r25, 0x42	; 66
     c12:	51 f0       	breq	.+20     	; 0xc28 <play_game+0xf6>
			// Button 1 pressed OR down cursor key escape sequence completed
			// Ignore at present
		} else if(button==0 || escape_sequence_char=='C' || serial_input=='R' || serial_input=='r') {
     c14:	11 23       	and	r17, r17
     c16:	29 f0       	breq	.+10     	; 0xc22 <play_game+0xf0>
     c18:	93 34       	cpi	r25, 0x43	; 67
     c1a:	19 f0       	breq	.+6      	; 0xc22 <play_game+0xf0>
     c1c:	8f 7d       	andi	r24, 0xDF	; 223
     c1e:	82 35       	cpi	r24, 0x52	; 82
     c20:	19 f4       	brne	.+6      	; 0xc28 <play_game+0xf6>
			// Button 0 pressed OR right cursor key escape sequence completed OR
			// letter R (lowercase or uppercase) pressed - attempt to move right
			move_base(MOVE_RIGHT);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e 94 1a 04 	call	0x834	; 0x834 <move_base>
			// pressed again
		} 
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		current_time = get_current_time();
     c28:	0e 94 7f 09 	call	0x12fe	; 0x12fe <get_current_time>
     c2c:	6b 01       	movw	r12, r22
     c2e:	7c 01       	movw	r14, r24
		if(!is_game_over() && current_time >= last_move_time + 200) {
     c30:	0e 94 10 04 	call	0x820	; 0x820 <is_game_over>
     c34:	81 11       	cpse	r24, r1
     c36:	0f c0       	rjmp	.+30     	; 0xc56 <play_game+0x124>
     c38:	d3 01       	movw	r26, r6
     c3a:	c2 01       	movw	r24, r4
     c3c:	88 53       	subi	r24, 0x38	; 56
     c3e:	9f 4f       	sbci	r25, 0xFF	; 255
     c40:	af 4f       	sbci	r26, 0xFF	; 255
     c42:	bf 4f       	sbci	r27, 0xFF	; 255
     c44:	c8 16       	cp	r12, r24
     c46:	d9 06       	cpc	r13, r25
     c48:	ea 06       	cpc	r14, r26
     c4a:	fb 06       	cpc	r15, r27
     c4c:	20 f0       	brcs	.+8      	; 0xc56 <play_game+0x124>
			// 500ms (0.5 second) has passed since the last time we moved
			// the projectiles - move them - and keep track of the time we 
			// moved them
			advance_projectiles();
     c4e:	0e 94 ce 03 	call	0x79c	; 0x79c <advance_projectiles>
			
			last_move_time = current_time;
     c52:	26 01       	movw	r4, r12
     c54:	37 01       	movw	r6, r14
		}

		if(current_time >= last_move_asteroid + 1000) {
     c56:	d5 01       	movw	r26, r10
     c58:	c4 01       	movw	r24, r8
     c5a:	88 51       	subi	r24, 0x18	; 24
     c5c:	9c 4f       	sbci	r25, 0xFC	; 252
     c5e:	af 4f       	sbci	r26, 0xFF	; 255
     c60:	bf 4f       	sbci	r27, 0xFF	; 255
     c62:	c8 16       	cp	r12, r24
     c64:	d9 06       	cpc	r13, r25
     c66:	ea 06       	cpc	r14, r26
     c68:	fb 06       	cpc	r15, r27
     c6a:	20 f0       	brcs	.+8      	; 0xc74 <play_game+0x142>
			// 4000ms (4 seconds) has passed since the last time we moved
			// the asteroids - move them - and keep track of the time we
			// moved them
			advance_asteroids();
     c6c:	0e 94 4d 04 	call	0x89a	; 0x89a <advance_asteroids>
			
			last_move_asteroid = current_time;
     c70:	46 01       	movw	r8, r12
     c72:	57 01       	movw	r10, r14
		
		/* Displays the score on the seven segment display. 
		Wraps around at 100. The refresh rate is every 3 milliseconds. 
		Might need to use above method to improve performance.
		*/
		if (current_time % 3 == 0) {
     c74:	c7 01       	movw	r24, r14
     c76:	b6 01       	movw	r22, r12
     c78:	23 e0       	ldi	r18, 0x03	; 3
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	0e 94 b2 09 	call	0x1364	; 0x1364 <__udivmodsi4>
     c84:	67 2b       	or	r22, r23
     c86:	68 2b       	or	r22, r24
     c88:	69 2b       	or	r22, r25
     c8a:	91 f5       	brne	.+100    	; 0xcf0 <play_game+0x1be>
			// Switch the digit
			seven_seg_cc = 1 ^ seven_seg_cc;
     c8c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	89 27       	eor	r24, r25
     c92:	8b 87       	std	Y+11, r24	; 0x0b
			if (seven_seg_cc == 0) {
     c94:	8b 85       	ldd	r24, Y+11	; 0x0b
     c96:	81 11       	cpse	r24, r1
     c98:	11 c0       	rjmp	.+34     	; 0xcbc <play_game+0x18a>
				// Set the first digit
				PORTA = seven_seg_data[get_score() % 10];
     c9a:	0e 94 f7 06 	call	0xdee	; 0xdee <get_score>
     c9e:	2a e0       	ldi	r18, 0x0A	; 10
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	0e 94 b2 09 	call	0x1364	; 0x1364 <__udivmodsi4>
     caa:	e1 e0       	ldi	r30, 0x01	; 1
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	ec 0f       	add	r30, r28
     cb0:	fd 1f       	adc	r31, r29
     cb2:	e6 0f       	add	r30, r22
     cb4:	f7 1f       	adc	r31, r23
     cb6:	80 81       	ld	r24, Z
     cb8:	82 b9       	out	0x02, r24	; 2
     cba:	18 c0       	rjmp	.+48     	; 0xcec <play_game+0x1ba>
			} else {
				// Set the second digit
				PORTA = seven_seg_data[(get_score() / 10) % 10];
     cbc:	0e 94 f7 06 	call	0xdee	; 0xdee <get_score>
     cc0:	2a e0       	ldi	r18, 0x0A	; 10
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	0e 94 b2 09 	call	0x1364	; 0x1364 <__udivmodsi4>
     ccc:	ca 01       	movw	r24, r20
     cce:	b9 01       	movw	r22, r18
     cd0:	2a e0       	ldi	r18, 0x0A	; 10
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	0e 94 b2 09 	call	0x1364	; 0x1364 <__udivmodsi4>
     cdc:	e1 e0       	ldi	r30, 0x01	; 1
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	ec 0f       	add	r30, r28
     ce2:	fd 1f       	adc	r31, r29
     ce4:	e6 0f       	add	r30, r22
     ce6:	f7 1f       	adc	r31, r23
     ce8:	80 81       	ld	r24, Z
     cea:	82 b9       	out	0x02, r24	; 2
			}
			/* Output the digit selection (CC) bit */
			PORTC = seven_seg_cc;
     cec:	8b 85       	ldd	r24, Y+11	; 0x0b
     cee:	88 b9       	out	0x08, r24	; 8
	current_time = get_current_time();
	last_move_time = current_time;
	last_move_asteroid = current_time;
	
	// We play the game until it's over
	while(!is_game_over()) {
     cf0:	0e 94 10 04 	call	0x820	; 0x820 <is_game_over>
     cf4:	88 23       	and	r24, r24
     cf6:	09 f4       	brne	.+2      	; 0xcfa <play_game+0x1c8>
     cf8:	4d cf       	rjmp	.-358    	; 0xb94 <play_game+0x62>
     cfa:	12 c0       	rjmp	.+36     	; 0xd20 <play_game+0x1ee>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
     cfc:	01 e0       	ldi	r16, 0x01	; 1
     cfe:	94 cf       	rjmp	.-216    	; 0xc28 <play_game+0xf6>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
     d00:	02 2d       	mov	r16, r2
     d02:	92 cf       	rjmp	.-220    	; 0xc28 <play_game+0xf6>
				}
			}
		}
		
		// Process the input. 
		if(button==3 || escape_sequence_char=='D' || serial_input=='L' || serial_input=='l') {
     d04:	83 30       	cpi	r24, 0x03	; 3
     d06:	09 f4       	brne	.+2      	; 0xd0a <play_game+0x1d8>
     d08:	74 cf       	rjmp	.-280    	; 0xbf2 <play_game+0xc0>
     d0a:	04 c0       	rjmp	.+8      	; 0xd14 <play_game+0x1e2>
			// Button 3 pressed OR left cursor key escape sequence completed OR
			// letter L (lowercase or uppercase) pressed - attempt to move left
			move_base(MOVE_LEFT);
		} else if(button==2 || escape_sequence_char=='A' || serial_input==' ') {
     d0c:	91 34       	cpi	r25, 0x41	; 65
     d0e:	09 f0       	breq	.+2      	; 0xd12 <play_game+0x1e0>
     d10:	74 cf       	rjmp	.-280    	; 0xbfa <play_game+0xc8>
     d12:	77 cf       	rjmp	.-274    	; 0xc02 <play_game+0xd0>
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	09 f4       	brne	.+2      	; 0xd1a <play_game+0x1e8>
     d18:	75 cf       	rjmp	.-278    	; 0xc04 <play_game+0xd2>
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
     d1a:	93 2d       	mov	r25, r3
		// variables will be set to a value other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
     d1c:	83 2d       	mov	r24, r3
     d1e:	76 cf       	rjmp	.-276    	; 0xc0c <play_game+0xda>
			PORTC = seven_seg_cc;
		}
		
	}
	// We get here if the game is over.
}
     d20:	2b 96       	adiw	r28, 0x0b	; 11
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	de bf       	out	0x3e, r29	; 62
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	cd bf       	out	0x3d, r28	; 61
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	df 90       	pop	r13
     d3a:	cf 90       	pop	r12
     d3c:	bf 90       	pop	r11
     d3e:	af 90       	pop	r10
     d40:	9f 90       	pop	r9
     d42:	8f 90       	pop	r8
     d44:	7f 90       	pop	r7
     d46:	6f 90       	pop	r6
     d48:	5f 90       	pop	r5
     d4a:	4f 90       	pop	r4
     d4c:	3f 90       	pop	r3
     d4e:	2f 90       	pop	r2
     d50:	08 95       	ret

00000d52 <handle_game_over>:

void handle_game_over() {
	move_cursor(10,14);
     d52:	6e e0       	ldi	r22, 0x0E	; 14
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	8a e0       	ldi	r24, 0x0A	; 10
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 4d 09 	call	0x129a	; 0x129a <move_cursor>
	printf_P(PSTR("GAME OVER"));
     d5e:	85 ea       	ldi	r24, 0xA5	; 165
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9f 93       	push	r25
     d64:	8f 93       	push	r24
     d66:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <printf_P>
	move_cursor(10,15);
     d6a:	6f e0       	ldi	r22, 0x0F	; 15
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	8a e0       	ldi	r24, 0x0A	; 10
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 4d 09 	call	0x129a	; 0x129a <move_cursor>
	printf_P(PSTR("Press a button to start again"));
     d76:	87 e8       	ldi	r24, 0x87	; 135
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <printf_P>
	while(button_pushed() == NO_BUTTON_PUSHED) {
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	01 c0       	rjmp	.+2      	; 0xd8e <handle_game_over+0x3c>
		// Turn off the seven seg.
		PORTC = 0;
     d8c:	18 b8       	out	0x08, r1	; 8
void handle_game_over() {
	move_cursor(10,14);
	printf_P(PSTR("GAME OVER"));
	move_cursor(10,15);
	printf_P(PSTR("Press a button to start again"));
	while(button_pushed() == NO_BUTTON_PUSHED) {
     d8e:	0e 94 1e 01 	call	0x23c	; 0x23c <button_pushed>
     d92:	8f 3f       	cpi	r24, 0xFF	; 255
     d94:	d9 f3       	breq	.-10     	; 0xd8c <handle_game_over+0x3a>
		// Turn off the seven seg.
		PORTC = 0;
	}
	toggle_game_over();
     d96:	0e 94 13 04 	call	0x826	; 0x826 <toggle_game_over>
     d9a:	08 95       	ret

00000d9c <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
     d9c:	0e 94 1c 05 	call	0xa38	; 0xa38 <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
     da0:	0e 94 2f 05 	call	0xa5e	; 0xa5e <splash_screen>
	
	while(1) {
		new_game();
     da4:	0e 94 68 05 	call	0xad0	; 0xad0 <new_game>
		play_game();
     da8:	0e 94 99 05 	call	0xb32	; 0xb32 <play_game>
		handle_game_over();
     dac:	0e 94 a9 06 	call	0xd52	; 0xd52 <handle_game_over>
     db0:	f9 cf       	rjmp	.-14     	; 0xda4 <main+0x8>

00000db2 <init_score>:
#include "score.h"

uint32_t score;

void init_score(void) {
	score = 0;
     db2:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <score>
     db6:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <score+0x1>
     dba:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <score+0x2>
     dbe:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <score+0x3>
     dc2:	08 95       	ret

00000dc4 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
     dc4:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <score>
     dc8:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <score+0x1>
     dcc:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <score+0x2>
     dd0:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <score+0x3>
     dd4:	48 0f       	add	r20, r24
     dd6:	59 1f       	adc	r21, r25
     dd8:	61 1d       	adc	r22, r1
     dda:	71 1d       	adc	r23, r1
     ddc:	40 93 6e 01 	sts	0x016E, r20	; 0x80016e <score>
     de0:	50 93 6f 01 	sts	0x016F, r21	; 0x80016f <score+0x1>
     de4:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <score+0x2>
     de8:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <score+0x3>
     dec:	08 95       	ret

00000dee <get_score>:
}

uint32_t get_score(void) {
	return score;
     dee:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <score>
     df2:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <score+0x1>
     df6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <score+0x2>
     dfa:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <score+0x3>
}
     dfe:	08 95       	ret

00000e00 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
     e00:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <colour>
	display_string = string_to_display;
     e04:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <display_string+0x1>
     e08:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <display_string>
	next_col_ptr = 0;
     e0c:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <next_col_ptr+0x1>
     e10:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <next_col_ptr>
	next_char_to_display = 0;
     e14:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <next_char_to_display+0x1>
     e18:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <next_char_to_display>
     e1c:	08 95       	ret

00000e1e <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	28 97       	sbiw	r28, 0x08	; 8
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
     e36:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <next_col_ptr>
     e3a:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <next_col_ptr+0x1>
     e3e:	30 97       	sbiw	r30, 0x00	; 0
     e40:	81 f0       	breq	.+32     	; 0xe62 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
     e42:	14 91       	lpm	r17, Z

		if(col_data & 1) {
     e44:	10 ff       	sbrs	r17, 0
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
     e48:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <next_col_ptr+0x1>
     e4c:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e50:	00 e0       	ldi	r16, 0x00	; 0
     e52:	6b c0       	rjmp	.+214    	; 0xf2a <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
     e54:	31 96       	adiw	r30, 0x01	; 1
     e56:	f0 93 4d 01 	sts	0x014D, r31	; 0x80014d <next_col_ptr+0x1>
     e5a:	e0 93 4c 01 	sts	0x014C, r30	; 0x80014c <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e5e:	00 e0       	ldi	r16, 0x00	; 0
     e60:	64 c0       	rjmp	.+200    	; 0xf2a <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
     e62:	e0 91 48 01 	lds	r30, 0x0148	; 0x800148 <next_char_to_display>
     e66:	f0 91 49 01 	lds	r31, 0x0149	; 0x800149 <next_char_to_display+0x1>
     e6a:	30 97       	sbiw	r30, 0x00	; 0
     e6c:	09 f4       	brne	.+2      	; 0xe70 <scroll_display+0x52>
     e6e:	49 c0       	rjmp	.+146    	; 0xf02 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
     e70:	cf 01       	movw	r24, r30
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <next_char_to_display+0x1>
     e78:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <next_char_to_display>
     e7c:	e0 81       	ld	r30, Z
		if(next_char == 0) {
     e7e:	e1 11       	cpse	r30, r1
     e80:	0a c0       	rjmp	.+20     	; 0xe96 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
     e82:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <next_char_to_display+0x1>
     e86:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <next_char_to_display>
			shift_countdown = 16;
     e8a:	80 e1       	ldi	r24, 0x10	; 16
     e8c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     e90:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     e92:	10 e0       	ldi	r17, 0x00	; 0
     e94:	4a c0       	rjmp	.+148    	; 0xf2a <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
     e96:	8f e9       	ldi	r24, 0x9F	; 159
     e98:	8e 0f       	add	r24, r30
     e9a:	8a 31       	cpi	r24, 0x1A	; 26
     e9c:	70 f4       	brcc	.+28     	; 0xeba <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	ee 0f       	add	r30, r30
     ea2:	ff 1f       	adc	r31, r31
     ea4:	e8 5b       	subi	r30, 0xB8	; 184
     ea6:	ff 4f       	sbci	r31, 0xFF	; 255
     ea8:	85 91       	lpm	r24, Z+
     eaa:	94 91       	lpm	r25, Z
     eac:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <next_col_ptr+0x1>
     eb0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     eb4:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     eb6:	10 e0       	ldi	r17, 0x00	; 0
     eb8:	38 c0       	rjmp	.+112    	; 0xf2a <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
     eba:	8f eb       	ldi	r24, 0xBF	; 191
     ebc:	8e 0f       	add	r24, r30
     ebe:	8a 31       	cpi	r24, 0x1A	; 26
     ec0:	70 f4       	brcc	.+28     	; 0xede <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	ee 0f       	add	r30, r30
     ec6:	ff 1f       	adc	r31, r31
     ec8:	e8 57       	subi	r30, 0x78	; 120
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	85 91       	lpm	r24, Z+
     ece:	94 91       	lpm	r25, Z
     ed0:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <next_col_ptr+0x1>
     ed4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     ed8:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     eda:	10 e0       	ldi	r17, 0x00	; 0
     edc:	26 c0       	rjmp	.+76     	; 0xf2a <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
     ede:	80 ed       	ldi	r24, 0xD0	; 208
     ee0:	8e 0f       	add	r24, r30
     ee2:	8a 30       	cpi	r24, 0x0A	; 10
     ee4:	00 f5       	brcc	.+64     	; 0xf26 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	ee 0f       	add	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	ea 56       	subi	r30, 0x6A	; 106
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	85 91       	lpm	r24, Z+
     ef2:	94 91       	lpm	r25, Z
     ef4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <next_col_ptr+0x1>
     ef8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     efc:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     efe:	10 e0       	ldi	r17, 0x00	; 0
     f00:	14 c0       	rjmp	.+40     	; 0xf2a <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
     f02:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <display_string>
     f06:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     f0a:	01 e0       	ldi	r16, 0x01	; 1
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	09 f0       	breq	.+2      	; 0xf12 <scroll_display+0xf4>
     f10:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
     f12:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <next_char_to_display+0x1>
     f16:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <next_char_to_display>
		display_string = 0;
     f1a:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <display_string+0x1>
     f1e:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     f22:	10 e0       	ldi	r17, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
     f26:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
     f28:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
     f2a:	0e 94 11 05 	call	0xa22	; 0xa22 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
     f2e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <colour>
     f32:	fe 01       	movw	r30, r28
     f34:	38 96       	adiw	r30, 0x08	; 8
     f36:	ce 01       	movw	r24, r28
     f38:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
     f3a:	11 23       	and	r17, r17
     f3c:	14 f4       	brge	.+4      	; 0xf42 <scroll_display+0x124>
			column_colour_data[i] = colour;
     f3e:	20 83       	st	Z, r18
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
     f42:	10 82       	st	Z, r1
		}
		col_data <<= 1;
     f44:	11 0f       	add	r17, r17
     f46:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
     f48:	e8 17       	cp	r30, r24
     f4a:	f9 07       	cpc	r31, r25
     f4c:	b1 f7       	brne	.-20     	; 0xf3a <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
     f4e:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
     f50:	be 01       	movw	r22, r28
     f52:	6f 5f       	subi	r22, 0xFF	; 255
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	8f e0       	ldi	r24, 0x0F	; 15
     f58:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <ledmatrix_update_column>
	if(shift_countdown > 0) {
     f5c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <shift_countdown.1854>
     f60:	88 23       	and	r24, r24
     f62:	89 f0       	breq	.+34     	; 0xf86 <scroll_display+0x168>
		shift_countdown--;
     f64:	81 50       	subi	r24, 0x01	; 1
     f66:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
     f6a:	00 23       	and	r16, r16
     f6c:	11 f0       	breq	.+4      	; 0xf72 <scroll_display+0x154>
     f6e:	88 23       	and	r24, r24
     f70:	11 f0       	breq	.+4      	; 0xf76 <scroll_display+0x158>
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <scroll_display+0x15e>
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	01 c0       	rjmp	.+2      	; 0xf7c <scroll_display+0x15e>
     f7a:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	99 23       	and	r25, r25
     f80:	29 f0       	breq	.+10     	; 0xf8c <scroll_display+0x16e>
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
     f86:	00 23       	and	r16, r16
     f88:	a1 f3       	breq	.-24     	; 0xf72 <scroll_display+0x154>
     f8a:	f7 cf       	rjmp	.-18     	; 0xf7a <scroll_display+0x15c>
	return !finished;
}
     f8c:	28 96       	adiw	r28, 0x08	; 8
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	08 95       	ret

00000fa2 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
     fa2:	cf 93       	push	r28
     fa4:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
     fa6:	8a 30       	cpi	r24, 0x0A	; 10
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <uart_put_char+0xe>
		uart_put_char('\r', stream);
     faa:	8d e0       	ldi	r24, 0x0D	; 13
     fac:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
     fb0:	9f b7       	in	r25, 0x3f	; 63
     fb2:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <uart_put_char+0x18>
		if(!interrupts_enabled) {
     fb6:	99 23       	and	r25, r25
     fb8:	29 f1       	breq	.+74     	; 0x1004 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
     fba:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <bytes_in_out_buffer>
     fbe:	8f 3f       	cpi	r24, 0xFF	; 255
     fc0:	d1 f3       	breq	.-12     	; 0xfb6 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
     fc2:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     fc4:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <out_insert_pos>
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	8e 0f       	add	r24, r30
     fcc:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <out_insert_pos>
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	ec 58       	subi	r30, 0x8C	; 140
     fd4:	fe 4f       	sbci	r31, 0xFE	; 254
     fd6:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     fd8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <bytes_in_out_buffer>
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
     fe2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <out_insert_pos>
     fe6:	8f 3f       	cpi	r24, 0xFF	; 255
     fe8:	11 f4       	brne	.+4      	; 0xfee <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
     fea:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
     fee:	e1 ec       	ldi	r30, 0xC1	; 193
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	80 62       	ori	r24, 0x20	; 32
     ff6:	80 83       	st	Z, r24
	if(interrupts_enabled) {
     ff8:	99 23       	and	r25, r25
     ffa:	39 f0       	breq	.+14     	; 0x100a <uart_put_char+0x68>
		sei();
     ffc:	78 94       	sei
	}
	return 0;
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	05 c0       	rjmp	.+10     	; 0x100e <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 c0       	rjmp	.+4      	; 0x100e <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
}
    100e:	cf 91       	pop	r28
    1010:	08 95       	ret

00001012 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1012:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <bytes_in_input_buffer>
    1016:	88 23       	and	r24, r24
    1018:	e1 f3       	breq	.-8      	; 0x1012 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    101a:	2f b7       	in	r18, 0x3f	; 63
    101c:	20 78       	andi	r18, 0x80	; 128
	cli();
    101e:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1020:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <input_insert_pos>
    1024:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <bytes_in_input_buffer>
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	83 1b       	sub	r24, r19
    102c:	91 09       	sbc	r25, r1
    102e:	5a f4       	brpl	.+22     	; 0x1046 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1030:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <input_insert_pos>
    1034:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	e8 1b       	sub	r30, r24
    103c:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    103e:	ec 57       	subi	r30, 0x7C	; 124
    1040:	fd 4f       	sbci	r31, 0xFD	; 253
    1042:	80 81       	ld	r24, Z
    1044:	0a c0       	rjmp	.+20     	; 0x105a <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1046:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <input_insert_pos>
    104a:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <bytes_in_input_buffer>
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	e8 1b       	sub	r30, r24
    1052:	f1 09       	sbc	r31, r1
    1054:	ec 58       	subi	r30, 0x8C	; 140
    1056:	fd 4f       	sbci	r31, 0xFD	; 253
    1058:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    105a:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <bytes_in_input_buffer>
    105e:	91 50       	subi	r25, 0x01	; 1
    1060:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1064:	22 23       	and	r18, r18
    1066:	09 f0       	breq	.+2      	; 0x106a <uart_get_char+0x58>
		sei();
    1068:	78 94       	sei
	}	
	return c;
}
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	08 95       	ret

0000106e <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    106e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1072:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1076:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <input_insert_pos>
	bytes_in_input_buffer = 0;
    107a:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <bytes_in_input_buffer>
	input_overrun = 0;
    107e:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1082:	40 93 4e 01 	sts	0x014E, r20	; 0x80014e <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	aa 1f       	adc	r26, r26
    1090:	bb 1f       	adc	r27, r27
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	aa 1f       	adc	r26, r26
    1098:	bb 1f       	adc	r27, r27
    109a:	9c 01       	movw	r18, r24
    109c:	ad 01       	movw	r20, r26
    109e:	22 0f       	add	r18, r18
    10a0:	33 1f       	adc	r19, r19
    10a2:	44 1f       	adc	r20, r20
    10a4:	55 1f       	adc	r21, r21
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	72 e1       	ldi	r23, 0x12	; 18
    10aa:	8a e7       	ldi	r24, 0x7A	; 122
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__divmodsi4>
    10b2:	ba 01       	movw	r22, r20
    10b4:	a9 01       	movw	r20, r18
    10b6:	4f 5f       	subi	r20, 0xFF	; 255
    10b8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ba:	6f 4f       	sbci	r22, 0xFF	; 255
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	db 01       	movw	r26, r22
    10c0:	ca 01       	movw	r24, r20
    10c2:	1a f4       	brpl	.+6      	; 0x10ca <init_serial_stdio+0x5c>
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	a1 1d       	adc	r26, r1
    10c8:	b1 1d       	adc	r27, r1
    10ca:	b5 95       	asr	r27
    10cc:	a7 95       	ror	r26
    10ce:	97 95       	ror	r25
    10d0:	87 95       	ror	r24
    10d2:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    10d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    10d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    10dc:	e1 ec       	ldi	r30, 0xC1	; 193
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	88 e1       	ldi	r24, 0x18	; 24
    10e2:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    10e4:	80 81       	ld	r24, Z
    10e6:	80 68       	ori	r24, 0x80	; 128
    10e8:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    10ea:	e6 e8       	ldi	r30, 0x86	; 134
    10ec:	f2 e0       	ldi	r31, 0x02	; 2
    10ee:	85 e0       	ldi	r24, 0x05	; 5
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	93 83       	std	Z+3, r25	; 0x03
    10f4:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
    10fa:	08 95       	ret

000010fc <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    10fc:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <bytes_in_input_buffer>
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	91 11       	cpse	r25, r1
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <serial_input_available+0xc>
    1106:	80 e0       	ldi	r24, 0x00	; 0
}
    1108:	08 95       	ret

0000110a <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    110a:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <input_insert_pos>
	bytes_in_input_buffer = 0;
    110e:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <bytes_in_input_buffer>
    1112:	08 95       	ret

00001114 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{
    1114:	1f 92       	push	r1
    1116:	0f 92       	push	r0
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	0f 92       	push	r0
    111c:	11 24       	eor	r1, r1
    111e:	2f 93       	push	r18
    1120:	8f 93       	push	r24
    1122:	9f 93       	push	r25
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1128:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <bytes_in_out_buffer>
    112c:	88 23       	and	r24, r24
    112e:	29 f1       	breq	.+74     	; 0x117a <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1130:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <out_insert_pos>
    1134:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <bytes_in_out_buffer>
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	82 1b       	sub	r24, r18
    113c:	91 09       	sbc	r25, r1
    113e:	5a f4       	brpl	.+22     	; 0x1156 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1140:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <out_insert_pos>
    1144:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	e8 1b       	sub	r30, r24
    114c:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    114e:	ed 58       	subi	r30, 0x8D	; 141
    1150:	fd 4f       	sbci	r31, 0xFD	; 253
    1152:	90 81       	ld	r25, Z
    1154:	0a c0       	rjmp	.+20     	; 0x116a <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1156:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <out_insert_pos>
    115a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <bytes_in_out_buffer>
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	e8 1b       	sub	r30, r24
    1162:	f1 09       	sbc	r31, r1
    1164:	ec 58       	subi	r30, 0x8C	; 140
    1166:	fe 4f       	sbci	r31, 0xFE	; 254
    1168:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    116a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <bytes_in_out_buffer>
    116e:	81 50       	subi	r24, 0x01	; 1
    1170:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1174:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    117a:	e1 ec       	ldi	r30, 0xC1	; 193
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8f 7d       	andi	r24, 0xDF	; 223
    1182:	80 83       	st	Z, r24
	}
}
    1184:	ff 91       	pop	r31
    1186:	ef 91       	pop	r30
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	2f 93       	push	r18
    11a4:	3f 93       	push	r19
    11a6:	4f 93       	push	r20
    11a8:	5f 93       	push	r21
    11aa:	6f 93       	push	r22
    11ac:	7f 93       	push	r23
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
    11b2:	af 93       	push	r26
    11b4:	bf 93       	push	r27
    11b6:	cf 93       	push	r28
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    11bc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    11c0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <do_echo>
    11c4:	88 23       	and	r24, r24
    11c6:	49 f0       	breq	.+18     	; 0x11da <__vector_20+0x42>
    11c8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <bytes_in_out_buffer>
    11cc:	8f 3f       	cpi	r24, 0xFF	; 255
    11ce:	29 f0       	breq	.+10     	; 0x11da <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	8c 2f       	mov	r24, r28
    11d6:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    11da:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <bytes_in_input_buffer>
    11de:	80 31       	cpi	r24, 0x10	; 16
    11e0:	20 f0       	brcs	.+8      	; 0x11ea <__vector_20+0x52>
		input_overrun = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <input_overrun>
    11e8:	18 c0       	rjmp	.+48     	; 0x121a <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    11ea:	cd 30       	cpi	r28, 0x0D	; 13
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <__vector_20+0x58>
			c = '\n';
    11ee:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    11f0:	e0 91 73 02 	lds	r30, 0x0273	; 0x800273 <input_insert_pos>
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	8e 0f       	add	r24, r30
    11f8:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <input_insert_pos>
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	ec 58       	subi	r30, 0x8C	; 140
    1200:	fd 4f       	sbci	r31, 0xFD	; 253
    1202:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1204:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <bytes_in_input_buffer>
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    120e:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <input_insert_pos>
    1212:	80 31       	cpi	r24, 0x10	; 16
    1214:	11 f4       	brne	.+4      	; 0x121a <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1216:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <input_insert_pos>
		}
	}
}
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	cf 91       	pop	r28
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0f 90       	pop	r0
    123a:	1f 90       	pop	r1
    123c:	18 95       	reti

0000123e <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    123e:	94 b1       	in	r25, 0x04	; 4
    1240:	90 6b       	ori	r25, 0xB0	; 176
    1242:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1244:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR and SPSR:
	// - SPE bit = 1 (SPI is enabled)
	// - MSTR bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1246:	90 e5       	ldi	r25, 0x50	; 80
    1248:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    124a:	88 30       	cpi	r24, 0x08	; 8
    124c:	21 f0       	breq	.+8      	; 0x1256 <spi_setup_master+0x18>
    124e:	80 32       	cpi	r24, 0x20	; 32
    1250:	11 f0       	breq	.+4      	; 0x1256 <spi_setup_master+0x18>
    1252:	82 30       	cpi	r24, 0x02	; 2
    1254:	19 f4       	brne	.+6      	; 0x125c <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	9d bd       	out	0x2d, r25	; 45
			break;
    125a:	01 c0       	rjmp	.+2      	; 0x125e <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    125c:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    125e:	80 32       	cpi	r24, 0x20	; 32
    1260:	69 f0       	breq	.+26     	; 0x127c <spi_setup_master+0x3e>
    1262:	28 f4       	brcc	.+10     	; 0x126e <spi_setup_master+0x30>
    1264:	88 30       	cpi	r24, 0x08	; 8
    1266:	71 f0       	breq	.+28     	; 0x1284 <spi_setup_master+0x46>
    1268:	80 31       	cpi	r24, 0x10	; 16
    126a:	61 f0       	breq	.+24     	; 0x1284 <spi_setup_master+0x46>
    126c:	0e c0       	rjmp	.+28     	; 0x128a <spi_setup_master+0x4c>
    126e:	80 34       	cpi	r24, 0x40	; 64
    1270:	29 f0       	breq	.+10     	; 0x127c <spi_setup_master+0x3e>
    1272:	80 38       	cpi	r24, 0x80	; 128
    1274:	51 f4       	brne	.+20     	; 0x128a <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1276:	8c b5       	in	r24, 0x2c	; 44
    1278:	81 60       	ori	r24, 0x01	; 1
    127a:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    127c:	8c b5       	in	r24, 0x2c	; 44
    127e:	82 60       	ori	r24, 0x02	; 2
    1280:	8c bd       	out	0x2c, r24	; 44
			break;
    1282:	03 c0       	rjmp	.+6      	; 0x128a <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1284:	8c b5       	in	r24, 0x2c	; 44
    1286:	81 60       	ori	r24, 0x01	; 1
    1288:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    128a:	2c 98       	cbi	0x05, 4	; 5
    128c:	08 95       	ret

0000128e <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF bit to be reset to 0. See page 173 of the 
	// ATmega324A datasheet.)
	SPDR0 = byte;
    128e:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1290:	0d b4       	in	r0, 0x2d	; 45
    1292:	07 fe       	sbrs	r0, 7
    1294:	fd cf       	rjmp	.-6      	; 0x1290 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1296:	8e b5       	in	r24, 0x2e	; 46
    1298:	08 95       	ret

0000129a <move_cursor>:
	printf_P(PSTR("\x1b[0m"));
}

void reverse_video(void) {
	printf_P(PSTR("\x1b[7m"));
}
    129a:	9f 93       	push	r25
    129c:	8f 93       	push	r24
    129e:	7f 93       	push	r23
    12a0:	6f 93       	push	r22
    12a2:	89 ed       	ldi	r24, 0xD9	; 217
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	9f 93       	push	r25
    12a8:	8f 93       	push	r24
    12aa:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <printf_P>
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	08 95       	ret

000012bc <clear_terminal>:

void clear_terminal(void) {
	printf_P(PSTR("\x1b[2J"));
    12bc:	84 ed       	ldi	r24, 0xD4	; 212
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	9f 93       	push	r25
    12c2:	8f 93       	push	r24
    12c4:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <printf_P>
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	08 95       	ret

000012ce <init_timer0>:
 */
void init_timer0(void) {
	/* Reset clock tick count. L indicates a long (32 bit) 
	 * constant. 
	 */
	clockTicks = 0L;
    12ce:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <clockTicks>
    12d2:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <clockTicks+0x1>
    12d6:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <clockTicks+0x2>
    12da:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <clockTicks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    12de:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    12e0:	8c e7       	ldi	r24, 0x7C	; 124
    12e2:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    12e4:	82 e0       	ldi	r24, 0x02	; 2
    12e6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    12e8:	83 e0       	ldi	r24, 0x03	; 3
    12ea:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    12ec:	ee e6       	ldi	r30, 0x6E	; 110
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	82 60       	ori	r24, 0x02	; 2
    12f4:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    12f6:	85 b3       	in	r24, 0x15	; 21
    12f8:	82 70       	andi	r24, 0x02	; 2
    12fa:	85 bb       	out	0x15, r24	; 21
    12fc:	08 95       	ret

000012fe <get_current_time>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interruptsOn = bit_is_set(SREG, SREG_I);
    12fe:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1300:	f8 94       	cli
	returnValue = clockTicks;
    1302:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <clockTicks>
    1306:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <clockTicks+0x1>
    130a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <clockTicks+0x2>
    130e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <clockTicks+0x3>
	if(interruptsOn) {
    1312:	22 23       	and	r18, r18
    1314:	0c f4       	brge	.+2      	; 0x1318 <get_current_time+0x1a>
		sei();
    1316:	78 94       	sei
	}
	return returnValue;
}
    1318:	08 95       	ret

0000131a <__vector_16>:

ISR(TIMER0_COMPA_vect) {
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
	/* Increment our clock tick count */
	clockTicks++;
    132c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <clockTicks>
    1330:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <clockTicks+0x1>
    1334:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <clockTicks+0x2>
    1338:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <clockTicks+0x3>
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	a1 1d       	adc	r26, r1
    1340:	b1 1d       	adc	r27, r1
    1342:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <clockTicks>
    1346:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <clockTicks+0x1>
    134a:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <clockTicks+0x2>
    134e:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <clockTicks+0x3>
}
    1352:	bf 91       	pop	r27
    1354:	af 91       	pop	r26
    1356:	9f 91       	pop	r25
    1358:	8f 91       	pop	r24
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__udivmodsi4>:
    1364:	a1 e2       	ldi	r26, 0x21	; 33
    1366:	1a 2e       	mov	r1, r26
    1368:	aa 1b       	sub	r26, r26
    136a:	bb 1b       	sub	r27, r27
    136c:	fd 01       	movw	r30, r26
    136e:	0d c0       	rjmp	.+26     	; 0x138a <__udivmodsi4_ep>

00001370 <__udivmodsi4_loop>:
    1370:	aa 1f       	adc	r26, r26
    1372:	bb 1f       	adc	r27, r27
    1374:	ee 1f       	adc	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	a2 17       	cp	r26, r18
    137a:	b3 07       	cpc	r27, r19
    137c:	e4 07       	cpc	r30, r20
    137e:	f5 07       	cpc	r31, r21
    1380:	20 f0       	brcs	.+8      	; 0x138a <__udivmodsi4_ep>
    1382:	a2 1b       	sub	r26, r18
    1384:	b3 0b       	sbc	r27, r19
    1386:	e4 0b       	sbc	r30, r20
    1388:	f5 0b       	sbc	r31, r21

0000138a <__udivmodsi4_ep>:
    138a:	66 1f       	adc	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	88 1f       	adc	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	1a 94       	dec	r1
    1394:	69 f7       	brne	.-38     	; 0x1370 <__udivmodsi4_loop>
    1396:	60 95       	com	r22
    1398:	70 95       	com	r23
    139a:	80 95       	com	r24
    139c:	90 95       	com	r25
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	bd 01       	movw	r22, r26
    13a4:	cf 01       	movw	r24, r30
    13a6:	08 95       	ret

000013a8 <__divmodsi4>:
    13a8:	05 2e       	mov	r0, r21
    13aa:	97 fb       	bst	r25, 7
    13ac:	1e f4       	brtc	.+6      	; 0x13b4 <__divmodsi4+0xc>
    13ae:	00 94       	com	r0
    13b0:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__negsi2>
    13b4:	57 fd       	sbrc	r21, 7
    13b6:	07 d0       	rcall	.+14     	; 0x13c6 <__divmodsi4_neg2>
    13b8:	0e 94 b2 09 	call	0x1364	; 0x1364 <__udivmodsi4>
    13bc:	07 fc       	sbrc	r0, 7
    13be:	03 d0       	rcall	.+6      	; 0x13c6 <__divmodsi4_neg2>
    13c0:	4e f4       	brtc	.+18     	; 0x13d4 <__divmodsi4_exit>
    13c2:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__negsi2>

000013c6 <__divmodsi4_neg2>:
    13c6:	50 95       	com	r21
    13c8:	40 95       	com	r20
    13ca:	30 95       	com	r19
    13cc:	21 95       	neg	r18
    13ce:	3f 4f       	sbci	r19, 0xFF	; 255
    13d0:	4f 4f       	sbci	r20, 0xFF	; 255
    13d2:	5f 4f       	sbci	r21, 0xFF	; 255

000013d4 <__divmodsi4_exit>:
    13d4:	08 95       	ret

000013d6 <__negsi2>:
    13d6:	90 95       	com	r25
    13d8:	80 95       	com	r24
    13da:	70 95       	com	r23
    13dc:	61 95       	neg	r22
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	8f 4f       	sbci	r24, 0xFF	; 255
    13e2:	9f 4f       	sbci	r25, 0xFF	; 255
    13e4:	08 95       	ret

000013e6 <random_r>:
    13e6:	8f 92       	push	r8
    13e8:	9f 92       	push	r9
    13ea:	af 92       	push	r10
    13ec:	bf 92       	push	r11
    13ee:	cf 92       	push	r12
    13f0:	df 92       	push	r13
    13f2:	ef 92       	push	r14
    13f4:	ff 92       	push	r15
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
    13fc:	68 81       	ld	r22, Y
    13fe:	79 81       	ldd	r23, Y+1	; 0x01
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	9b 81       	ldd	r25, Y+3	; 0x03
    1404:	61 15       	cp	r22, r1
    1406:	71 05       	cpc	r23, r1
    1408:	81 05       	cpc	r24, r1
    140a:	91 05       	cpc	r25, r1
    140c:	21 f4       	brne	.+8      	; 0x1416 <random_r+0x30>
    140e:	64 e2       	ldi	r22, 0x24	; 36
    1410:	79 ed       	ldi	r23, 0xD9	; 217
    1412:	8b e5       	ldi	r24, 0x5B	; 91
    1414:	97 e0       	ldi	r25, 0x07	; 7
    1416:	2d e1       	ldi	r18, 0x1D	; 29
    1418:	33 ef       	ldi	r19, 0xF3	; 243
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__divmodsi4>
    1422:	49 01       	movw	r8, r18
    1424:	5a 01       	movw	r10, r20
    1426:	9b 01       	movw	r18, r22
    1428:	ac 01       	movw	r20, r24
    142a:	a7 ea       	ldi	r26, 0xA7	; 167
    142c:	b1 e4       	ldi	r27, 0x41	; 65
    142e:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__muluhisi3>
    1432:	6b 01       	movw	r12, r22
    1434:	7c 01       	movw	r14, r24
    1436:	ac ee       	ldi	r26, 0xEC	; 236
    1438:	b4 ef       	ldi	r27, 0xF4	; 244
    143a:	a5 01       	movw	r20, r10
    143c:	94 01       	movw	r18, r8
    143e:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulohisi3>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	8c 0d       	add	r24, r12
    1448:	9d 1d       	adc	r25, r13
    144a:	ae 1d       	adc	r26, r14
    144c:	bf 1d       	adc	r27, r15
    144e:	b7 ff       	sbrs	r27, 7
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <random_r+0x72>
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	a1 09       	sbc	r26, r1
    1456:	b0 48       	sbci	r27, 0x80	; 128
    1458:	88 83       	st	Y, r24
    145a:	99 83       	std	Y+1, r25	; 0x01
    145c:	aa 83       	std	Y+2, r26	; 0x02
    145e:	bb 83       	std	Y+3, r27	; 0x03
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	9f 77       	andi	r25, 0x7F	; 127
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	9f 90       	pop	r9
    1478:	8f 90       	pop	r8
    147a:	08 95       	ret

0000147c <random>:
    147c:	8f 92       	push	r8
    147e:	9f 92       	push	r9
    1480:	af 92       	push	r10
    1482:	bf 92       	push	r11
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    1490:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1494:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1498:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    149c:	61 15       	cp	r22, r1
    149e:	71 05       	cpc	r23, r1
    14a0:	81 05       	cpc	r24, r1
    14a2:	91 05       	cpc	r25, r1
    14a4:	21 f4       	brne	.+8      	; 0x14ae <random+0x32>
    14a6:	64 e2       	ldi	r22, 0x24	; 36
    14a8:	79 ed       	ldi	r23, 0xD9	; 217
    14aa:	8b e5       	ldi	r24, 0x5B	; 91
    14ac:	97 e0       	ldi	r25, 0x07	; 7
    14ae:	2d e1       	ldi	r18, 0x1D	; 29
    14b0:	33 ef       	ldi	r19, 0xF3	; 243
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__divmodsi4>
    14ba:	49 01       	movw	r8, r18
    14bc:	5a 01       	movw	r10, r20
    14be:	9b 01       	movw	r18, r22
    14c0:	ac 01       	movw	r20, r24
    14c2:	a7 ea       	ldi	r26, 0xA7	; 167
    14c4:	b1 e4       	ldi	r27, 0x41	; 65
    14c6:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__muluhisi3>
    14ca:	6b 01       	movw	r12, r22
    14cc:	7c 01       	movw	r14, r24
    14ce:	ac ee       	ldi	r26, 0xEC	; 236
    14d0:	b4 ef       	ldi	r27, 0xF4	; 244
    14d2:	a5 01       	movw	r20, r10
    14d4:	94 01       	movw	r18, r8
    14d6:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulohisi3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	8c 0d       	add	r24, r12
    14e0:	9d 1d       	adc	r25, r13
    14e2:	ae 1d       	adc	r26, r14
    14e4:	bf 1d       	adc	r27, r15
    14e6:	b7 ff       	sbrs	r27, 7
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <random+0x74>
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	a1 09       	sbc	r26, r1
    14ee:	b0 48       	sbci	r27, 0x80	; 128
    14f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    14f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    14f8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    14fc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1500:	bc 01       	movw	r22, r24
    1502:	cd 01       	movw	r24, r26
    1504:	9f 77       	andi	r25, 0x7F	; 127
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	df 90       	pop	r13
    150c:	cf 90       	pop	r12
    150e:	bf 90       	pop	r11
    1510:	af 90       	pop	r10
    1512:	9f 90       	pop	r9
    1514:	8f 90       	pop	r8
    1516:	08 95       	ret

00001518 <srandom>:
    1518:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    151c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1520:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1524:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    1528:	08 95       	ret

0000152a <fgetc>:
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	ec 01       	movw	r28, r24
    1530:	2b 81       	ldd	r18, Y+3	; 0x03
    1532:	20 ff       	sbrs	r18, 0
    1534:	33 c0       	rjmp	.+102    	; 0x159c <fgetc+0x72>
    1536:	26 ff       	sbrs	r18, 6
    1538:	0a c0       	rjmp	.+20     	; 0x154e <fgetc+0x24>
    153a:	2f 7b       	andi	r18, 0xBF	; 191
    153c:	2b 83       	std	Y+3, r18	; 0x03
    153e:	8e 81       	ldd	r24, Y+6	; 0x06
    1540:	9f 81       	ldd	r25, Y+7	; 0x07
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	9f 83       	std	Y+7, r25	; 0x07
    1546:	8e 83       	std	Y+6, r24	; 0x06
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	29 c0       	rjmp	.+82     	; 0x15a0 <fgetc+0x76>
    154e:	22 ff       	sbrs	r18, 2
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <fgetc+0x46>
    1552:	e8 81       	ld	r30, Y
    1554:	f9 81       	ldd	r31, Y+1	; 0x01
    1556:	80 81       	ld	r24, Z
    1558:	08 2e       	mov	r0, r24
    155a:	00 0c       	add	r0, r0
    155c:	99 0b       	sbc	r25, r25
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	19 f4       	brne	.+6      	; 0x1568 <fgetc+0x3e>
    1562:	20 62       	ori	r18, 0x20	; 32
    1564:	2b 83       	std	Y+3, r18	; 0x03
    1566:	1a c0       	rjmp	.+52     	; 0x159c <fgetc+0x72>
    1568:	31 96       	adiw	r30, 0x01	; 1
    156a:	f9 83       	std	Y+1, r31	; 0x01
    156c:	e8 83       	st	Y, r30
    156e:	0e c0       	rjmp	.+28     	; 0x158c <fgetc+0x62>
    1570:	ea 85       	ldd	r30, Y+10	; 0x0a
    1572:	fb 85       	ldd	r31, Y+11	; 0x0b
    1574:	09 95       	icall
    1576:	97 ff       	sbrs	r25, 7
    1578:	09 c0       	rjmp	.+18     	; 0x158c <fgetc+0x62>
    157a:	2b 81       	ldd	r18, Y+3	; 0x03
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	11 f0       	breq	.+4      	; 0x1584 <fgetc+0x5a>
    1580:	80 e2       	ldi	r24, 0x20	; 32
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <fgetc+0x5c>
    1584:	80 e1       	ldi	r24, 0x10	; 16
    1586:	82 2b       	or	r24, r18
    1588:	8b 83       	std	Y+3, r24	; 0x03
    158a:	08 c0       	rjmp	.+16     	; 0x159c <fgetc+0x72>
    158c:	2e 81       	ldd	r18, Y+6	; 0x06
    158e:	3f 81       	ldd	r19, Y+7	; 0x07
    1590:	2f 5f       	subi	r18, 0xFF	; 255
    1592:	3f 4f       	sbci	r19, 0xFF	; 255
    1594:	3f 83       	std	Y+7, r19	; 0x07
    1596:	2e 83       	std	Y+6, r18	; 0x06
    1598:	99 27       	eor	r25, r25
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <fgetc+0x76>
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	08 95       	ret

000015a6 <printf_P>:
    15a6:	a0 e0       	ldi	r26, 0x00	; 0
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e9 ed       	ldi	r30, 0xD9	; 217
    15ac:	fa e0       	ldi	r31, 0x0A	; 10
    15ae:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <__prologue_saves__+0x1c>
    15b2:	ae 01       	movw	r20, r28
    15b4:	49 5f       	subi	r20, 0xF9	; 249
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	da 01       	movw	r26, r20
    15ba:	6d 91       	ld	r22, X+
    15bc:	7d 91       	ld	r23, X+
    15be:	ad 01       	movw	r20, r26
    15c0:	06 e8       	ldi	r16, 0x86	; 134
    15c2:	12 e0       	ldi	r17, 0x02	; 2
    15c4:	f8 01       	movw	r30, r16
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	dc 01       	movw	r26, r24
    15cc:	13 96       	adiw	r26, 0x03	; 3
    15ce:	2c 91       	ld	r18, X
    15d0:	13 97       	sbiw	r26, 0x03	; 3
    15d2:	28 60       	ori	r18, 0x08	; 8
    15d4:	13 96       	adiw	r26, 0x03	; 3
    15d6:	2c 93       	st	X, r18
    15d8:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <vfprintf>
    15dc:	d8 01       	movw	r26, r16
    15de:	12 96       	adiw	r26, 0x02	; 2
    15e0:	ed 91       	ld	r30, X+
    15e2:	fc 91       	ld	r31, X
    15e4:	13 97       	sbiw	r26, 0x03	; 3
    15e6:	23 81       	ldd	r18, Z+3	; 0x03
    15e8:	27 7f       	andi	r18, 0xF7	; 247
    15ea:	23 83       	std	Z+3, r18	; 0x03
    15ec:	e4 e0       	ldi	r30, 0x04	; 4
    15ee:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__epilogue_restores__+0x1c>

000015f2 <vfprintf>:
    15f2:	ab e0       	ldi	r26, 0x0B	; 11
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ef ef       	ldi	r30, 0xFF	; 255
    15f8:	fa e0       	ldi	r31, 0x0A	; 10
    15fa:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__prologue_saves__>
    15fe:	6c 01       	movw	r12, r24
    1600:	7b 01       	movw	r14, r22
    1602:	8a 01       	movw	r16, r20
    1604:	fc 01       	movw	r30, r24
    1606:	17 82       	std	Z+7, r1	; 0x07
    1608:	16 82       	std	Z+6, r1	; 0x06
    160a:	83 81       	ldd	r24, Z+3	; 0x03
    160c:	81 ff       	sbrs	r24, 1
    160e:	cc c1       	rjmp	.+920    	; 0x19a8 <vfprintf+0x3b6>
    1610:	ce 01       	movw	r24, r28
    1612:	01 96       	adiw	r24, 0x01	; 1
    1614:	3c 01       	movw	r6, r24
    1616:	f6 01       	movw	r30, r12
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	f7 01       	movw	r30, r14
    161c:	93 fd       	sbrc	r25, 3
    161e:	85 91       	lpm	r24, Z+
    1620:	93 ff       	sbrs	r25, 3
    1622:	81 91       	ld	r24, Z+
    1624:	7f 01       	movw	r14, r30
    1626:	88 23       	and	r24, r24
    1628:	09 f4       	brne	.+2      	; 0x162c <vfprintf+0x3a>
    162a:	ba c1       	rjmp	.+884    	; 0x19a0 <vfprintf+0x3ae>
    162c:	85 32       	cpi	r24, 0x25	; 37
    162e:	39 f4       	brne	.+14     	; 0x163e <vfprintf+0x4c>
    1630:	93 fd       	sbrc	r25, 3
    1632:	85 91       	lpm	r24, Z+
    1634:	93 ff       	sbrs	r25, 3
    1636:	81 91       	ld	r24, Z+
    1638:	7f 01       	movw	r14, r30
    163a:	85 32       	cpi	r24, 0x25	; 37
    163c:	29 f4       	brne	.+10     	; 0x1648 <vfprintf+0x56>
    163e:	b6 01       	movw	r22, r12
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <fputc>
    1646:	e7 cf       	rjmp	.-50     	; 0x1616 <vfprintf+0x24>
    1648:	91 2c       	mov	r9, r1
    164a:	21 2c       	mov	r2, r1
    164c:	31 2c       	mov	r3, r1
    164e:	ff e1       	ldi	r31, 0x1F	; 31
    1650:	f3 15       	cp	r31, r3
    1652:	d8 f0       	brcs	.+54     	; 0x168a <vfprintf+0x98>
    1654:	8b 32       	cpi	r24, 0x2B	; 43
    1656:	79 f0       	breq	.+30     	; 0x1676 <vfprintf+0x84>
    1658:	38 f4       	brcc	.+14     	; 0x1668 <vfprintf+0x76>
    165a:	80 32       	cpi	r24, 0x20	; 32
    165c:	79 f0       	breq	.+30     	; 0x167c <vfprintf+0x8a>
    165e:	83 32       	cpi	r24, 0x23	; 35
    1660:	a1 f4       	brne	.+40     	; 0x168a <vfprintf+0x98>
    1662:	23 2d       	mov	r18, r3
    1664:	20 61       	ori	r18, 0x10	; 16
    1666:	1d c0       	rjmp	.+58     	; 0x16a2 <vfprintf+0xb0>
    1668:	8d 32       	cpi	r24, 0x2D	; 45
    166a:	61 f0       	breq	.+24     	; 0x1684 <vfprintf+0x92>
    166c:	80 33       	cpi	r24, 0x30	; 48
    166e:	69 f4       	brne	.+26     	; 0x168a <vfprintf+0x98>
    1670:	23 2d       	mov	r18, r3
    1672:	21 60       	ori	r18, 0x01	; 1
    1674:	16 c0       	rjmp	.+44     	; 0x16a2 <vfprintf+0xb0>
    1676:	83 2d       	mov	r24, r3
    1678:	82 60       	ori	r24, 0x02	; 2
    167a:	38 2e       	mov	r3, r24
    167c:	e3 2d       	mov	r30, r3
    167e:	e4 60       	ori	r30, 0x04	; 4
    1680:	3e 2e       	mov	r3, r30
    1682:	2a c0       	rjmp	.+84     	; 0x16d8 <vfprintf+0xe6>
    1684:	f3 2d       	mov	r31, r3
    1686:	f8 60       	ori	r31, 0x08	; 8
    1688:	1d c0       	rjmp	.+58     	; 0x16c4 <vfprintf+0xd2>
    168a:	37 fc       	sbrc	r3, 7
    168c:	2d c0       	rjmp	.+90     	; 0x16e8 <vfprintf+0xf6>
    168e:	20 ed       	ldi	r18, 0xD0	; 208
    1690:	28 0f       	add	r18, r24
    1692:	2a 30       	cpi	r18, 0x0A	; 10
    1694:	40 f0       	brcs	.+16     	; 0x16a6 <vfprintf+0xb4>
    1696:	8e 32       	cpi	r24, 0x2E	; 46
    1698:	b9 f4       	brne	.+46     	; 0x16c8 <vfprintf+0xd6>
    169a:	36 fc       	sbrc	r3, 6
    169c:	81 c1       	rjmp	.+770    	; 0x19a0 <vfprintf+0x3ae>
    169e:	23 2d       	mov	r18, r3
    16a0:	20 64       	ori	r18, 0x40	; 64
    16a2:	32 2e       	mov	r3, r18
    16a4:	19 c0       	rjmp	.+50     	; 0x16d8 <vfprintf+0xe6>
    16a6:	36 fe       	sbrs	r3, 6
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <vfprintf+0xc4>
    16aa:	8a e0       	ldi	r24, 0x0A	; 10
    16ac:	98 9e       	mul	r9, r24
    16ae:	20 0d       	add	r18, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	92 2e       	mov	r9, r18
    16b4:	11 c0       	rjmp	.+34     	; 0x16d8 <vfprintf+0xe6>
    16b6:	ea e0       	ldi	r30, 0x0A	; 10
    16b8:	2e 9e       	mul	r2, r30
    16ba:	20 0d       	add	r18, r0
    16bc:	11 24       	eor	r1, r1
    16be:	22 2e       	mov	r2, r18
    16c0:	f3 2d       	mov	r31, r3
    16c2:	f0 62       	ori	r31, 0x20	; 32
    16c4:	3f 2e       	mov	r3, r31
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <vfprintf+0xe6>
    16c8:	8c 36       	cpi	r24, 0x6C	; 108
    16ca:	21 f4       	brne	.+8      	; 0x16d4 <vfprintf+0xe2>
    16cc:	83 2d       	mov	r24, r3
    16ce:	80 68       	ori	r24, 0x80	; 128
    16d0:	38 2e       	mov	r3, r24
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0xe6>
    16d4:	88 36       	cpi	r24, 0x68	; 104
    16d6:	41 f4       	brne	.+16     	; 0x16e8 <vfprintf+0xf6>
    16d8:	f7 01       	movw	r30, r14
    16da:	93 fd       	sbrc	r25, 3
    16dc:	85 91       	lpm	r24, Z+
    16de:	93 ff       	sbrs	r25, 3
    16e0:	81 91       	ld	r24, Z+
    16e2:	7f 01       	movw	r14, r30
    16e4:	81 11       	cpse	r24, r1
    16e6:	b3 cf       	rjmp	.-154    	; 0x164e <vfprintf+0x5c>
    16e8:	98 2f       	mov	r25, r24
    16ea:	9f 7d       	andi	r25, 0xDF	; 223
    16ec:	95 54       	subi	r25, 0x45	; 69
    16ee:	93 30       	cpi	r25, 0x03	; 3
    16f0:	28 f4       	brcc	.+10     	; 0x16fc <vfprintf+0x10a>
    16f2:	0c 5f       	subi	r16, 0xFC	; 252
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	9f e3       	ldi	r25, 0x3F	; 63
    16f8:	99 83       	std	Y+1, r25	; 0x01
    16fa:	0d c0       	rjmp	.+26     	; 0x1716 <vfprintf+0x124>
    16fc:	83 36       	cpi	r24, 0x63	; 99
    16fe:	31 f0       	breq	.+12     	; 0x170c <vfprintf+0x11a>
    1700:	83 37       	cpi	r24, 0x73	; 115
    1702:	71 f0       	breq	.+28     	; 0x1720 <vfprintf+0x12e>
    1704:	83 35       	cpi	r24, 0x53	; 83
    1706:	09 f0       	breq	.+2      	; 0x170a <vfprintf+0x118>
    1708:	59 c0       	rjmp	.+178    	; 0x17bc <vfprintf+0x1ca>
    170a:	21 c0       	rjmp	.+66     	; 0x174e <vfprintf+0x15c>
    170c:	f8 01       	movw	r30, r16
    170e:	80 81       	ld	r24, Z
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	0e 5f       	subi	r16, 0xFE	; 254
    1714:	1f 4f       	sbci	r17, 0xFF	; 255
    1716:	88 24       	eor	r8, r8
    1718:	83 94       	inc	r8
    171a:	91 2c       	mov	r9, r1
    171c:	53 01       	movw	r10, r6
    171e:	13 c0       	rjmp	.+38     	; 0x1746 <vfprintf+0x154>
    1720:	28 01       	movw	r4, r16
    1722:	f2 e0       	ldi	r31, 0x02	; 2
    1724:	4f 0e       	add	r4, r31
    1726:	51 1c       	adc	r5, r1
    1728:	f8 01       	movw	r30, r16
    172a:	a0 80       	ld	r10, Z
    172c:	b1 80       	ldd	r11, Z+1	; 0x01
    172e:	36 fe       	sbrs	r3, 6
    1730:	03 c0       	rjmp	.+6      	; 0x1738 <vfprintf+0x146>
    1732:	69 2d       	mov	r22, r9
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	02 c0       	rjmp	.+4      	; 0x173c <vfprintf+0x14a>
    1738:	6f ef       	ldi	r22, 0xFF	; 255
    173a:	7f ef       	ldi	r23, 0xFF	; 255
    173c:	c5 01       	movw	r24, r10
    173e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <strnlen>
    1742:	4c 01       	movw	r8, r24
    1744:	82 01       	movw	r16, r4
    1746:	f3 2d       	mov	r31, r3
    1748:	ff 77       	andi	r31, 0x7F	; 127
    174a:	3f 2e       	mov	r3, r31
    174c:	16 c0       	rjmp	.+44     	; 0x177a <vfprintf+0x188>
    174e:	28 01       	movw	r4, r16
    1750:	22 e0       	ldi	r18, 0x02	; 2
    1752:	42 0e       	add	r4, r18
    1754:	51 1c       	adc	r5, r1
    1756:	f8 01       	movw	r30, r16
    1758:	a0 80       	ld	r10, Z
    175a:	b1 80       	ldd	r11, Z+1	; 0x01
    175c:	36 fe       	sbrs	r3, 6
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <vfprintf+0x174>
    1760:	69 2d       	mov	r22, r9
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	02 c0       	rjmp	.+4      	; 0x176a <vfprintf+0x178>
    1766:	6f ef       	ldi	r22, 0xFF	; 255
    1768:	7f ef       	ldi	r23, 0xFF	; 255
    176a:	c5 01       	movw	r24, r10
    176c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <strnlen_P>
    1770:	4c 01       	movw	r8, r24
    1772:	f3 2d       	mov	r31, r3
    1774:	f0 68       	ori	r31, 0x80	; 128
    1776:	3f 2e       	mov	r3, r31
    1778:	82 01       	movw	r16, r4
    177a:	33 fc       	sbrc	r3, 3
    177c:	1b c0       	rjmp	.+54     	; 0x17b4 <vfprintf+0x1c2>
    177e:	82 2d       	mov	r24, r2
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	88 16       	cp	r8, r24
    1784:	99 06       	cpc	r9, r25
    1786:	b0 f4       	brcc	.+44     	; 0x17b4 <vfprintf+0x1c2>
    1788:	b6 01       	movw	r22, r12
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <fputc>
    1792:	2a 94       	dec	r2
    1794:	f4 cf       	rjmp	.-24     	; 0x177e <vfprintf+0x18c>
    1796:	f5 01       	movw	r30, r10
    1798:	37 fc       	sbrc	r3, 7
    179a:	85 91       	lpm	r24, Z+
    179c:	37 fe       	sbrs	r3, 7
    179e:	81 91       	ld	r24, Z+
    17a0:	5f 01       	movw	r10, r30
    17a2:	b6 01       	movw	r22, r12
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <fputc>
    17aa:	21 10       	cpse	r2, r1
    17ac:	2a 94       	dec	r2
    17ae:	21 e0       	ldi	r18, 0x01	; 1
    17b0:	82 1a       	sub	r8, r18
    17b2:	91 08       	sbc	r9, r1
    17b4:	81 14       	cp	r8, r1
    17b6:	91 04       	cpc	r9, r1
    17b8:	71 f7       	brne	.-36     	; 0x1796 <vfprintf+0x1a4>
    17ba:	e8 c0       	rjmp	.+464    	; 0x198c <vfprintf+0x39a>
    17bc:	84 36       	cpi	r24, 0x64	; 100
    17be:	11 f0       	breq	.+4      	; 0x17c4 <vfprintf+0x1d2>
    17c0:	89 36       	cpi	r24, 0x69	; 105
    17c2:	41 f5       	brne	.+80     	; 0x1814 <vfprintf+0x222>
    17c4:	f8 01       	movw	r30, r16
    17c6:	37 fe       	sbrs	r3, 7
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <vfprintf+0x1e6>
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	0c 5f       	subi	r16, 0xFC	; 252
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	08 c0       	rjmp	.+16     	; 0x17e8 <vfprintf+0x1f6>
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	07 2e       	mov	r0, r23
    17de:	00 0c       	add	r0, r0
    17e0:	88 0b       	sbc	r24, r24
    17e2:	99 0b       	sbc	r25, r25
    17e4:	0e 5f       	subi	r16, 0xFE	; 254
    17e6:	1f 4f       	sbci	r17, 0xFF	; 255
    17e8:	f3 2d       	mov	r31, r3
    17ea:	ff 76       	andi	r31, 0x6F	; 111
    17ec:	3f 2e       	mov	r3, r31
    17ee:	97 ff       	sbrs	r25, 7
    17f0:	09 c0       	rjmp	.+18     	; 0x1804 <vfprintf+0x212>
    17f2:	90 95       	com	r25
    17f4:	80 95       	com	r24
    17f6:	70 95       	com	r23
    17f8:	61 95       	neg	r22
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	f0 68       	ori	r31, 0x80	; 128
    1802:	3f 2e       	mov	r3, r31
    1804:	2a e0       	ldi	r18, 0x0A	; 10
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	a3 01       	movw	r20, r6
    180a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__ultoa_invert>
    180e:	88 2e       	mov	r8, r24
    1810:	86 18       	sub	r8, r6
    1812:	45 c0       	rjmp	.+138    	; 0x189e <vfprintf+0x2ac>
    1814:	85 37       	cpi	r24, 0x75	; 117
    1816:	31 f4       	brne	.+12     	; 0x1824 <vfprintf+0x232>
    1818:	23 2d       	mov	r18, r3
    181a:	2f 7e       	andi	r18, 0xEF	; 239
    181c:	b2 2e       	mov	r11, r18
    181e:	2a e0       	ldi	r18, 0x0A	; 10
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	25 c0       	rjmp	.+74     	; 0x186e <vfprintf+0x27c>
    1824:	93 2d       	mov	r25, r3
    1826:	99 7f       	andi	r25, 0xF9	; 249
    1828:	b9 2e       	mov	r11, r25
    182a:	8f 36       	cpi	r24, 0x6F	; 111
    182c:	c1 f0       	breq	.+48     	; 0x185e <vfprintf+0x26c>
    182e:	18 f4       	brcc	.+6      	; 0x1836 <vfprintf+0x244>
    1830:	88 35       	cpi	r24, 0x58	; 88
    1832:	79 f0       	breq	.+30     	; 0x1852 <vfprintf+0x260>
    1834:	b5 c0       	rjmp	.+362    	; 0x19a0 <vfprintf+0x3ae>
    1836:	80 37       	cpi	r24, 0x70	; 112
    1838:	19 f0       	breq	.+6      	; 0x1840 <vfprintf+0x24e>
    183a:	88 37       	cpi	r24, 0x78	; 120
    183c:	21 f0       	breq	.+8      	; 0x1846 <vfprintf+0x254>
    183e:	b0 c0       	rjmp	.+352    	; 0x19a0 <vfprintf+0x3ae>
    1840:	e9 2f       	mov	r30, r25
    1842:	e0 61       	ori	r30, 0x10	; 16
    1844:	be 2e       	mov	r11, r30
    1846:	b4 fe       	sbrs	r11, 4
    1848:	0d c0       	rjmp	.+26     	; 0x1864 <vfprintf+0x272>
    184a:	fb 2d       	mov	r31, r11
    184c:	f4 60       	ori	r31, 0x04	; 4
    184e:	bf 2e       	mov	r11, r31
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <vfprintf+0x272>
    1852:	34 fe       	sbrs	r3, 4
    1854:	0a c0       	rjmp	.+20     	; 0x186a <vfprintf+0x278>
    1856:	29 2f       	mov	r18, r25
    1858:	26 60       	ori	r18, 0x06	; 6
    185a:	b2 2e       	mov	r11, r18
    185c:	06 c0       	rjmp	.+12     	; 0x186a <vfprintf+0x278>
    185e:	28 e0       	ldi	r18, 0x08	; 8
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	05 c0       	rjmp	.+10     	; 0x186e <vfprintf+0x27c>
    1864:	20 e1       	ldi	r18, 0x10	; 16
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <vfprintf+0x27c>
    186a:	20 e1       	ldi	r18, 0x10	; 16
    186c:	32 e0       	ldi	r19, 0x02	; 2
    186e:	f8 01       	movw	r30, r16
    1870:	b7 fe       	sbrs	r11, 7
    1872:	07 c0       	rjmp	.+14     	; 0x1882 <vfprintf+0x290>
    1874:	60 81       	ld	r22, Z
    1876:	71 81       	ldd	r23, Z+1	; 0x01
    1878:	82 81       	ldd	r24, Z+2	; 0x02
    187a:	93 81       	ldd	r25, Z+3	; 0x03
    187c:	0c 5f       	subi	r16, 0xFC	; 252
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	06 c0       	rjmp	.+12     	; 0x188e <vfprintf+0x29c>
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 5f       	subi	r16, 0xFE	; 254
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
    188e:	a3 01       	movw	r20, r6
    1890:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__ultoa_invert>
    1894:	88 2e       	mov	r8, r24
    1896:	86 18       	sub	r8, r6
    1898:	fb 2d       	mov	r31, r11
    189a:	ff 77       	andi	r31, 0x7F	; 127
    189c:	3f 2e       	mov	r3, r31
    189e:	36 fe       	sbrs	r3, 6
    18a0:	0d c0       	rjmp	.+26     	; 0x18bc <vfprintf+0x2ca>
    18a2:	23 2d       	mov	r18, r3
    18a4:	2e 7f       	andi	r18, 0xFE	; 254
    18a6:	a2 2e       	mov	r10, r18
    18a8:	89 14       	cp	r8, r9
    18aa:	58 f4       	brcc	.+22     	; 0x18c2 <vfprintf+0x2d0>
    18ac:	34 fe       	sbrs	r3, 4
    18ae:	0b c0       	rjmp	.+22     	; 0x18c6 <vfprintf+0x2d4>
    18b0:	32 fc       	sbrc	r3, 2
    18b2:	09 c0       	rjmp	.+18     	; 0x18c6 <vfprintf+0x2d4>
    18b4:	83 2d       	mov	r24, r3
    18b6:	8e 7e       	andi	r24, 0xEE	; 238
    18b8:	a8 2e       	mov	r10, r24
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <vfprintf+0x2d4>
    18bc:	b8 2c       	mov	r11, r8
    18be:	a3 2c       	mov	r10, r3
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <vfprintf+0x2d6>
    18c2:	b8 2c       	mov	r11, r8
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <vfprintf+0x2d6>
    18c6:	b9 2c       	mov	r11, r9
    18c8:	a4 fe       	sbrs	r10, 4
    18ca:	0f c0       	rjmp	.+30     	; 0x18ea <vfprintf+0x2f8>
    18cc:	fe 01       	movw	r30, r28
    18ce:	e8 0d       	add	r30, r8
    18d0:	f1 1d       	adc	r31, r1
    18d2:	80 81       	ld	r24, Z
    18d4:	80 33       	cpi	r24, 0x30	; 48
    18d6:	21 f4       	brne	.+8      	; 0x18e0 <vfprintf+0x2ee>
    18d8:	9a 2d       	mov	r25, r10
    18da:	99 7e       	andi	r25, 0xE9	; 233
    18dc:	a9 2e       	mov	r10, r25
    18de:	09 c0       	rjmp	.+18     	; 0x18f2 <vfprintf+0x300>
    18e0:	a2 fe       	sbrs	r10, 2
    18e2:	06 c0       	rjmp	.+12     	; 0x18f0 <vfprintf+0x2fe>
    18e4:	b3 94       	inc	r11
    18e6:	b3 94       	inc	r11
    18e8:	04 c0       	rjmp	.+8      	; 0x18f2 <vfprintf+0x300>
    18ea:	8a 2d       	mov	r24, r10
    18ec:	86 78       	andi	r24, 0x86	; 134
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <vfprintf+0x300>
    18f0:	b3 94       	inc	r11
    18f2:	a3 fc       	sbrc	r10, 3
    18f4:	11 c0       	rjmp	.+34     	; 0x1918 <vfprintf+0x326>
    18f6:	a0 fe       	sbrs	r10, 0
    18f8:	06 c0       	rjmp	.+12     	; 0x1906 <vfprintf+0x314>
    18fa:	b2 14       	cp	r11, r2
    18fc:	88 f4       	brcc	.+34     	; 0x1920 <vfprintf+0x32e>
    18fe:	28 0c       	add	r2, r8
    1900:	92 2c       	mov	r9, r2
    1902:	9b 18       	sub	r9, r11
    1904:	0e c0       	rjmp	.+28     	; 0x1922 <vfprintf+0x330>
    1906:	b2 14       	cp	r11, r2
    1908:	60 f4       	brcc	.+24     	; 0x1922 <vfprintf+0x330>
    190a:	b6 01       	movw	r22, r12
    190c:	80 e2       	ldi	r24, 0x20	; 32
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <fputc>
    1914:	b3 94       	inc	r11
    1916:	f7 cf       	rjmp	.-18     	; 0x1906 <vfprintf+0x314>
    1918:	b2 14       	cp	r11, r2
    191a:	18 f4       	brcc	.+6      	; 0x1922 <vfprintf+0x330>
    191c:	2b 18       	sub	r2, r11
    191e:	02 c0       	rjmp	.+4      	; 0x1924 <vfprintf+0x332>
    1920:	98 2c       	mov	r9, r8
    1922:	21 2c       	mov	r2, r1
    1924:	a4 fe       	sbrs	r10, 4
    1926:	10 c0       	rjmp	.+32     	; 0x1948 <vfprintf+0x356>
    1928:	b6 01       	movw	r22, r12
    192a:	80 e3       	ldi	r24, 0x30	; 48
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <fputc>
    1932:	a2 fe       	sbrs	r10, 2
    1934:	17 c0       	rjmp	.+46     	; 0x1964 <vfprintf+0x372>
    1936:	a1 fc       	sbrc	r10, 1
    1938:	03 c0       	rjmp	.+6      	; 0x1940 <vfprintf+0x34e>
    193a:	88 e7       	ldi	r24, 0x78	; 120
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <vfprintf+0x352>
    1940:	88 e5       	ldi	r24, 0x58	; 88
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	b6 01       	movw	r22, r12
    1946:	0c c0       	rjmp	.+24     	; 0x1960 <vfprintf+0x36e>
    1948:	8a 2d       	mov	r24, r10
    194a:	86 78       	andi	r24, 0x86	; 134
    194c:	59 f0       	breq	.+22     	; 0x1964 <vfprintf+0x372>
    194e:	a1 fe       	sbrs	r10, 1
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <vfprintf+0x364>
    1952:	8b e2       	ldi	r24, 0x2B	; 43
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <vfprintf+0x366>
    1956:	80 e2       	ldi	r24, 0x20	; 32
    1958:	a7 fc       	sbrc	r10, 7
    195a:	8d e2       	ldi	r24, 0x2D	; 45
    195c:	b6 01       	movw	r22, r12
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <fputc>
    1964:	89 14       	cp	r8, r9
    1966:	38 f4       	brcc	.+14     	; 0x1976 <vfprintf+0x384>
    1968:	b6 01       	movw	r22, r12
    196a:	80 e3       	ldi	r24, 0x30	; 48
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <fputc>
    1972:	9a 94       	dec	r9
    1974:	f7 cf       	rjmp	.-18     	; 0x1964 <vfprintf+0x372>
    1976:	8a 94       	dec	r8
    1978:	f3 01       	movw	r30, r6
    197a:	e8 0d       	add	r30, r8
    197c:	f1 1d       	adc	r31, r1
    197e:	80 81       	ld	r24, Z
    1980:	b6 01       	movw	r22, r12
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <fputc>
    1988:	81 10       	cpse	r8, r1
    198a:	f5 cf       	rjmp	.-22     	; 0x1976 <vfprintf+0x384>
    198c:	22 20       	and	r2, r2
    198e:	09 f4       	brne	.+2      	; 0x1992 <vfprintf+0x3a0>
    1990:	42 ce       	rjmp	.-892    	; 0x1616 <vfprintf+0x24>
    1992:	b6 01       	movw	r22, r12
    1994:	80 e2       	ldi	r24, 0x20	; 32
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <fputc>
    199c:	2a 94       	dec	r2
    199e:	f6 cf       	rjmp	.-20     	; 0x198c <vfprintf+0x39a>
    19a0:	f6 01       	movw	r30, r12
    19a2:	86 81       	ldd	r24, Z+6	; 0x06
    19a4:	97 81       	ldd	r25, Z+7	; 0x07
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <vfprintf+0x3ba>
    19a8:	8f ef       	ldi	r24, 0xFF	; 255
    19aa:	9f ef       	ldi	r25, 0xFF	; 255
    19ac:	2b 96       	adiw	r28, 0x0b	; 11
    19ae:	e2 e1       	ldi	r30, 0x12	; 18
    19b0:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__epilogue_restores__>

000019b4 <strnlen_P>:
    19b4:	fc 01       	movw	r30, r24
    19b6:	05 90       	lpm	r0, Z+
    19b8:	61 50       	subi	r22, 0x01	; 1
    19ba:	70 40       	sbci	r23, 0x00	; 0
    19bc:	01 10       	cpse	r0, r1
    19be:	d8 f7       	brcc	.-10     	; 0x19b6 <strnlen_P+0x2>
    19c0:	80 95       	com	r24
    19c2:	90 95       	com	r25
    19c4:	8e 0f       	add	r24, r30
    19c6:	9f 1f       	adc	r25, r31
    19c8:	08 95       	ret

000019ca <strnlen>:
    19ca:	fc 01       	movw	r30, r24
    19cc:	61 50       	subi	r22, 0x01	; 1
    19ce:	70 40       	sbci	r23, 0x00	; 0
    19d0:	01 90       	ld	r0, Z+
    19d2:	01 10       	cpse	r0, r1
    19d4:	d8 f7       	brcc	.-10     	; 0x19cc <strnlen+0x2>
    19d6:	80 95       	com	r24
    19d8:	90 95       	com	r25
    19da:	8e 0f       	add	r24, r30
    19dc:	9f 1f       	adc	r25, r31
    19de:	08 95       	ret

000019e0 <fputc>:
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	fb 01       	movw	r30, r22
    19ea:	23 81       	ldd	r18, Z+3	; 0x03
    19ec:	21 fd       	sbrc	r18, 1
    19ee:	03 c0       	rjmp	.+6      	; 0x19f6 <fputc+0x16>
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	9f ef       	ldi	r25, 0xFF	; 255
    19f4:	2c c0       	rjmp	.+88     	; 0x1a4e <fputc+0x6e>
    19f6:	22 ff       	sbrs	r18, 2
    19f8:	16 c0       	rjmp	.+44     	; 0x1a26 <fputc+0x46>
    19fa:	46 81       	ldd	r20, Z+6	; 0x06
    19fc:	57 81       	ldd	r21, Z+7	; 0x07
    19fe:	24 81       	ldd	r18, Z+4	; 0x04
    1a00:	35 81       	ldd	r19, Z+5	; 0x05
    1a02:	42 17       	cp	r20, r18
    1a04:	53 07       	cpc	r21, r19
    1a06:	44 f4       	brge	.+16     	; 0x1a18 <fputc+0x38>
    1a08:	a0 81       	ld	r26, Z
    1a0a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a0c:	9d 01       	movw	r18, r26
    1a0e:	2f 5f       	subi	r18, 0xFF	; 255
    1a10:	3f 4f       	sbci	r19, 0xFF	; 255
    1a12:	31 83       	std	Z+1, r19	; 0x01
    1a14:	20 83       	st	Z, r18
    1a16:	8c 93       	st	X, r24
    1a18:	26 81       	ldd	r18, Z+6	; 0x06
    1a1a:	37 81       	ldd	r19, Z+7	; 0x07
    1a1c:	2f 5f       	subi	r18, 0xFF	; 255
    1a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a20:	37 83       	std	Z+7, r19	; 0x07
    1a22:	26 83       	std	Z+6, r18	; 0x06
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <fputc+0x6e>
    1a26:	8b 01       	movw	r16, r22
    1a28:	ec 01       	movw	r28, r24
    1a2a:	fb 01       	movw	r30, r22
    1a2c:	00 84       	ldd	r0, Z+8	; 0x08
    1a2e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a30:	e0 2d       	mov	r30, r0
    1a32:	09 95       	icall
    1a34:	89 2b       	or	r24, r25
    1a36:	e1 f6       	brne	.-72     	; 0x19f0 <fputc+0x10>
    1a38:	d8 01       	movw	r26, r16
    1a3a:	16 96       	adiw	r26, 0x06	; 6
    1a3c:	8d 91       	ld	r24, X+
    1a3e:	9c 91       	ld	r25, X
    1a40:	17 97       	sbiw	r26, 0x07	; 7
    1a42:	01 96       	adiw	r24, 0x01	; 1
    1a44:	17 96       	adiw	r26, 0x07	; 7
    1a46:	9c 93       	st	X, r25
    1a48:	8e 93       	st	-X, r24
    1a4a:	16 97       	sbiw	r26, 0x06	; 6
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <__ultoa_invert>:
    1a58:	fa 01       	movw	r30, r20
    1a5a:	aa 27       	eor	r26, r26
    1a5c:	28 30       	cpi	r18, 0x08	; 8
    1a5e:	51 f1       	breq	.+84     	; 0x1ab4 <__ultoa_invert+0x5c>
    1a60:	20 31       	cpi	r18, 0x10	; 16
    1a62:	81 f1       	breq	.+96     	; 0x1ac4 <__ultoa_invert+0x6c>
    1a64:	e8 94       	clt
    1a66:	6f 93       	push	r22
    1a68:	6e 7f       	andi	r22, 0xFE	; 254
    1a6a:	6e 5f       	subi	r22, 0xFE	; 254
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a70:	9f 4f       	sbci	r25, 0xFF	; 255
    1a72:	af 4f       	sbci	r26, 0xFF	; 255
    1a74:	b1 e0       	ldi	r27, 0x01	; 1
    1a76:	3e d0       	rcall	.+124    	; 0x1af4 <__ultoa_invert+0x9c>
    1a78:	b4 e0       	ldi	r27, 0x04	; 4
    1a7a:	3c d0       	rcall	.+120    	; 0x1af4 <__ultoa_invert+0x9c>
    1a7c:	67 0f       	add	r22, r23
    1a7e:	78 1f       	adc	r23, r24
    1a80:	89 1f       	adc	r24, r25
    1a82:	9a 1f       	adc	r25, r26
    1a84:	a1 1d       	adc	r26, r1
    1a86:	68 0f       	add	r22, r24
    1a88:	79 1f       	adc	r23, r25
    1a8a:	8a 1f       	adc	r24, r26
    1a8c:	91 1d       	adc	r25, r1
    1a8e:	a1 1d       	adc	r26, r1
    1a90:	6a 0f       	add	r22, r26
    1a92:	71 1d       	adc	r23, r1
    1a94:	81 1d       	adc	r24, r1
    1a96:	91 1d       	adc	r25, r1
    1a98:	a1 1d       	adc	r26, r1
    1a9a:	20 d0       	rcall	.+64     	; 0x1adc <__ultoa_invert+0x84>
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <__ultoa_invert+0x48>
    1a9e:	68 94       	set
    1aa0:	3f 91       	pop	r19
    1aa2:	2a e0       	ldi	r18, 0x0A	; 10
    1aa4:	26 9f       	mul	r18, r22
    1aa6:	11 24       	eor	r1, r1
    1aa8:	30 19       	sub	r19, r0
    1aaa:	30 5d       	subi	r19, 0xD0	; 208
    1aac:	31 93       	st	Z+, r19
    1aae:	de f6       	brtc	.-74     	; 0x1a66 <__ultoa_invert+0xe>
    1ab0:	cf 01       	movw	r24, r30
    1ab2:	08 95       	ret
    1ab4:	46 2f       	mov	r20, r22
    1ab6:	47 70       	andi	r20, 0x07	; 7
    1ab8:	40 5d       	subi	r20, 0xD0	; 208
    1aba:	41 93       	st	Z+, r20
    1abc:	b3 e0       	ldi	r27, 0x03	; 3
    1abe:	0f d0       	rcall	.+30     	; 0x1ade <__ultoa_invert+0x86>
    1ac0:	c9 f7       	brne	.-14     	; 0x1ab4 <__ultoa_invert+0x5c>
    1ac2:	f6 cf       	rjmp	.-20     	; 0x1ab0 <__ultoa_invert+0x58>
    1ac4:	46 2f       	mov	r20, r22
    1ac6:	4f 70       	andi	r20, 0x0F	; 15
    1ac8:	40 5d       	subi	r20, 0xD0	; 208
    1aca:	4a 33       	cpi	r20, 0x3A	; 58
    1acc:	18 f0       	brcs	.+6      	; 0x1ad4 <__ultoa_invert+0x7c>
    1ace:	49 5d       	subi	r20, 0xD9	; 217
    1ad0:	31 fd       	sbrc	r19, 1
    1ad2:	40 52       	subi	r20, 0x20	; 32
    1ad4:	41 93       	st	Z+, r20
    1ad6:	02 d0       	rcall	.+4      	; 0x1adc <__ultoa_invert+0x84>
    1ad8:	a9 f7       	brne	.-22     	; 0x1ac4 <__ultoa_invert+0x6c>
    1ada:	ea cf       	rjmp	.-44     	; 0x1ab0 <__ultoa_invert+0x58>
    1adc:	b4 e0       	ldi	r27, 0x04	; 4
    1ade:	a6 95       	lsr	r26
    1ae0:	97 95       	ror	r25
    1ae2:	87 95       	ror	r24
    1ae4:	77 95       	ror	r23
    1ae6:	67 95       	ror	r22
    1ae8:	ba 95       	dec	r27
    1aea:	c9 f7       	brne	.-14     	; 0x1ade <__ultoa_invert+0x86>
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	61 05       	cpc	r22, r1
    1af0:	71 05       	cpc	r23, r1
    1af2:	08 95       	ret
    1af4:	9b 01       	movw	r18, r22
    1af6:	ac 01       	movw	r20, r24
    1af8:	0a 2e       	mov	r0, r26
    1afa:	06 94       	lsr	r0
    1afc:	57 95       	ror	r21
    1afe:	47 95       	ror	r20
    1b00:	37 95       	ror	r19
    1b02:	27 95       	ror	r18
    1b04:	ba 95       	dec	r27
    1b06:	c9 f7       	brne	.-14     	; 0x1afa <__ultoa_invert+0xa2>
    1b08:	62 0f       	add	r22, r18
    1b0a:	73 1f       	adc	r23, r19
    1b0c:	84 1f       	adc	r24, r20
    1b0e:	95 1f       	adc	r25, r21
    1b10:	a0 1d       	adc	r26, r0
    1b12:	08 95       	ret

00001b14 <__muluhisi3>:
    1b14:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__umulhisi3>
    1b18:	a5 9f       	mul	r26, r21
    1b1a:	90 0d       	add	r25, r0
    1b1c:	b4 9f       	mul	r27, r20
    1b1e:	90 0d       	add	r25, r0
    1b20:	a4 9f       	mul	r26, r20
    1b22:	80 0d       	add	r24, r0
    1b24:	91 1d       	adc	r25, r1
    1b26:	11 24       	eor	r1, r1
    1b28:	08 95       	ret

00001b2a <__mulshisi3>:
    1b2a:	b7 ff       	sbrs	r27, 7
    1b2c:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__muluhisi3>

00001b30 <__mulohisi3>:
    1b30:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__muluhisi3>
    1b34:	82 1b       	sub	r24, r18
    1b36:	93 0b       	sbc	r25, r19
    1b38:	08 95       	ret

00001b3a <__prologue_saves__>:
    1b3a:	2f 92       	push	r2
    1b3c:	3f 92       	push	r3
    1b3e:	4f 92       	push	r4
    1b40:	5f 92       	push	r5
    1b42:	6f 92       	push	r6
    1b44:	7f 92       	push	r7
    1b46:	8f 92       	push	r8
    1b48:	9f 92       	push	r9
    1b4a:	af 92       	push	r10
    1b4c:	bf 92       	push	r11
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	ca 1b       	sub	r28, r26
    1b64:	db 0b       	sbc	r29, r27
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
    1b70:	09 94       	ijmp

00001b72 <__epilogue_restores__>:
    1b72:	2a 88       	ldd	r2, Y+18	; 0x12
    1b74:	39 88       	ldd	r3, Y+17	; 0x11
    1b76:	48 88       	ldd	r4, Y+16	; 0x10
    1b78:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b7a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b7c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b7e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b80:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b82:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b84:	b9 84       	ldd	r11, Y+9	; 0x09
    1b86:	c8 84       	ldd	r12, Y+8	; 0x08
    1b88:	df 80       	ldd	r13, Y+7	; 0x07
    1b8a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b8c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b8e:	0c 81       	ldd	r16, Y+4	; 0x04
    1b90:	1b 81       	ldd	r17, Y+3	; 0x03
    1b92:	aa 81       	ldd	r26, Y+2	; 0x02
    1b94:	b9 81       	ldd	r27, Y+1	; 0x01
    1b96:	ce 0f       	add	r28, r30
    1b98:	d1 1d       	adc	r29, r1
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	ed 01       	movw	r28, r26
    1ba6:	08 95       	ret

00001ba8 <__umulhisi3>:
    1ba8:	a2 9f       	mul	r26, r18
    1baa:	b0 01       	movw	r22, r0
    1bac:	b3 9f       	mul	r27, r19
    1bae:	c0 01       	movw	r24, r0
    1bb0:	a3 9f       	mul	r26, r19
    1bb2:	70 0d       	add	r23, r0
    1bb4:	81 1d       	adc	r24, r1
    1bb6:	11 24       	eor	r1, r1
    1bb8:	91 1d       	adc	r25, r1
    1bba:	b2 9f       	mul	r27, r18
    1bbc:	70 0d       	add	r23, r0
    1bbe:	81 1d       	adc	r24, r1
    1bc0:	11 24       	eor	r1, r1
    1bc2:	91 1d       	adc	r25, r1
    1bc4:	08 95       	ret

00001bc6 <_exit>:
    1bc6:	f8 94       	cli

00001bc8 <__stop_program>:
    1bc8:	ff cf       	rjmp	.-2      	; 0x1bc8 <__stop_program>
